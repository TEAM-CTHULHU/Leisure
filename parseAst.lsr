make-subtree svg width height root-x root-y = \f . f svg width height root-x root-y

subtree-svg st = st \svg width height root-x root-y . svg
subtree-width st = st \svg width height root-x root-y . width
subtree-height st = st \svg width height root-x root-y . height
subtree-root-x st = st \svg width height root-x root-y . root-x
subtree-root-y st = st \svg width height root-x root-y . root-y

subtree-set-svg st value = st \svg width height root-x root-y . make-subtree value width height root-x root-y
subtree-set-width st value = st \svg width height root-x root-y . make-subtree svg value height root-x root-y
subtree-set-height st value = st \svg width height root-x root-y . make-subtree svg width value root-x root-y
subtree-set-root-x st value = st \svg width height root-x root-y . make-subtree svg width height value root-y
subtree-set-root-y st value = st \svg width height root-x root-y . make-subtree svg width height root-x value

treeFor ast = svg (subtree-svg (subtreeFor ast)) [['width'|200],['height'|200]]

subtreeFor ast = do
  t = typeof ast
  eq t 'lit'
    createLitSubtree (pretty (ast id))
    eq t 'ref'
      createLitSubtree (pretty (ast id))
    make-subtree '' 0 0 0 0

createLitSubtree lit = (svg-measure-text lit '') \w h . do
  box-w = + w 20
  box-h = + h 10
  make-subtree (concat [(rect [['x'|0],['y'|0],['width'|box-w],['height'|box-h],['stroke'|'black'],['stroke-width'|2],['fill'|'green']]), (text lit [['text-anchor'|"middle"],['dominant-baseline'|"mathematical"],['x'|(+ 10 (/ w 2))],['y'|(+ 5 (/ h 2))]])]) box-w box-h (/ box-w 2) (/ box-h 2)

typeof x = getType x id false

# parseRef r tree = add-child tree (make-tree [ 'ref', (r id) ] )
# 
# parseLit l tree = add-child tree (make-tree [ 'lit', (l id) ] )
# 
# parseLambda l tree = l (\v b . add-child tree (add-child (make-tree [ 'lambda', v ]) (parseAst b nil))  )
# 
# parseApply a tree = a (\func arg . add-child tree (add-child (add-child (make-tree [ 'apply', '' ]) (parseAst func nil)) (parseAst arg nil)) )
# 
# 
# parseAst a tree = do
#   t = typeof a
#   (eq t 'ref')
#     parseRef a tree
#     (eq t 'lit')
#       parseLit a tree
#       (eq t 'lambda')
#         parseLambda a tree
#         parseApply a tree
# 
# 
# make-error err = make-tree [ 'error', (err id) ]
# 
# parseTree s = (parse s) (\x. parseAst x nil) make-error
# 
# #ex: printAst (parse 'cons (\x.x) 2' id id)
# 
# 
# build-svg-node n = (rect nil)
# 
# build-svg-children t = ''
# 
# build-tree c = if (null? c) ''
#   concat [ build-svg-node (data c), build-svg-children (first-child c) ]
# 
# build-svg tree = traverse-infix tree build-tree
# 
# tst = (build-svg (parseTree '1'))


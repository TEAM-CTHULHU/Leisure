#@auto
forward 'notebookSelection'

make-node svg width height root-x root-y = \f . f svg width height root-x root-y

node-svg st = st \svg width height root-x root-y . svg
node-width st = st \svg width height root-x root-y . width
node-height st = st \svg width height root-x root-y . height
node-root-x st = st \svg width height root-x root-y . root-x
node-root-y st = st \svg width height root-x root-y . root-y

node-translate st x y = st \svg width height root-x root-y . make-node
  translate svg x y
  width
  height
  + root-x x
  + root-y y

node-line n1 n2 = n1 \s1 w1 h1 x1 y1 . n2 \s2 w2 h2 x2 y2 .
  line [['x1'|x1],['y1'|y1],['x2'|x2],['y2'|y2]|default-line-map]

astFor func = isFunc func
  funcSource func (\src . parse src) (right 'no source')
  left (lit func)

treeForNotebook func = do
  s <- notebookSelection func
  printValue
    astFor func
      \ast . treeForWith ast \ast map . s (\start end . (shouldHighlight ast start end) (highlight map) map) map
      \ignore . concat ['no source for ' func]

rangeContainsRange start end innerStart innerEnd = and (lte start innerStart) (lte innerEnd end)

shouldHighlight ast start end = do
  astStart = ast-start ast
  astEnd = ast-end ast
  or
    rangeContainsRange start end astStart astEnd
    or
      and
        or (eq 'lit' (getType ast id id)) (eq 'ref' (getType ast id id))
        rangeContainsRange astStart astEnd start end
      and
        eq 'lambda' (getType ast id id)
        rangeContainsRange astStart (+ astStart (strlen (ast \v b . v))) start end

highlight map = do
  c = get-value 'fill' map
  eq c '#fcc'
    add-hash 'fill' 'red' map
    eq c '#cfc'
      add-hash 'fill' 'green' map
      eq c '#ccf'
        add-hash 'fill' 'blue' map
        map

treeForFunc func = treeFor (parse (funcSource func id false) id false)

treeFor ast = treeForWith ast \ast map . map

treeForWith ast mapFunc = node-svg (nodeFor ast mapFunc)

nodeFor ast mapFunc = do
  t = typeof ast
  eq t 'lit'
    createLitNode ast (pretty (ast id)) mapFunc
    eq t 'ref'
      createRefNode ast (pretty (ast id)) mapFunc
      eq t 'lambda'
        ast (\v b . createLambdaNode ast v b mapFunc)
        eq t 'apply'
          ast (\f a . createApplyNode ast f a mapFunc)
          make-node (svg-node '') 0 0 0 0

redStyle = [['stroke'|'black'],['stroke-width'|2],['fill'|'#fcc'],['rx'|8],['ry'|8]]
greenStyle = [['stroke'|'black'],['stroke-width'|2],['fill'|'#cfc'],['rx'|8],['ry'|8]]
blueStyle = [['stroke'|'black'],['stroke-width'|2],['fill'|'#ccf'],['rx'|8],['ry'|8]]

createLambdaNode ast v b mapFunc = do
  rootBox = textNode (mapFunc ast greenStyle) 'lambda'
  varBox = textNode (mapFunc ast greenStyle) v
  bodyTree = nodeFor b mapFunc
  childWidth = + (+ (node-width varBox) 5) (node-width bodyTree)
  totalWidth = max childWidth (node-width rootBox)
  pad = max 0 (/ (- totalWidth childWidth) 2)
  rootBox = node-translate rootBox (- (/ totalWidth 2) (/ (node-width rootBox) 2)) 0
  varBox = node-translate varBox pad (+ (node-height rootBox) 5)
  bodyTree = node-translate bodyTree (+ pad (+ (node-width varBox) 5)) (+ (node-height rootBox) 5)
  make-node
    svg-concat [(node-line rootBox varBox), (node-line rootBox bodyTree), (node-svg varBox),(node-svg bodyTree),(node-svg rootBox)]
    totalWidth
    + (+ (node-height rootBox) 5) (max (node-height varBox) (node-height bodyTree))
    / totalWidth 2
    / (node-height rootBox) 2

createApplyNode ast f a mapFunc = do
  rootBox = textNode (mapFunc ast blueStyle) 'apply'
  funcTree = nodeFor f mapFunc
  argTree = nodeFor a mapFunc
  childWidth = + (+ (node-width argTree) 5) (node-width funcTree)
  totalWidth = max childWidth (node-width rootBox)
  pad = max 0 (/ (- totalWidth childWidth) 2)
  rootBox = node-translate rootBox (- (/ totalWidth 2) (/ (node-width rootBox) 2)) 0
  funcTree = node-translate funcTree pad (+ (node-height rootBox) 5)
  argTree = node-translate argTree (+ pad (+ (node-width funcTree) 5)) (+ (node-height rootBox) 5)
  make-node
    svg-concat [(node-line rootBox funcTree), (node-line rootBox argTree), (node-svg rootBox), (node-svg funcTree), (node-svg argTree)]
    totalWidth
    + (+ (node-height rootBox) 5) (max (node-height argTree) (node-height funcTree))
    / totalWidth 2
    / (node-height rootBox) 2

createRefNode ast ref mapFunc = textNode (mapFunc ast redStyle) ref
createLitNode ast lit mapFunc = textNode (mapFunc ast greenStyle) lit

textNode map txt = (svg-measure-text txt '') \w h . do
  node-w = + w 24
  node-h = + h 14
  make-node
    (svg-concat [(rect [['x'|2],['y'|2],['width'|node-w],['height'|node-h] | map]), (text txt [['text-anchor'|"middle"],['dominant-baseline'|"mathematical"],['x'|(+ 14 (/ w 2))],['y'|(+ 5 (/ h 2))], ['font-weight'|'bold']])])
    node-w
    node-h
    / node-w 2
    / node-h 2

typeof x = getType x id false

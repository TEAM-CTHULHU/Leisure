* GO THROUGH OLD SLIDES
** This is Leisure, a web-based computing environment.
** Use Leisure to make and deploy multiuser web applications, like this game.
** Reveal hidden code and data using the Leisure bar
*** Show the document source for any slide or for the whole document
** Data binding
*** Data/view binding
**** the board data changes when you click pieces in the board view
**** the board view contents changes when you edit the board data
**** the board view layout changes when you edit the view definition
*** Data/code binding
**** the playerNames in board changes when you edit the user data or change the name
** Documents are automatically collaborative
*** Development time
***
** Besides standard languages like JavaScript and CoffeeScript, Leisure provides its own language
*** See results in the document (planned for other languages)
*** Dynamically typed, lazy, functional language
**** Infinite streams
**** Display partial application
**** show ASTs
* Leisure: The Document Is the Machine!
- environment
  - for both development and deployment
  - persistent
  - collaborative
  - live
  - literate
  - document-based
  - runs on the web
  - ployglot: JS, Leisure, ... (CoffeeScript, ClojureScript soon)
- Leisure language
  - purely functional
  - lazy
  - dynamically typed
  - homoiconic

* Collaborative connect 4 game
  - Leisure code that monadically changes data blocks
  - HTML templates in the doc
    - one for the board
    - one for a square (nested in board)

* notebook presentation
- for development and deployment
- Start with data slides hidden (toggle button in leisure bar)
- what slides are
- sidebar/floating notes
- slide/fancy/plain mode
- properties/tags inherited by functions in slides
- themes
- local slides

* collaboration at both development and runtime
- each document is a collaborative virtual machine
- human-readable data (yaml)
- data blocks (mud, etc)

* (maybe this should all be one point?) virtual text file architecture (data blocks)
- data blocks allow scalability
- blocks can contain metadata about their text (parsed objects, etc.)
- browser doesn't have to render the entire file, only what's visible
- efficient, in-place updating

* specially interpreted data blocks
- view definitions
- code
- data
- links to render data in views

* language features
- metaprogramming
- functional
- monadic i/o interface
- access arguments of partially applied functions
- source map support

* development features
- test cases
- repository comments
- ast display
- output can dynamically update
- renders HTML/SVG/view output directly

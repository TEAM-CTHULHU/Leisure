* Intro
Leisure documents can contain classic games,
like Connect Four...

[[http://www.abstractstrategy.com/connect-four.jpg]]










* Game
:properties:
:note: sidebar
:end:
[[org:user1/userName]][[org:board1]][[org:board1/playerList]]
* Data
:properties:
:hidden: true
:end:
This is the board data and the user data...
- w = white
- b = black
- r = red
- other = gray
#+NAME: board1
#+BEGIN_SRC yaml :flowLevel 2
type: board
pieces:
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
max_col: 7
max_row: 6
players: []
turn: 0
#+END_SRC
#+NAME: user1
#+BEGIN_SRC yaml :local
type: user
color: r
number: -1
name: Anonymous
#+END_SRC

* Bindings
:properties:
:hidden: true
:end:
This observer code updates the board when the user changes their name.
#+BEGIN_SRC coffee :results def :observe user
@update = App.updateUser = (user)->
  console.log "updating from change to user data"
  board = getDataNamed 'board1'
  board.players[user.number] = user
  setDataNamed 'board1', board
#+END_SRC

Let's keep the board validated, here, stubbornly fixing things...
#+BEGIN_SRC coffee :results def :observe board
@update = (board, block)->
  user = getDataNamed 'user1'
  if user.number > 1 then return
  changed = false
  if !(board.pieces instanceof Array) then (changed = board).pieces = []
  if typeof board.max_row != 'number' then (changed = board).max_row = 6
  if typeof board.max_col != 'number' then (changed = board).max_col = 7
  while board.pieces.length < board.max_row then (changed = board).pieces.unshift []
  while board.pieces.length > board.max_row then (changed = board).pieces.shift()
  for row in [0 ... board.max_row]
    if !(r = board.pieces[row]) instanceof Array then r = (changed = board).pieces[row] = []
    while r.length < board.max_col then (changed = r).push 'w'
    while r.length > board.max_col then (changed = r).pop()
    for col in [0 ... board.max_col]
      if !(board.pieces[row][col] in 'wrb') then (changed = board).pieces[row][col] = 'w'
  if changed then setData block._id, board
#+END_SRC


#+BEGIN_SRC html :defview user/userName
<table style='width: 100%; white-space: nowrap'>
  <tr>
    <td style='width: 1px'>Name:</td>
    <td><input style='width: 100%; margin-left: 5px; margin-right: 5px' type='text' data-value='name'></input></td>
    <td style='width: 1px'>
      <button onclick="App.newGame(this)">New Game</button>
    </td>
  </tr>
</table>
#+END_SRC

#+BEGIN_SRC html :defview board
<style>
  #boardDiv {
    background: url(/connect4/board.svg) 0 0 / 100% 100% no-repeat;
    padding: 10px;
    display: inline-block;
  }
  #boardDiv table {
    text-align: center;
  }
  #boardDiv img {
    vertical-align: middle;
  }
  h2 {
    margin-top: 0;
  }
  h2 {
    margin-top: 0;
  }
</style>
<div id='boardDiv' onclick='App.handleClick(event)'>
  <table>
    {{#each pieces}}
    <tr>
      {{#each this}}
        <td>
          <img src='/connect4/{{this}}Piece.svg' onerror='this.src="/connect4/gPiece.svg"'>
        </td>
      {{/each}}
    </tr>
    {{/each}}
  </table>
</div>
<script>App.hookupTable()</script>
<h2>Players</h2>
<div>
  {{#each players}}
    <span style="{{userStyle @index}}">{{{turn @index}}}{{this.name}}</span>
  {{/each}}
</div>
#+END_SRC

#+BEGIN_HTML
<audio id="clickSound" src="sounds/click.wav"></audio>
<audio id="buzzerSound" src="sounds/buzz.wav"></audio>
#+END_HTML

* Support code
:properties:
:hidden: true
:end:

#+BEGIN_SRC coffee :results def
# Handlbar helper to compute style for each player
Handlebars.registerHelper 'userStyle', (index)->
  baseColor = if index % 2 == 0 then 'black' else 'red'
  rest = if App.isPlayersTurn index then "background-color: #{baseColor}; color: white;" else "background-color: white; color: #{baseColor};"
  "padding: 10px; #{rest}"

# Handlebar helper to create an arrow icon for the active player
Handlebars.registerHelper 'turn', (index)->
  return ''
  html = if !App.isPlayersTurn index then "<i class='fa fa-arrow-right' style='margin-right: 10px;'></i>" else '<i style="margin-right: 30px;"></i>'
  new Handlebars.SafeString html
#+END_SRC

#+BEGIN_SRC coffee :results def
{
  viewBlock,
  setData,
  getDataNamed,
  setDataNamed,
} = Leisure
pieceTypes = "wrb"

# Return boolean for whether it's the given player's turn currently
App.isPlayersTurn = (index)->
  board = getDataNamed 'board1'
  return board.turn % board.players.length == index

# Reset the game board for a new game
App.newGame = (node)->
  block = Leisure.getBlock($(node).closest("[data-view-id]").attr 'data-view-id')
  data = block.yaml
  col = 0
  while col < data.max_col
    row = 0
    while row < data.max_row
      data.pieces[row][col] = 'w'
      ++row
    ++col
  data.turn = 0
  setData block._id, data

# Process a player clicking the board and provide audio feedback
App.handleClick = (e)->
  turn = App.takeTurn e
  sound = if turn then '#clickSound' else '#buzzerSound'
  $('[data-org-html]').shadow().find(sound)[0].play()
  if turn then console.log "click" else console.log "buzzer"

# Add a piece to the board on the column clicked (if there's room for it) Return success or failure
App.takeTurn = (e)->
    user = getDataNamed 'user1'
    if user.number < 0 then return false
    if !App.isPlayersTurn user.number then return false
    if block = viewBlock e.target
      data = block.yaml
      td = e.target.parentElement
      col = td.cellIndex
      row = td.parentElement.rowIndex
      if col?
        row = data.max_row - 1
        while data.pieces[row][col] != 'w'
          if -1 == --row then break
        if row > -1
          data.pieces[row][col] = user.color
          ++data.turn
          setData block._id, data
          return true
        return false
    return false

# Create a click handler function for the playing board
App.hookupTable = ->
  $(Templating.currentViewLink)
    .closest("[data-org-headline='1']")
    .attr 'game', ''
  #$(Templating.currentView).bind 'click', (e)->
  #  App.handleClick e

# Splice in some css for styling the game board
$(document.head).prepend $("""
<style>
[game] {
  position: fixed !important;
  top: 50px !important;
  right: 10px !important;
  z-index: 1 !important;
}
.slides [game] { left: auto !important; }
.googie.slides [game] { top: 300px !important; }
.cthulhu.slides [game] { top: 300px !important; }
.steampunk.slides [game] { top: 150px !important; }
.flat.slides [game] { top: 182px !important; }
.console.slides [game] { top: 182px !important; }
.slides [game] [data-org-type='text'] { display: none; }
</style>
""")

# Each time a new player connects, we need to initialize them and add them into the game
user = getDataNamed 'user1'
if user.number == -1
  setTimeout (->
    board = getDataNamed 'board1'
    console.log JSON.stringify board
    user.number = board.players.length
    user.color = if 0 == user.number % 2 then 'b' else 'r'
    setDataNamed 'user1', user
    App.updateUser user), Math.random() * 500

# Adjust the Leisure settings on startup
Leisure.toggleLeisureBar()
Leisure.setTheme 'googie'
#+END_SRC

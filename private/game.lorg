* Data
:properties:
:hidden: true
:end:
This is the board data and the user data...
- w = white
- b = black
- r = red
- other = gray
#+NAME: board
#+BEGIN_SRC yaml :flowLevel 2
type: board
pieces:
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
  - [w, w, w, w, w, w, w]
playerCount: 0
colors: rbg
playerNames: []
#+END_SRC
#+NAME: user
#+BEGIN_SRC yaml :local :flowLevel 2
type: local
color: r
number: -1
name: Anonymous
#+END_SRC

* Game
:properties:
:note: sidebar
:end:
[[org:user/userName]]
[[org:board]]
* Code
:properties:
:hidden: true
:end:
#+BEGIN_SRC html :defview local/userName
Name: <input type='text' data-value='name'></input>
#+END_SRC
#+BEGIN_SRC html :defview board
<style>@import "jquery-ui/css/leisure/jquery-ui-1.9.2.custom.min.css";</style>
<div style='float: left'>
  <div style='background: url(/connect4/board.svg) 0 0 / 100% 100% no-repeat; padding: 10px'>
    <table style='text-align: center'>
      {{#each pieces}}
      <tr>
        {{#each this}}
          <td>
            <img src='/connect4/{{this}}Piece.svg' onerror='this.src="/connect4/gPiece.svg"' style='vertical-align: middle'>
          </td>
        {{/each}}
      </tr>
      {{/each}}
    </table>
  </div
  <br><button onclick="App.toggleFixed(this)">Pin</button>
</div>
<div style='float: left; margin-left: 10px'>
  <h2 style='margin-top: 0'>Players</h2>
  {{#each playerNames}}
    <div>{{this}}</div>
  {{/each}}
</div>
<script>App.hookupTable()</script>
#+END_SRC

#+BEGIN_SRC coffee :results def
{
  viewBlock,
  setData,
} = Leisure
pieceTypes = "wrb"

fixed = false
link = null

App.hookupTable = ->
  link = Templating.currentViewLink
  $(Templating.currentView).bind 'click', (e)->
    if block = viewBlock e.target
      data = block.yaml
      td = e.target.parentElement
      col = td.cellIndex
      row = td.parentElement.rowIndex
      if row? && col?
        data.pieces[row][col] = pieceTypes[(1 + pieceTypes.indexOf data.pieces[row][col]) % pieceTypes.length]
      setData block._id, data
      App.doFixed()

App.toggleFixed = ->
  fixed = !fixed
  App.doFixed()

App.doFixed = ->
  node = $(link).closest("[data-org-headline='1']")
  console.log "link:", link, "node:", node
  if fixed then node.attr 'style', 'position: fixed; top: 50px; right: 10px; z-index: 1'
  else node.removeAttr 'style'
#+END_SRC

#+NAME: updateNames
#+BEGIN_SRC coffee :results def :observe user
{

  getDataNamed,
  setDataNamed,
} = Leisure

App.updateUser = (user)->
  console.log "updating from change to user"
  board = getDataNamed 'board'
  board.playerNames[user.number] = user.name
  setDataNamed 'board', board

user = getDataNamed 'user'
if user.number == -1
  board = getDataNamed 'board'
  console.log JSON.stringify board
  user.number = board.playerCount++
  setDataNamed 'board', board
  setDataNamed 'user', user
  App.updateUser user

@update = App.updateUser

Leisure.setTheme 'googie'
Leisure.toggleLeisureBar()
#+END_SRC

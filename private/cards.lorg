* Cards

#+NAME: proto1
#+BEGIN_SRC yaml
type: card-proto
image: /images/cthulhu_test_green.png
name: Card 1
text: Some <large><b>text</b></large> for<br>card 1
#+END_SRC
#+NAME: proto2
#+BEGIN_SRC yaml
type: card-proto
image: /images/cthulhu_test_white.png
name: Card 2
text: Some <large><b>text</b></large> for<br>card 2
#+END_SRC

#+NAME: player1
#+BEGIN_SRC yaml
type: player
name: Fred
#+END_SRC
#+NAME: player2
#+BEGIN_SRC yaml
type: player
name: George
#+END_SRC

#+NAME: card1
#+BEGIN_SRC yaml
type: card
proto: proto1
player: player1
#+END_SRC
#+NAME: card2
#+BEGIN_SRC yaml
type: card
proto: proto2
player: player1
#+END_SRC
#+NAME: card3
#+BEGIN_SRC yaml
type: card
proto: proto1
player: player2
#+END_SRC

#+NAME: d1
#+BEGIN_SRC yaml
type: dragger
item: card1
left: 150
top: 30
#+END_SRC
#+NAME: d2
#+BEGIN_SRC yaml
type: dragger
item: card2
left: 250
top: 60
#+END_SRC
#+NAME: d3
#+BEGIN_SRC yaml
type: dragger
item: card3
left: 350
top: 90
#+END_SRC

#+NAME: dl
#+BEGIN_SRC yaml
type: draggerList
draggers:
- d1
- d2
- d3
#+END_SRC

[[leisure:dl]]
* Views

#+BEGIN_SRC html :defview card-proto
<div class='card-frame'>
  <div><b>{{name}}</b></div>
  <table class='card-image'><tr><td><img src="{{image}}"></td></tr></table>
  {{{text}}}
</div>
#+END_SRC

#+BEGIN_SRC html :defview player/cardLabel
<div class='owner-label'>{{name}}</div>
#+END_SRC

#+BEGIN_SRC html :defview card
{{{view player "cardLabel"}}}
{{{view proto}}}
#+END_SRC

#+BEGIN_SRC html :defview dragger
{{{view item}}}
<script>
  App.hookupDragger();
</script>
#+END_SRC

#+BEGIN_SRC html :defview draggerList
<div class='card-shared'>
  <div class='card-shared-contents'>
    {{#each draggers}}
    {{{view this}}}
    {{/each}}
  </div>
  <script>App.handleDrop(document.currentScript.previousElementSibling)</script>
</div>
#+END_SRC
* Styles

#+BEGIN_SRC coffee :results def
Leisure.addStyles 'viewStyles', """
  * /deep/ .card-shared {
    position: fixed;
    top: 50px;
    right: 10px;
    border: solid red 1px;
    display: inline-block;
    z-index: 100000;
  }
  * /deep/ .card-shared-contents {
    display: inline-block;
    width: 800px;
    height: 800px;
    position: relative;
  }
  * /deep/ .owner-label {
    text-align: center;
    border: solid green 3px;
    border-radius: 10px;
    background: lightgray;
  }
  * /deep/ .card-frame {
    display: inline-block;
    border-radius: 10px;
    border: solid blue 3px;
    padding: 5px;
    width: 300px;
    height: 400px;
    background: white;
  }
  * /deep/ .card-image {
    min-height: 100px;
    width: 100%;
  }
  * /deep/ .card-image td {
    text-align: center;
    vertical-align: middle;
  }
"""
##+END_SRC
#* Support code
#:PROPERTIES:
#:hidden: true
#:END:
#
#We can indicate movement, here, with another view that's a line connected
#to the original center that disappears on mouse up.  Each player could get
#their own view.
#
##+BEGIN_SRC coffee :results def
App.hookupDragger = ->
  if Templating.currentScript
    view = $(Templating.currentScript).closest('[data-view-block]')
    id = view.attr 'data-view-block'
    data = Leisure.getBlock(id).yaml
    v = view[0]

    App.drag v,
      init: ->
        view
          .css 'zIndex', '100'
          .css 'top', "#{data.top}px"
          .css 'left', "#{data.left}px"
      constrain: 'container'
      update: (card, id, data)->
        data.left = card.offsetLeft
        data.top = card.offsetTop
        Leisure.setData id, data
##+END_SRC
#
#View dragging -- jQueryUI's dragging seems to have trouble with shadow
#
##+BEGIN_SRC coffee :results def
dragUpdate = Lodash.throttle ((view, func)->
  id = view.getAttribute 'data-view-block'
  data = Leisure.getBlock(id).yaml
  Leisure.blockViewUpdatesWhile $("[data-view-ids~='#{id}']"), -> func view, id, data
  ), 200, leading: true, trailing: true

App.drag = (el, options)->
  if !el.drag
    el.drag = {}
    el.drag.move = if !options?.constrain then setOffsets
    else if options.constrain == 'container'
      constrainToElement App.getContainer el
    else if options.constrain instanceof Element
      constrainToElement options.constrain
    else setOffsets
    $(el)
      .css '-webkit-user-select', 'none'
      .css 'user-select', 'none'
    $(el).on 'mousedown', el.drag.downFunc = (e)->
      e.preventDefault()
      el.drag.dragging = true
      {top, left} = el.getBoundingClientRect()
      offsetX = left - e.clientX
      offsetY = top - e.clientY
      move = (e)->
        if el.drag.move(el, e.clientX + offsetX, e.clientY + offsetY) && options?.update
          dragUpdate el, options.update
        options?.drag? el
      up = (e)->
        if el.drag.move(el, e.clientX + offsetX, e.clientY + offsetY) && options?.update
          dragUpdate el, options.update
        el.drag.dragging = false
        $(document).off 'mouseup', up
        $(document).off 'mousemove', move
        options?.end? el
      $(document).on 'mouseup', up
      $(document).on 'mousemove', move
    if getComputedStyle(el).position != 'absolute'
      $(el).css 'position', 'absolute'
  if !el.drag.dragging then options?.init? el

App.handleDrop = (el)->
  el.addEventListener 'dragover', (e)-> e.dataTransfer.dropEffect = 'copy'
  el.addEventListener 'drop', ((e)->
    debuggerBreak()
    t = e.dataTransfer
    if 'text/html' in t.types
      item = $(t.getData('text/html'))
      if item.length == 1 && item.is 'img'
        e.preventDefault()
        console.log "dropped: ", item), true

debuggerBreak = ->
  console.assert false

setOffsets = (el, newLeft, newTop)->
  {left, top} = el.getBoundingClientRect()
  newLeft = Math.round newLeft
  newTop = Math.round newTop
  left = Math.round left
  top = Math.round top
  changed = false
  if newLeft != left then changed = el.style.left = "#{el.offsetLeft + newLeft - left}px"
  if newTop != top then changed = el.style.top = "#{el.offsetTop + newTop - top}px"
  changed

constrainToElement = (constraintElement)-> (el, newLeft, newTop)->
  constrainToClientRect el, constraintElement.getBoundingClientRect(), newLeft, newTop

constrainToClientRect = (el, rect, newLeft, newTop)->
  r = el.getBoundingClientRect()
  offLeft = newLeft - r.left
  offTop = newTop - r.top
  if r.bottom + offTop > rect.bottom then newTop -= r.bottom + offTop - rect.bottom
  if r.right + offLeft > rect.right then newLeft -= r.right + offLeft - rect.right
  setOffsets el, Math.max(newLeft, rect.left), Math.max(newTop, rect.top)

App.nodrag = (el)->
  if el.drag.downFunc
    $(el).off 'mousedown', el.drag.downFunc
    delete el.drag

App.getContainer = (el)->
  parent = el
  while parent = parent.parentNode
    if getComputedStyle(parent).position in ['absolute', 'relative', 'fixed']
      return parent
  document.body
#+END_SRC

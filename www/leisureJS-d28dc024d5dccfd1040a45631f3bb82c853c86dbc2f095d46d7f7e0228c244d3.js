;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
(function(global){// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2012, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var L_anno, L_apply, L_lambda, L_let, L_lit, L_ref, LeisureObject, Leisure_BaseCons, Leisure_cons, Leisure_nil, Nil, anno, apply, ast2Json, ast2JsonEncodings, astString, charCodes, checkType, cons, consEq, consFrom, define, ensureLeisureClass, evalFunc, foldLeft, functionInfo, getAnnoBody, getAnnoData, getAnnoName, getApplyArg, getApplyFunc, getDataType, getLambdaBody, getLambdaVar, getLetBody, getLetName, getLetValue, getLitVal, getRefName, getType, head, jsType, json2Ast, json2AstEncodings, lambda, lazy, leisureAddFunc, letStr, lit, llet, lz, makeSuper, mkProto, nameFunc, nameSub, primCons, primFoldLeft, ref, resolve, root, rz, save, setDataType, setType, supertypes, tail, throwError, _, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = root = module.exports = require('./base'), resolve = _ref.resolve, lazy = _ref.lazy;

  _ = require('./lodash.min');

  rz = resolve;

  lz = lazy;

  charCodes = {
    "'": '$a',
    ',': '$b',
    '$': '$$',
    '@': '$d',
    '?': '$e',
    '/': '$f',
    '*': '$g',
    '&': '$h',
    '^': '$i',
    '!': '$k',
    '`': '$l',
    '~': '$m',
    '-': '$_',
    '+': '$o',
    '=': '$p',
    '|': '$q',
    '[': '$r',
    ']': '$s',
    '{': '$t',
    '}': '$u',
    '"': '$v',
    ':': '$w',
    ';': '$x',
    '<': '$y',
    '>': '$z',
    '%': '$A',
    '.': '$B'
  };

  nameSub = function(name) {
    var code, i, s, _i, _ref1;

    s = '';
    for (i = _i = 0, _ref1 = name.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      code = charCodes[name[i]];
      s += code != null ? code : name[i];
    }
    return s;
  };

  setDataType = function(func, dataType) {
    if (dataType) {
      func.dataType = dataType;
    }
    return func;
  };

  setType = function(func, type) {
    if (type) {
      func.type = type;
    }
    func.__proto__ = (ensureLeisureClass(type)).prototype;
    return func;
  };

  LeisureObject = (function() {
    function LeisureObject() {}

    return LeisureObject;

  })();

  LeisureObject.prototype.__proto__ = Function.prototype;

  LeisureObject.prototype.className = 'LeisureObject';

  global.Leisure_Object = LeisureObject;

  supertypes = {};

  root.leisureClassChange = 0;

  ensureLeisureClass = function(leisureClass) {
    var cl;

    cl = "Leisure_" + (nameSub(leisureClass));
    if (global[cl] == null) {
      global[cl] = eval("(function " + cl + "(){})");
      supertypes[cl] = 'Leisure_Object';
      global[cl].prototype.__proto__ = LeisureObject.prototype;
      root.leisureClassChange++;
    }
    return global[cl];
  };

  makeSuper = function(type, supertype) {
    supertypes["Leisure_" + (nameSub(type))] = "Leisure_" + (nameSub(supertype));
    return root.leisureClassChange++;
  };

  ensureLeisureClass('cons');

  ensureLeisureClass('nil');

  supertypes.Leisure_cons = 'Leisure_Object';

  supertypes.Leisure_nil = 'Leisure_Object';

  ensureLeisureClass('ast');

  ensureLeisureClass('lit');

  Leisure_lit.prototype.toString = function() {
    return "lit(" + (getLitVal(this)) + ")";
  };

  ensureLeisureClass('ref');

  Leisure_ref.prototype.toString = function() {
    return "ref(" + (getRefName(this)) + ")";
  };

  ensureLeisureClass('lambda');

  Leisure_lambda.prototype.toString = function() {
    return "lambda(" + (astString(this)) + ")";
  };

  ensureLeisureClass('apply');

  Leisure_apply.prototype.toString = function() {
    return "apply(" + (astString(this)) + ")";
  };

  ensureLeisureClass('let');

  Leisure_let.prototype.toString = function() {
    return "let(" + (astString(this)) + ")";
  };

  ensureLeisureClass('anno');

  Leisure_anno.prototype.toString = function() {
    return "anno(" + (astString(this)) + ")";
  };

  ensureLeisureClass('doc');

  ensureLeisureClass('srcLocation');

  ensureLeisureClass('pattern');

  makeSuper('lit', 'ast');

  makeSuper('ref', 'ast');

  makeSuper('lambda', 'ast');

  makeSuper('apply', 'ast');

  makeSuper('let', 'ast');

  makeSuper('anno', 'ast');

  astString = function(ast) {
    var argStr, funcStr, _ref1;

    switch (getType(ast)) {
      case 'lit':
        return getLitVal(ast);
      case 'ref':
        return getRefName(ast);
      case 'apply':
        funcStr = astString(getApplyFunc(ast));
        if ((_ref1 = getType(getApplyFunc(ast))) === 'lambda' || _ref1 === 'let') {
          funcStr = "(" + funcStr + ")";
        }
        argStr = astString(getApplyArg(ast));
        if (getType(getApplyArg(ast)) === 'apply') {
          argStr = "(" + argStr + ")";
        }
        return "" + funcStr + " " + argStr;
      case 'lambda':
        return "\\" + (getLambdaVar(ast)) + " . " + (astString(getLambdaBody(ast)));
      case 'let':
        return "\\\\" + (letStr(ast));
      case 'anno':
        return "\\@" + (getAnnoName(ast)) + " " + (getAnnoData(ast)) + " . " + (astString(getAnnoBody(ast)));
    }
  };

  letStr = function(ast) {
    var binding, body;

    body = getLetBody(ast);
    binding = "(" + (getLetName(ast)) + " = " + (astString(getLetValue(ast))) + ")";
    if (body instanceof Leisure_let) {
      return "" + binding + " " + (letStr(body));
    } else {
      return "" + binding + " . " + (astString(body));
    }
  };

  Leisure_BaseCons = (function(_super) {
    __extends(Leisure_BaseCons, _super);

    function Leisure_BaseCons() {
      _ref1 = Leisure_BaseCons.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Leisure_BaseCons.prototype.head = function() {
      throw new Error("Not Implemented");
    };

    Leisure_BaseCons.prototype.tail = function() {
      throw new Error("Not Implemented");
    };

    Leisure_BaseCons.prototype.isNil = function() {
      return false;
    };

    Leisure_BaseCons.prototype.find = function(func) {
      if (func(this.head())) {
        return this.head();
      } else {
        return this.tail().find(func);
      }
    };

    Leisure_BaseCons.prototype.removeAll = function(func) {
      var t;

      t = this.tail().removeAll(func);
      if (func(this.head())) {
        return t;
      } else if (t === this.tail()) {
        return this;
      } else {
        return cons(this.head(), t);
      }
    };

    Leisure_BaseCons.prototype.map = function(func) {
      return cons(func(this.head()), this.tail().map(func));
    };

    Leisure_BaseCons.prototype.foldl = function(func, arg) {
      return this.tail().foldl(func, func(arg, this.head()));
    };

    Leisure_BaseCons.prototype.foldl1 = function(func) {
      return this.tail().foldl(func, this.head());
    };

    Leisure_BaseCons.prototype.foldr = function(func, arg) {
      return func(this.head(), this.tail().foldr(func, arg));
    };

    Leisure_BaseCons.prototype.foldr1 = function(func) {
      if (this.tail() === Nil) {
        return this.head();
      } else {
        return func(this.head(), this.tail().foldr1(func));
      }
    };

    Leisure_BaseCons.prototype.toArray = function() {
      return this.foldl((function(i, el) {
        i.push(el);
        return i;
      }), []);
    };

    Leisure_BaseCons.prototype.join = function(str) {
      return this.toArray().join(str);
    };

    Leisure_BaseCons.prototype.reverse = function() {
      return this.rev(Nil);
    };

    Leisure_BaseCons.prototype.rev = function(result) {
      return this.tail().rev(cons(this.head(), result));
    };

    Leisure_BaseCons.prototype.elementString = function() {
      var _ref2;

      return "" + (((_ref2 = this.head()) != null ? _ref2.constructor : void 0) === this.constructor || this.head() instanceof Leisure_nil ? '[' + this.head().elementString() + ']' : this.head()) + (this.tail() instanceof Leisure_nil ? '' : this.tail() instanceof Leisure_BaseCons ? " " + (this.tail().elementString()) : " | " + (this.tail()));
    };

    Leisure_BaseCons.prototype.equals = function(other) {
      return this === other || (other instanceof Leisure_BaseCons && consEq(this.head(), other.head()) && consEq(this.tail(), other.tail()));
    };

    Leisure_BaseCons.prototype.each = function(block) {
      block(this.head());
      return this.tail().each(block);
    };

    Leisure_BaseCons.prototype.length = function() {
      return this.foldl((function(i, el) {
        return i + 1;
      }), 0);
    };

    Leisure_BaseCons.prototype.last = function() {
      var t;

      t = this.tail();
      if (t === Nil) {
        return this.head();
      } else {
        return t.last();
      }
    };

    Leisure_BaseCons.prototype.append = function(l) {
      return cons(this.head(), this.tail().append(l));
    };

    Leisure_BaseCons.prototype.toString = function() {
      return "" + (this.stringName()) + "[" + (this.elementString()) + "]";
    };

    Leisure_BaseCons.prototype.stringName = function() {
      return "BaseCons";
    };

    return Leisure_BaseCons;

  })(LeisureObject);

  consEq = function(a, b) {
    return a === b || (a instanceof Leisure_BaseCons && a.equals(b));
  };

  Leisure_cons = (function(_super) {
    __extends(Leisure_cons, _super);

    function Leisure_cons() {
      _ref2 = Leisure_cons.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Leisure_cons.prototype.head = function() {
      return this(function() {
        return function(a) {
          return function(b) {
            return rz(a);
          };
        };
      });
    };

    Leisure_cons.prototype.tail = function() {
      return this(function() {
        return function(a) {
          return function(b) {
            return rz(b);
          };
        };
      });
    };

    Leisure_cons.prototype.stringName = function() {
      return "Cons";
    };

    return Leisure_cons;

  })(Leisure_BaseCons);

  global.Leisure_cons = Leisure_cons;

  Leisure_nil = (function(_super) {
    __extends(Leisure_nil, _super);

    function Leisure_nil() {
      _ref3 = Leisure_nil.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Leisure_nil.prototype.isNil = function() {
      return true;
    };

    Leisure_nil.prototype.find = function() {
      return this;
    };

    Leisure_nil.prototype.removeAll = function() {
      return this;
    };

    Leisure_nil.prototype.map = function(func) {
      return Nil;
    };

    Leisure_nil.prototype.foldl = function(func, arg) {
      return arg;
    };

    Leisure_nil.prototype.foldr = function(func, arg) {
      return arg;
    };

    Leisure_nil.prototype.reverse = function() {
      return this;
    };

    Leisure_nil.prototype.rev = function(result) {
      return result;
    };

    Leisure_nil.prototype.equals = function(other) {
      return other instanceof Leisure_nil;
    };

    Leisure_nil.prototype.each = function() {};

    Leisure_nil.prototype.toArray = function() {
      return [];
    };

    Leisure_nil.prototype.join = function() {
      return '';
    };

    Leisure_nil.prototype.append = function(l) {
      return l;
    };

    Leisure_nil.prototype.toString = function() {
      return "Cons[]";
    };

    Leisure_nil.prototype.elementString = function() {
      return '';
    };

    return Leisure_nil;

  })(LeisureObject);

  global.Leisure_nil = Leisure_nil;

  jsType = function(v) {
    var t;

    t = typeof v;
    if (t === 'object') {
      return v.constructor || t;
    } else {
      return t;
    }
  };

  mkProto = function(protoFunc, value) {
    value.__proto__ = protoFunc.prototype;
    return value;
  };

  throwError = function(msg) {
    throw (msg instanceof Error ? msg : new Error(String(msg)));
  };

  checkType = function(value, type) {
    if (!(value instanceof type)) {
      return throwError("Type error: expected type: " + type + ", but got: " + (jsType(value)));
    }
  };

  primCons = setDataType((function(a) {
    return function(b) {
      return mkProto(Leisure_cons, setType((function(f) {
        return rz(f)(a)(b);
      }), 'cons'));
    };
  }), 'cons');

  Nil = mkProto(Leisure_nil, setDataType(setType((function(a) {
    return function(b) {
      return rz(b);
    };
  }), 'nil'), 'nil'));

  cons = function(a, b) {
    return primCons(lz(a))(lz(b));
  };

  foldLeft = function(func, val, thing) {
    if (thing instanceof Leisure_cons) {
      return thing.foldl(func, val);
    } else {
      return primFoldLeft(func, val, thing, 0);
    }
  };

  primFoldLeft = function(func, val, array, index) {
    if (index < array.length) {
      return primFoldLeft(func, func(val, array[index]), array, index + 1);
    } else {
      return val;
    }
  };

  global.leisureFuncs = {};

  global.leisureFuncNames = Nil;

  leisureAddFunc = global.leisureAddFunc = function(nm) {
    return global.leisureFuncNames = cons(nm, global.leisureFuncNames);
  };

  root.evalFunc = evalFunc = eval;

  root.functionCount = 0;

  functionInfo = {};

  nameFunc = function(func, name) {
    var f;

    f = null;
    return function() {
      if (f === null) {
        f = rz(func);
        if (typeof f === 'function') {
          f.leisureName = name;
        }
        return f;
      } else {
        return f;
      }
    };
  };

  define = function(name, func, arity, src, method) {
    var nm;

    functionInfo[name] = {
      src: src,
      arity: arity,
      leisureName: name,
      alts: {},
      altList: []
    };
    nm = 'L_' + nameSub(name);
    if (!method && global.noredefs && (global[nm] != null)) {
      throwError("[DEF] Attempt to redefine definition: " + name);
    }
    functionInfo[name].mainDef = global[nm] = global.leisureFuncs[nm] = nameFunc(func, name);
    leisureAddFunc(name);
    root.functionCount++;
    return func;
  };

  L_lit = setDataType((function(_x) {
    return setType((function(_f) {
      return rz(_f)(_x);
    }), 'lit');
  }), 'lit');

  L_ref = setDataType((function(_x) {
    return setType((function(_f) {
      return rz(_f)(_x);
    }), 'ref');
  }), 'ref');

  L_lambda = setDataType((function(_v) {
    return function(_f) {
      return setType((function(_g) {
        return rz(_g)(_v)(_f);
      }), 'lambda');
    };
  }), 'lambda');

  L_apply = setDataType((function(_func) {
    return function(_arg) {
      return setType((function(_f) {
        return rz(_f)(_func)(_arg);
      }), 'apply');
    };
  }), 'apply');

  L_let = setDataType((function(_n) {
    return function(_v) {
      return function(_b) {
        return setType((function(_f) {
          return rz(_f)(_n)(_v)(_b);
        }), 'let');
      };
    };
  }), 'let');

  L_anno = setDataType((function(_name) {
    return function(_data) {
      return function(_body) {
        return setType((function(_f) {
          return rz(_f)(_name)(_data)(_body);
        }), 'anno');
      };
    };
  }), 'anno');

  getType = function(f) {
    var t, _ref4;

    t = typeof f;
    return (t === 'function' && (f != null ? f.type : void 0)) || ("*" + ((t === 'object' && ((_ref4 = f.constructor) != null ? _ref4.name : void 0)) || t));
  };

  define('getType', lz(function(value) {
    return getType(rz(value));
  }), 1);

  getDataType = function(f) {
    return (typeof f === 'function' && f.dataType) || '';
  };

  define('getDataType', lz(function(value) {
    return getDataType(rz(value));
  }), 1);

  save = {};

  save.lit = lit = function(l) {
    return L_lit(lz(l));
  };

  save.ref = ref = function(r) {
    return L_ref(lz(r));
  };

  save.lambda = lambda = function(v, body) {
    return L_lambda(lz(v))(lz(body));
  };

  save.apply = apply = function(f, a) {
    return L_apply(lz(f))(lz(a));
  };

  save.llet = llet = function(n, v, b) {
    return L_let(lz(n))(lz(v))(lz(b));
  };

  save.anno = anno = function(name, data, body) {
    return L_anno(lz(name))(lz(data))(lz(body));
  };

  save.cons = cons;

  getLitVal = function(lt) {
    return lt(lz(function(v) {
      return rz(v);
    }));
  };

  getRefName = function(rf) {
    return rf(lz(function(v) {
      return rz(v);
    }));
  };

  getLambdaVar = function(lam) {
    return lam(lz(function(v) {
      return function(b) {
        return rz(v);
      };
    }));
  };

  getLambdaBody = function(lam) {
    return lam(lz(function(v) {
      return function(b) {
        return rz(b);
      };
    }));
  };

  getApplyFunc = function(apl) {
    return apl(lz(function(a) {
      return function(b) {
        return rz(a);
      };
    }));
  };

  getApplyArg = function(apl) {
    return apl(lz(function(a) {
      return function(b) {
        return rz(b);
      };
    }));
  };

  getLetName = function(lt) {
    return lt(lz(function(n) {
      return function(v) {
        return function(b) {
          return rz(n);
        };
      };
    }));
  };

  getLetValue = function(lt) {
    return lt(lz(function(n) {
      return function(v) {
        return function(b) {
          return rz(v);
        };
      };
    }));
  };

  getLetBody = function(lt) {
    return lt(lz(function(n) {
      return function(v) {
        return function(b) {
          return rz(b);
        };
      };
    }));
  };

  getAnnoName = function(anno) {
    return anno(lz(function(name) {
      return function(data) {
        return function(body) {
          return rz(name);
        };
      };
    }));
  };

  getAnnoData = function(anno) {
    return anno(lz(function(name) {
      return function(data) {
        return function(body) {
          return rz(data);
        };
      };
    }));
  };

  getAnnoBody = function(anno) {
    return anno(lz(function(name) {
      return function(data) {
        return function(body) {
          return rz(body);
        };
      };
    }));
  };

  json2AstEncodings = {
    lit: function(json) {
      return L_lit(lz(json.value));
    },
    ref: function(json) {
      return L_ref(lz(json.varName));
    },
    lambda: function(json) {
      return L_lambda(lz(json.varName))(lz(json2Ast(json.body)));
    },
    apply: function(json) {
      return L_apply(lz(json2Ast(json.func)))(lz(json2Ast(json.arg)));
    },
    "let": function(json) {
      return L_let(lz(json.varName))(lz(json2Ast(json.value)))(lz(json2Ast(json.body)));
    },
    anno: function(json) {
      return L_anno(lz(json.name))(lz(json2Ast(json.data)))(lz(json2Ast(json.body)));
    },
    cons: function(json) {
      return save.cons(json2Ast(json.head), json2Ast(json.tail));
    },
    nil: function(json) {
      return Nil;
    }
  };

  lit = save.lit;

  ref = save.ref;

  lambda = save.lambda;

  apply = save.apply;

  llet = save.llet;

  anno = save.anno;

  cons = save.cons;

  json2Ast = function(json) {
    if (typeof json === 'object') {
      return json2AstEncodings[json._type](json);
    } else {
      return json;
    }
  };

  ast2JsonEncodings = {
    Leisure_lit: function(ast) {
      return {
        _type: 'lit',
        value: getLitVal(ast)
      };
    },
    Leisure_ref: function(ast) {
      return {
        _type: 'ref',
        varName: getRefName(ast)
      };
    },
    Leisure_lambda: function(ast) {
      return {
        _type: 'lambda',
        varName: getLambdaVar(ast),
        body: ast2Json(getLambdaBody(ast))
      };
    },
    Leisure_apply: function(ast) {
      return {
        _type: 'apply',
        func: ast2Json(getApplyFunc(ast)),
        arg: ast2Json(getApplyArg(ast))
      };
    },
    Leisure_let: function(ast) {
      return {
        _type: 'let',
        varName: getLetName(ast),
        value: ast2Json(getLetValue(ast)),
        body: ast2Json(getLetBody(ast))
      };
    },
    Leisure_anno: function(ast) {
      return {
        _type: 'anno',
        name: getAnnoName(ast),
        data: ast2Json(getAnnoData(ast)),
        body: ast2Json(getAnnoBody(ast))
      };
    },
    Leisure_cons: function(ast) {
      return {
        _type: 'cons',
        head: ast2Json(ast.head()),
        tail: ast2Json(ast.tail())
      };
    },
    Leisure_nil: function(ast) {
      return {
        _type: 'nil'
      };
    }
  };

  ast2Json = function(ast) {
    var _ref4;

    if (ast2JsonEncodings[(_ref4 = ast.constructor) != null ? _ref4.name : void 0]) {
      return ast2JsonEncodings[ast.constructor.name](ast);
    } else {
      return ast;
    }
  };

  define('json2Ast', lz(function(json) {
    return json2Ast(JSON.parse(rz(json)));
  }));

  define('ast2Json', lz(function(ast) {
    return JSON.stringify(ast2Json(rz(ast)));
  }));

  consFrom = function(array, i) {
    i = i || 0;
    if (i < array.length) {
      return cons(array[i], consFrom(array, i + 1));
    } else {
      return Nil;
    }
  };

  head = function(l) {
    return l.head();
  };

  tail = function(l) {
    return l.tail();
  };

  root.head = head;

  root.tail = tail;

  root.consFrom = consFrom;

  root.nameSub = nameSub;

  root.setDataType = setDataType;

  root.setType = setType;

  root.mkProto = mkProto;

  root.Nil = Nil;

  root.cons = cons;

  root.primCons = primCons;

  root.define = define;

  root.getType = getType;

  root.getDataType = getDataType;

  root.lit = lit;

  root.ref = ref;

  root.lambda = lambda;

  root.apply = apply;

  root.anno = anno;

  root.llet = llet;

  root.getRefName = getRefName;

  root.getLitVal = getLitVal;

  root.getLambdaBody = getLambdaBody;

  root.getLambdaVar = getLambdaVar;

  root.getApplyFunc = getApplyFunc;

  root.getApplyArg = getApplyArg;

  root.getLetName = getLetName;

  root.getLetValue = getLetValue;

  root.getLetBody = getLetBody;

  root.getAnnoName = getAnnoName;

  root.getAnnoData = getAnnoData;

  root.getAnnoBody = getAnnoBody;

  root.throwError = throwError;

  root.foldLeft = foldLeft;

  root.LeisureObject = LeisureObject;

  root.evalFunc = evalFunc;

  root.json2Ast = json2Ast;

  root.ast2Json = ast2Json;

  root.Leisure_lit = Leisure_lit;

  root.Leisure_ref = Leisure_ref;

  root.Leisure_lambda = Leisure_lambda;

  root.Leisure_apply = Leisure_apply;

  root.Leisure_let = Leisure_let;

  root.Leisure_anno = Leisure_anno;

  root.ensureLeisureClass = ensureLeisureClass;

  root.makeSuper = makeSuper;

  root.supertypes = supertypes;

  root.functionInfo = functionInfo;

}).call(this);

/*
*/

})(self)
},{"./base":2,"./lodash.min":6}],2:[function(require,module,exports){
(function(global){// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var SimpyCons, defaultEnv, readDir, readFile, root, simpyCons, statFile, writeFile;

  root = module.exports;

  defaultEnv = {
    presentValue: function(x) {
      return x;
    },
    values: {},
    errorHandlers: []
  };

  global.resolve = function(value) {
    if (typeof value === 'function') {
      return value.memo || (value.memo = value());
    } else {
      return value;
    }
  };

  global.lazy = function(l) {
    if (typeof l === 'function') {
      return l.memo = l;
    } else {
      return l;
    }
  };

  readFile = function(fileName, cont) {
    return defaultEnv.readFile(fileName, cont);
  };

  writeFile = function(fileName, data, cont) {
    return defaultEnv.writeFile(fileName, data, cont);
  };

  readDir = function(fileName, cont) {
    return defaultEnv.readDir(fileName, cont);
  };

  statFile = function(fileName, cont) {
    return defaultEnv.statFile(fileName, cont);
  };

  SimpyCons = (function() {
    function SimpyCons(head, tail) {
      this.head = head;
      this.tail = tail;
    }

    SimpyCons.prototype.toArray = function() {
      var array, h;

      h = this;
      array = [];
      while (h !== null) {
        array.push(h.head);
        h = h.tail;
      }
      return array;
    };

    return SimpyCons;

  })();

  simpyCons = function(a, b) {
    return new SimpyCons(a, b);
  };

  root.defaultEnv = defaultEnv;

  root.readFile = readFile;

  root.readDir = readDir;

  root.writeFile = writeFile;

  root.statFile = statFile;

  root.SimpyCons = SimpyCons;

  root.simpyCons = simpyCons;

  root.resolve = global.resolve;

  root.lazy = global.lazy;

}).call(this);

/*
*/

})(self)
},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var Leisure, exports, k, nb, v, _ref;

  window.marked = require('./marked');

  Leisure = exports = module.exports = require('./base');

  require('./ast');

  require('./gen');

  require('./runtime');

  require('./generatedPrelude');

  require('./std');

  require('./md');

  window.Notebook = nb = require('./notebook');

  _ref = window.Leisure;
  for (k in _ref) {
    v = _ref[k];
    Leisure[k] = v;
  }

  window.Leisure = Leisure;

}).call(this);

/*
*/

},{"./ast":1,"./base":2,"./gen":4,"./generatedPrelude":5,"./marked":7,"./md":8,"./notebook":9,"./runtime":10,"./std":11}],4:[function(require,module,exports){
(function(global){// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var Leisure_anno, Leisure_apply, Leisure_lambda, Leisure_let, Leisure_lit, Leisure_ref, Nil, addLambdaProperties, addUniq, arrayify, assocListProps, cons, consFrom, curry, define, dumpAnno, gen, genApply, genApplyArg, genLambda, genLetAssign, genLets, genUniq, getAnnoBody, getAnnoData, getAnnoName, getApplyArg, getApplyFunc, getAssocListProps, getLambdaBody, getLambdaProperties, getLambdaVar, getLastLetBody, getLetBody, getLetName, getLetValue, getLitVal, getRefName, lacons, lazy, lcons, lconsFrom, left, letList, lz, makeSyncMonad, masterLockGen, memoize, nameSub, newGen, resolve, right, root, runMonad, rz, setDataType, setType, simpyCons, specialAnnotations, uniqName, varNameSub, _, _false, _ref, _ref1, _ref2, _true,
    __slice = [].slice;

  _ref = require('./base'), simpyCons = _ref.simpyCons, resolve = _ref.resolve, lazy = _ref.lazy;

  rz = resolve;

  lz = lazy;

  _ref1 = root = module.exports = require('./ast'), nameSub = _ref1.nameSub, getLitVal = _ref1.getLitVal, getRefName = _ref1.getRefName, getLambdaVar = _ref1.getLambdaVar, getLambdaBody = _ref1.getLambdaBody, getApplyFunc = _ref1.getApplyFunc, getApplyArg = _ref1.getApplyArg, getAnnoName = _ref1.getAnnoName, getAnnoData = _ref1.getAnnoData, getAnnoBody = _ref1.getAnnoBody, getLetName = _ref1.getLetName, getLetValue = _ref1.getLetValue, getLetBody = _ref1.getLetBody, Leisure_lit = _ref1.Leisure_lit, Leisure_ref = _ref1.Leisure_ref, Leisure_lambda = _ref1.Leisure_lambda, Leisure_apply = _ref1.Leisure_apply, Leisure_let = _ref1.Leisure_let, Leisure_anno = _ref1.Leisure_anno, setType = _ref1.setType, setDataType = _ref1.setDataType, cons = _ref1.cons, Nil = _ref1.Nil, consFrom = _ref1.consFrom, define = _ref1.define;

  _ref2 = require('./runtime'), makeSyncMonad = _ref2.makeSyncMonad, runMonad = _ref2.runMonad, _true = _ref2._true, _false = _ref2._false, left = _ref2.left, right = _ref2.right;

  _ = require('./lodash.min');

  varNameSub = function(n) {
    return "L_" + (nameSub(n));
  };

  newGen = false;

  root.lockGen = true;

  masterLockGen = true;

  gen = function(ast) {
    return genUniq(ast, Nil, [Nil, 0]);
  };

  genUniq = function(ast, names, uniq) {
    var arity, data, funcName, genned, name, src, _ref3;

    switch (ast.constructor) {
      case Leisure_lit:
        return JSON.stringify(getLitVal(ast));
      case Leisure_ref:
        return "resolve(" + (uniqName(getRefName(ast), uniq)) + ")";
      case Leisure_lambda:
        return genLambda(ast, names, uniq, 0);
      case Leisure_apply:
        if (!newGen) {
          return "" + (genUniq(getApplyFunc(ast), names, uniq)) + "(" + (genApplyArg(getApplyArg(ast), names, uniq)) + ")";
        } else {
          return genApply(ast, names, uniq);
        }
        break;
      case Leisure_let:
        return "(function(){\n" + (genLets(ast, names, uniq)) + "})()";
      case Leisure_anno:
        name = getAnnoName(ast);
        data = getAnnoData(ast);
        genned = genUniq(getAnnoBody(ast), names, uniq);
        switch (name) {
          case 'type':
            return "setType(" + genned + ", '" + data + "')";
          case 'dataType':
            return "setDataType(" + genned + ", '" + data + "')";
          case 'define':
            _ref3 = data.toArray(), funcName = _ref3[0], arity = _ref3[1], src = _ref3[2];
            return "define('" + funcName + "', (function(){return " + genned + "}), " + arity + ", " + (JSON.stringify(src)) + ")";
          default:
            return genned;
        }
        break;
      default:
        return "DUR? " + ast + ", " + ast.constructor + " " + Leisure_lambda;
    }
  };

  define('newGen', lz(makeSyncMonad(function(env, cont) {
    newGen = !masterLockGen && !root.lockGen;
    return cont(_true);
  })));

  genLambda = function(ast, names, uniq, count) {
    var n, name, u;

    name = getLambdaVar(ast);
    u = addUniq(name, names, uniq);
    n = cons(name, names);
    return addLambdaProperties(ast, "function(" + (uniqName(name, u)) + "){return " + (genUniq(getLambdaBody(ast), n, u)) + "}");
  };

  specialAnnotations = ['type', 'dataType', 'define'];

  arrayify = function(cons) {
    if (cons instanceof Leisure_cons) {
      return cons.map(function(el) {
        return arrayify(el);
      }).toArray();
    } else {
      return cons;
    }
  };

  getLambdaProperties = function(body, props) {
    var value;

    if (body instanceof Leisure_anno) {
      if (!_.contains(specialAnnotations, getAnnoName(body))) {
        if (!props) {
          props = {};
        }
        value = getAnnoData(body);
        props[getAnnoName(body)] = arrayify(value);
      }
      getLambdaProperties(getAnnoBody(body), props);
    }
    return props;
  };

  addLambdaProperties = function(ast, def) {
    var props;

    props = getLambdaProperties(getLambdaBody(ast));
    if (props) {
      return "setLambdaProperties(" + def + ", " + (JSON.stringify(props)) + ")";
    } else {
      return def;
    }
  };

  lcons = function(a, b) {
    return rz(L_cons)(lz(a))(lz(b));
  };

  lconsFrom = function(array) {
    var el, p, _i, _len, _ref3;

    if (array instanceof Array) {
      p = rz(L_nil);
      _ref3 = array.reverse();
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        el = _ref3[_i];
        p = lcons(lconsFrom(el), p);
      }
      return p;
    } else {
      return array;
    }
  };

  assocListProps = null;

  getAssocListProps = function() {
    if (!assocListProps) {
      assocListProps = lcons(lcons('assoc', 'true'), rz(L_nil));
      assocListProps.properties = assocListProps;
    }
    return assocListProps;
  };

  lacons = function(key, value, list) {
    var alist;

    alist = lcons(lcons(key, value), list);
    alist.properties = getAssocListProps();
    return alist;
  };

  global.setLambdaProperties = function(def, props) {
    var k, p, v;

    p = rz(L_nil);
    for (k in props) {
      v = props[k];
      p = lacons(k, lconsFrom(v), p);
    }
    def.properties = p;
    return def;
  };

  memoize = function(func) {
    return "function(){return " + func + "}";
  };

  dumpAnno = function(ast) {
    if (ast instanceof Leisure_anno) {
      return dumpAnno(getAnnoBody(ast));
    } else {
      return ast;
    }
  };

  genApply = function(ast, names, uniq) {
    var args;

    args = [];
    while (dumpAnno(ast) instanceof Leisure_apply) {
      args.push("(" + (genApplyArg(getApplyArg(dumpAnno(ast)), names, uniq)) + ")");
      ast = getApplyFunc(dumpAnno(ast));
    }
    args.reverse();
    return "" + (genUniq(ast, names, uniq)) + ".leisureCall(" + (args.join(', ')) + ")";
  };

  genApplyArg = function(arg, names, uniq) {
    if (dumpAnno(arg) instanceof Leisure_apply) {
      return memoize(genUniq(arg, names, uniq));
    } else if (arg instanceof Leisure_ref) {
      return uniqName(getRefName(arg), uniq);
    } else if (arg instanceof Leisure_lit) {
      return JSON.stringify(getLitVal(arg));
    } else if (arg instanceof Leisure_let) {
      return "function(){" + (genLets(arg, names, uniq)) + "}";
    } else if (dumpAnno(arg) instanceof Leisure_lambda) {
      return "lazy(" + (genUniq(arg, names, uniq)) + ")";
    } else {
      return "function(){return " + (genUniq(arg, names, uniq)) + "}";
    }
  };

  genLetAssign = function(arg, names, uniq) {
    if (dumpAnno(arg) instanceof Leisure_let) {
      return "function(){" + (genLets(arg, names, uniq)) + "}";
    } else {
      return "function(){return " + (genUniq(arg, names, uniq)) + "}";
    }
  };

  genLets = function(ast, names, uniq) {
    var assigns, decs, _ref3;

    _ref3 = _.foldl(letList(ast, []), (function(result, l) {
      var code, letName, letNames, n, newU, u;

      n = result[0], u = result[1], letNames = result[2], code = result[3];
      newU = addUniq(getLetName(l), n, u);
      letName = uniqName(getLetName(l), newU);
      return [cons(getLetName(l), n), newU, cons(letName, letNames), cons('\n' + letName + ' = ' + genLetAssign(getLetValue(l), n, u), code)];
    }), [names, uniq, Nil, Nil]), names = _ref3[0], uniq = _ref3[1], decs = _ref3[2], assigns = _ref3[3];
    return "\nvar " + (decs.join(', ')) + ";\n" + (assigns.reverse().join(';\n')) + ";\nreturn " + (genUniq(getLastLetBody(ast), names, uniq));
  };

  addUniq = function(name, names, uniq) {
    var num, overrides;

    if ((names.find(function(el) {
      return el === name;
    })) !== Nil) {
      overrides = uniq[0], num = uniq[1];
      return [cons(cons(name, "" + name + "_" + num), overrides), num + 1];
    } else {
      return uniq;
    }
  };

  uniqName = function(name, uniq) {
    var kv;

    uniq = uniq[0];
    kv = uniq.find((function(el) {
      return el.head() === name;
    }), uniq);
    return varNameSub((kv !== Nil ? kv.tail() : name));
  };

  letList = function(ast, buf) {
    if (ast instanceof Leisure_let) {
      buf.push(ast);
      return letList(getLetBody(ast), buf);
    } else {
      return buf;
    }
  };

  getLastLetBody = function(ast) {
    if (ast instanceof Leisure_let) {
      return getLastLetBody(getLetBody(ast));
    } else {
      return ast;
    }
  };

  define('runAst', lz(function(ast) {
    var err;

    try {
      return eval("(" + (gen(rz(ast))) + ")");
    } catch (_error) {
      err = _error;
      return rz(L_parseErr)(lz("\n\nParse error: " + err.toString() + "\nAST: "))(ast);
    }
  }));

  curry = function(func, args, pos) {
    if (pos === func.length) {
      return func.apply(null, args.toArray(func.length - 1, []));
    } else {
      return function(arg) {
        return curry(func, simpyCons(arg, args), pos + 1);
      };
    }
  };

  Function.prototype.leisureCall = function() {
    var a, args, f, next, pos, sub;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (args.length === this.length) {
      return this.apply(null, args);
    } else {
      pos = 0;
      f = this;
      while (pos < args.length) {
        next = pos + f.length;
        if (next <= args.length) {
          f = f.apply(null, args.slice(pos, next));
        } else {
          console.log("CURRY");
          a = args.slice(pos);
          sub = function() {
            a.push.apply(a, arguments);
            if (a.length >= f.length) {
              return f.leisureCall.apply(f, a);
            } else {
              return sub;
            }
          };
          return sub;
        }
        pos = next;
      }
      return f;
    }
  };

  root.gen = gen;

  root.curry = curry;

}).call(this);

/*
*/

})(self)
},{"./ast":1,"./base":2,"./lodash.min":6,"./runtime":10}],5:[function(require,module,exports){
L_runMonads([
  function(){return resolve(L_define)("true")(0)("true = \\a b . a")(lazy(setDataType(setType(function(L_a){return function(L_b){return resolve(L_a)}}, 'true'), 'true')))},
  function(){return resolve(L_define)("false")(0)("false = \\a b . b")(lazy(setDataType(setType(function(L_a){return function(L_b){return resolve(L_b)}}, 'false'), 'false')))},
  function(){return resolve(L_define)("not")(1)("not b = b false true")(lazy(function(L_b){return resolve(L_b)(L_false)(L_true)}))},
  function(){return resolve(L_define)("and")(2)("and a b = a b false")(lazy(function(L_a){return function(L_b){return resolve(L_a)(L_b)(L_false)}}))},
  function(){return resolve(L_define)("or")(2)("or a b = a true b")(lazy(function(L_a){return function(L_b){return resolve(L_a)(L_true)(L_b)}}))},
  function(){return resolve(L_define)("some")(1)("some x = \\someCase noneCase . someCase x")(lazy(setDataType(function(L_x){return setType(function(L_someCase){return function(L_noneCase){return resolve(L_someCase)(L_x)}}, 'some')}, 'some')))},
  function(){return resolve(L_define)("some2")(2)("some2 a b = \\someCase noneCase . someCase a b")(lazy(setDataType(function(L_a){return function(L_b){return setType(function(L_someCase){return function(L_noneCase){return resolve(L_someCase)(L_a)(L_b)}}, 'some2')}}, 'some2')))},
  function(){return resolve(L_define)("none")(0)("none = \\someCase noneCase . noneCase")(lazy(setDataType(setType(function(L_someCase){return function(L_noneCase){return resolve(L_noneCase)}}, 'none'), 'none')))},
  function(){return resolve(L_define)("isNone")(1)("isNone obj = hasType obj none")(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_none)}))},
  function(){return resolve(L_define)("isSome")(1)("isSome obj = hasType obj some")(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_some)}))},
  function(){return resolve(L_define)("isSome2")(1)("isSome2 obj = hasType obj some2")(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_some2)}))},
  function(){return resolve(L_define)("neq")(2)("neq a b = not (eq a b)")(lazy(function(L_a){return function(L_b){return resolve(L_not)(function(){return resolve(L_eq)(L_a)(L_b)})}}))},
  function(){return resolve(L_define)("left")(1)("left x = \\lCase rCase . lCase x")(lazy(setDataType(function(L_x){return setType(function(L_lCase){return function(L_rCase){return resolve(L_lCase)(L_x)}}, 'left')}, 'left')))},
  function(){return resolve(L_define)("right")(1)("right x = \\lCase rCase . rCase x")(lazy(setDataType(function(L_x){return setType(function(L_lCase){return function(L_rCase){return resolve(L_rCase)(L_x)}}, 'right')}, 'right')))},
  function(){return resolve(L_define)("strAsc")(1)("strAsc string = _strAsc (assertType 'strAsc string' '*string' string)")(lazy(function(L_string){return resolve(L__strAsc)(function(){return resolve(L_assertType)("strAsc string")("*string")(L_string)})}))},
  function(){return resolve(L_define)("strChr")(1)("strChr ascii = _strChr (assertType 'strChr string' '*number' ascii)")(lazy(function(L_ascii){return resolve(L__strChr)(function(){return resolve(L_assertType)("strChr string")("*number")(L_ascii)})}))},
  function(){return resolve(L_define)("strAt")(2)("strAt string index = _strAt\n  assertType 'strAt string' '*string' string\n  assertType 'strAt index' '*number' index")(lazy(function(L_string){return function(L_index){return resolve(L__strAt)(function(){return resolve(L_assertType)("strAt string")("*string")(L_string)})(function(){return resolve(L_assertType)("strAt index")("*number")(L_index)})}}))},
  function(){return resolve(L_define)("strStartsWith")(2)("strStartsWith string prefix = _strStartsWith\n  assertType 'strStartsWith string' '*string' string\n  assertType 'strStartsWith prefix' '*string' prefix")(lazy(function(L_string){return function(L_prefix){return resolve(L__strStartsWith)(function(){return resolve(L_assertType)("strStartsWith string")("*string")(L_string)})(function(){return resolve(L_assertType)("strStartsWith prefix")("*string")(L_prefix)})}}))},
  function(){return resolve(L_define)("strLen")(1)("strLen string = _strLen (assertType 'strLen string' '*string' string)")(lazy(function(L_string){return resolve(L__strLen)(function(){return resolve(L_assertType)("strLen string")("*string")(L_string)})}))},
  function(){return resolve(L_define)("strToLowerCase")(1)("strToLowerCase string = _strToLowerCase (assertType 'strToLowerCase string' '*string' string)")(lazy(function(L_string){return resolve(L__strToLowerCase)(function(){return resolve(L_assertType)("strToLowerCase string")("*string")(L_string)})}))},
  function(){return resolve(L_define)("strToUpperCase")(1)("strToUpperCase string = _strToUpperCase (assertType 'strToUpperCase string' '*string' string)")(lazy(function(L_string){return resolve(L__strToUpperCase)(function(){return resolve(L_assertType)("strToUpperCase string")("*string")(L_string)})}))},
  function(){return resolve(L_define)("strReplace")(3)("strReplace string pat repl = _strReplace\n  assertType 'strReplace string' '*string' string\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strStartsWith pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat\n  assertType 'strReplace repl' '*string' repl")(lazy(function(L_string){return function(L_pat){return function(L_repl){return resolve(L__strReplace)(function(){return resolve(L_assertType)("strReplace string")("*string")(L_string)})(function(){return resolve(L_assert)(function(){return resolve(L_or)(function(){return resolve(L_hasType)(L_pat)("*string")})(function(){return resolve(L_hasType)(L_pat)("*RegExp")})})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("strStartsWith pat should be type string or RegExp but it is type ")(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_pat)})(function(){return resolve(L_cons)(": ")(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_pat)})(L_nil)})})})})})(L_pat)})(function(){return resolve(L_assertType)("strReplace repl")("*string")(L_repl)})}}}))},
  function(){return resolve(L_define)("strSubstring")(3)("strSubstring str start end = _strSubstring\n  assertType 'strSubstring str' '*string' str\n  assertType 'strSubstring start' '*number' start\n  assertType 'strSubstring end' '*number' end")(lazy(function(L_str){return function(L_start){return function(L_end){return resolve(L__strSubstring)(function(){return resolve(L_assertType)("strSubstring str")("*string")(L_str)})(function(){return resolve(L_assertType)("strSubstring start")("*number")(L_start)})(function(){return resolve(L_assertType)("strSubstring end")("*number")(L_end)})}}}))},
  function(){return resolve(L_define)("strSplit")(2)("strSplit str pat = _strSplit\n  assertType 'strSplit str' '*string' str\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strSplit pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat")(lazy(function(L_str){return function(L_pat){return resolve(L__strSplit)(function(){return resolve(L_assertType)("strSplit str")("*string")(L_str)})(function(){return resolve(L_assert)(function(){return resolve(L_or)(function(){return resolve(L_hasType)(L_pat)("*string")})(function(){return resolve(L_hasType)(L_pat)("*RegExp")})})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("strSplit pat should be type string or RegExp but it is type ")(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_pat)})(function(){return resolve(L_cons)(": ")(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_pat)})(L_nil)})})})})})(L_pat)})}}))},
  function(){return resolve(L_define)("strCat")(1)("strCat list = _strCat\n  assert (isList list) (strCat (cons 'strCat list should be type cons or nil but it is type ' (cons (getType list) (cons ': ' (cons list))))) list")(lazy(function(L_list){return resolve(L__strCat)(function(){return resolve(L_assert)(function(){return resolve(L_isList)(L_list)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("strCat list should be type cons or nil but it is type ")(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_list)})(function(){return resolve(L_cons)(": ")(function(){return resolve(L_cons)(L_list)})})})})})(L_list)})}))},
  function(){return resolve(L_define)("strAdd")(2)("strAdd str1 str2 = _strAdd (assertType 'strAdd str1' '*string' str1) (assertType 'strAdd str2' '*string' str2)")(lazy(function(L_str1){return function(L_str2){return resolve(L__strAdd)(function(){return resolve(L_assertType)("strAdd str1")("*string")(L_str1)})(function(){return resolve(L_assertType)("strAdd str2")("*string")(L_str2)})}}))},
  function(){return resolve(L_define)("strMatch")(2)("strMatch str pat = _strMatch\n  assertType 'strMatch str' '*string' str\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strMatch pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat")(lazy(function(L_str){return function(L_pat){return resolve(L__strMatch)(function(){return resolve(L_assertType)("strMatch str")("*string")(L_str)})(function(){return resolve(L_assert)(function(){return resolve(L_or)(function(){return resolve(L_hasType)(L_pat)("*string")})(function(){return resolve(L_hasType)(L_pat)("*RegExp")})})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("strMatch pat should be type string or RegExp but it is type ")(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_pat)})(function(){return resolve(L_cons)(": ")(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_pat)})(L_nil)})})})})})(L_pat)})}}))},
  function(){return resolve(L_define)("strToList")(1)("strToList str = _strToList (assertType 'strToList str' '*string' str)")(lazy(function(L_str){return resolve(L__strToList)(function(){return resolve(L_assertType)("strToList str")("*string")(L_str)})}))},
  function(){return resolve(L_define)("strFromList")(1)("strFromList list = _strFromList\n  assert (isList list) (strCat (cons 'strFromList list should be type cons or nil but it is type ' (cons (getType list) (cons ': ' (cons list))))) list")(lazy(function(L_list){return resolve(L__strFromList)(function(){return resolve(L_assert)(function(){return resolve(L_isList)(L_list)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("strFromList list should be type cons or nil but it is type ")(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_list)})(function(){return resolve(L_cons)(": ")(function(){return resolve(L_cons)(L_list)})})})})})(L_list)})}))},
  function(){return resolve(L_define)("regexp")(1)("regexp str = _regexp (assertType 'regexp str' '*string' str)")(lazy(function(L_str){return resolve(L__regexp)(function(){return resolve(L_assertType)("regexp str")("*string")(L_str)})}))},
  function(){return resolve(L_define)("regexpFlags")(2)("regexpFlags str flags = _regexpFlags\n  assertType 'regexp str' '*string' str\n  assertType 'regexp flags' '*string' flags")(lazy(function(L_str){return function(L_flags){return resolve(L__regexpFlags)(function(){return resolve(L_assertType)("regexp str")("*string")(L_str)})(function(){return resolve(L_assertType)("regexp flags")("*string")(L_flags)})}}))},
  function(){return resolve(L_define)("jsonParse")(3)("jsonParse str failure success = _jsonParse\n  assertType 'jsonParse str' '*string' str\n  failure\n  success")(lazy(function(L_str){return function(L_failure){return function(L_success){return resolve(L__jsonParse)(function(){return resolve(L_assertType)("jsonParse str")("*string")(L_str)})(L_failure)(L_success)}}}))},
  function(){return resolve(L_define)("show")(1)("show x = _show x")(lazy(function(L_x){return resolve(L__show)(L_x)}))},
  function(){return resolve(L_define)("id")(1)("id x = x")(lazy(function(L_x){return resolve(L_x)}))},
  function(){return resolve(L_define)("compose")(2)("compose f g = \\x . f (g x)")(lazy(setDataType(function(L_f){return function(L_g){return setType(function(L_x){return resolve(L_f)(function(){return resolve(L_g)(L_x)})}, 'compose')}}, 'compose')))},
  function(){return resolve(L_define)("flip")(1)("flip func = \\x y . func y x")(lazy(setDataType(function(L_func){return setType(function(L_x){return function(L_y){return resolve(L_func)(L_y)(L_x)}}, 'flip')}, 'flip')))},
  function(){return resolve(L_define)("cons")(2)("cons a b = \\f . f a b")(lazy(setDataType(function(L_a){return function(L_b){return setType(function(L_f){return resolve(L_f)(L_a)(L_b)}, 'cons')}}, 'cons')))},
  function(){return resolve(L_define)("isCons")(1)("isCons c = hasType c cons")(lazy(function(L_c){return resolve(L_hasType)(L_c)(L_cons)}))},
  function(){return resolve(L_define)("isList")(1)("isList l = or (hasType l cons) (hasType l nil)")(lazy(function(L_l){return resolve(L_or)(function(){return resolve(L_hasType)(L_l)(L_cons)})(function(){return resolve(L_hasType)(L_l)(L_nil)})}))},
  function(){return resolve(L_define)("assertType")(3)("assertType msg type value = assert (hasType value type) (strCat (cons msg (cons ' should be type ' (cons (getDataType type) (cons ', but its type is ' (cons (getType value) (cons ': ' (cons (show value) nil)))))))) value")(lazy(function(L_msg){return function(L_type){return function(L_value){return resolve(L_assert)(function(){return resolve(L_hasType)(L_value)(L_type)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_msg)(function(){return resolve(L_cons)(" should be type ")(function(){return resolve(L_cons)(function(){return resolve(L_getDataType)(L_type)})(function(){return resolve(L_cons)(", but its type is ")(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_value)})(function(){return resolve(L_cons)(": ")(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_value)})(L_nil)})})})})})})})})(L_value)}}}))},
  function(){return resolve(L_define)("nil")(0)("nil = \\a b . b")(lazy(setDataType(setType(function(L_a){return function(L_b){return resolve(L_b)}}, 'nil'), 'nil')))},
  function(){return resolve(L_define)("isNil")(1)("isNil n = hasType n nil")(lazy(function(L_n){return resolve(L_hasType)(L_n)(L_nil)}))},
  function(){return resolve(L_define)("head")(1)("head l = l \\h t . h")(lazy(function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return resolve(L_h)}}))}))},
  function(){return resolve(L_define)("tail")(1)("tail l = l \\h t . t")(lazy(function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return resolve(L_t)}}))}))},
  function(){return resolve(L_define)("last")(1)("last l = isNil (tail l)\n  head l\n  last (tail l)")(lazy(function(L_l){return resolve(L_isNil)(function(){return resolve(L_tail)(L_l)})(function(){return resolve(L_head)(L_l)})(function(){return resolve(L_last)(function(){return resolve(L_tail)(L_l)})})}))},
  function(){return resolve(L_define)("removeLast")(1)("removeLast l = isNil (tail l)\n  nil\n  cons (head l) (removeLast (tail l))")(lazy(function(L_l){return resolve(L_isNil)(function(){return resolve(L_tail)(L_l)})(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_l)})(function(){return resolve(L_removeLast)(function(){return resolve(L_tail)(L_l)})})})}))},
  function(){return resolve(L_define)("length")(1)("length list = isCons list\n  + 1 (length (tail list))\n  0")(lazy(function(L_list){return resolve(L_isCons)(L_list)(function(){return resolve(L_$o)(1)(function(){return resolve(L_length)(function(){return resolve(L_tail)(L_list)})})})(0)}))},
  function(){return resolve(L_define)("append")(2)("append a b = isNil a\n  b\n  cons (head a) (append (tail a) b)")(lazy(function(L_a){return function(L_b){return resolve(L_isNil)(L_a)(L_b)(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_a)})(function(){return resolve(L_append)(function(){return resolve(L_tail)(L_a)})(L_b)})})}}))},
  function(){return resolve(L_define)("flatten")(1)("flatten list = isCons list\n  subflatten list nil\n  list")(lazy(function(L_list){return resolve(L_isCons)(L_list)(function(){return resolve(L_subflatten)(L_list)(L_nil)})(L_list)}))},
  function(){return resolve(L_define)("subflatten")(2)("subflatten list result = isNil list\n  result\n  isCons list\n    subflatten (head list) (subflatten (tail list) result)\n    cons list result")(lazy(function(L_list){return function(L_result){return resolve(L_isNil)(L_list)(L_result)(function(){return resolve(L_isCons)(L_list)(function(){return resolve(L_subflatten)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_subflatten)(function(){return resolve(L_tail)(L_list)})(L_result)})})(function(){return resolve(L_cons)(L_list)(L_result)})})}}))},
  function(){return resolve(L_define)("reverse")(1)("reverse l = rev l nil")(lazy(function(L_l){return resolve(L_rev)(L_l)(L_nil)}))},
  function(){return resolve(L_define)("rev")(2)("rev l result = isNil l\n  result\n  rev (tail l) (cons (head l) result)")(lazy(function(L_l){return function(L_result){return resolve(L_isNil)(L_l)(L_result)(function(){return resolve(L_rev)(function(){return resolve(L_tail)(L_l)})(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_l)})(L_result)})})}}))},
  function(){return resolve(L_define)("filter")(2)("filter func list = isNil list\n  nil\n  func (head list) (cons (head list)) id (filter func (tail list))")(lazy(function(L_func){return function(L_list){return resolve(L_isNil)(L_list)(L_nil)(function(){return resolve(L_func)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_list)})})(L_id)(function(){return resolve(L_filter)(L_func)(function(){return resolve(L_tail)(L_list)})})})}}))},
  function(){return resolve(L_define)("find")(2)("find predicate list = isNil list\n  none\n  predicate (head list) (some (head list)) (find predicate (tail list))")(lazy(function(L_predicate){return function(L_list){return resolve(L_isNil)(L_list)(L_none)(function(){return resolve(L_predicate)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_some)(function(){return resolve(L_head)(L_list)})})(function(){return resolve(L_find)(L_predicate)(function(){return resolve(L_tail)(L_list)})})})}}))},
  function(){return resolve(L_define)("contains")(2)("contains list item = find (\\el . eq el item) list (\\x . true) false")(lazy(function(L_list){return function(L_item){return resolve(L_find)(lazy(function(L_el){return resolve(L_eq)(L_el)(L_item)}))(L_list)(lazy(function(L_x){return resolve(L_true)}))(L_false)}}))},
  function(){return resolve(L_define)("map")(2)("map func l = isNil l\n  nil\n  cons (func (head l)) (map func (tail l))")(lazy(function(L_func){return function(L_l){return resolve(L_isNil)(L_l)(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_func)(function(){return resolve(L_head)(L_l)})})(function(){return resolve(L_map)(L_func)(function(){return resolve(L_tail)(L_l)})})})}}))},
  function(){return resolve(L_define)("mapSave")(2)("mapSave func l = isNil l\n  nil\n  \\\\\n    newH = func (head l)\n    newT = mapSave func (tail l)\n    .\n    and (eq newH (head l)) (eq newT (tail l))\n      l\n      cons newH newT")(lazy(function(L_func){return function(L_l){return resolve(L_isNil)(L_l)(L_nil)(function(){
var L_newT, L_newH;

L_newH = function(){return resolve(L_func)(function(){return resolve(L_head)(L_l)})};

L_newT = function(){return resolve(L_mapSave)(L_func)(function(){return resolve(L_tail)(L_l)})};
return resolve(L_and)(function(){return resolve(L_eq)(L_newH)(function(){return resolve(L_head)(L_l)})})(function(){return resolve(L_eq)(L_newT)(function(){return resolve(L_tail)(L_l)})})(L_l)(function(){return resolve(L_cons)(L_newH)(L_newT)})})}}))},
  function(){return resolve(L_define)("foldl")(3)("foldl func initialValue l = l (\\h t D . foldl func (func initialValue h) t) initialValue")(lazy(function(L_func){return function(L_initialValue){return function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_foldl)(L_func)(function(){return resolve(L_func)(L_initialValue)(L_h)})(L_t)}}}))(L_initialValue)}}}))},
  function(){return resolve(L_define)("foldl1")(2)("foldl1 func l = l \\h t . foldl func h t")(lazy(function(L_func){return function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return resolve(L_foldl)(L_func)(L_h)(L_t)}}))}}))},
  function(){return resolve(L_define)("foldr")(3)("foldr func initialValue list = list\n  \\h t D . func h (foldr func initialValue t)\n  initialValue")(lazy(function(L_func){return function(L_initialValue){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_func)(L_h)(function(){return resolve(L_foldr)(L_func)(L_initialValue)(L_t)})}}}))(L_initialValue)}}}))},
  function(){return resolve(L_define)("foldr1")(2)("foldr1 func list = list \\h t . isNil t\n  h\n  func h (foldr1 func t)")(lazy(function(L_func){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_isNil)(L_t)(L_h)(function(){return resolve(L_func)(L_h)(function(){return resolve(L_foldr1)(L_func)(L_t)})})}}))}}))},
  function(){return resolve(L_define)("intersperse")(2)("intersperse list element = list (\\h t D .\n  isNil t\n    list\n    cons h (cons element (intersperse t element))) nil")(lazy(function(L_list){return function(L_element){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isNil)(L_t)(L_list)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(L_element)(function(){return resolve(L_intersperse)(L_t)(L_element)})})})}}}))(L_nil)}}))},
  function(){return resolve(L_define)("join")(2)("join list el = strCat (intersperse list el)")(lazy(function(L_list){return function(L_el){return resolve(L_strCat)(function(){return resolve(L_intersperse)(L_list)(L_el)})}}))},
  function(){return resolve(L_define)("findIndex")(2)("findIndex func list = idx list func 0")(lazy(function(L_func){return function(L_list){return resolve(L_idx)(L_list)(L_func)(0)}}))},
  function(){return resolve(L_define)("idx")(3)("idx list func pos = list\n  \\h t D . func h\n    pos\n    idx t func (+ 1 pos)\n  -1")(lazy(function(L_list){return function(L_func){return function(L_pos){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_func)(L_h)(L_pos)(function(){return resolve(L_idx)(L_t)(L_func)(function(){return resolve(L_$o)(1)(L_pos)})})}}}))(-1)}}}))},
  function(){return resolve(L_define)("index")(2)("index list el = find (\\item . == el item) list")(lazy(function(L_list){return function(L_el){return resolve(L_find)(lazy(function(L_item){return resolve(L_$p$p)(L_el)(L_item)}))(L_list)}}))},
  function(){return resolve(L_define)("increasing")(1)("increasing x = cons x (increasing (+ x 1))")(lazy(function(L_x){return resolve(L_cons)(L_x)(function(){return resolve(L_increasing)(function(){return resolve(L_$o)(L_x)(1)})})}))},
  function(){return resolve(L_define)("wholes")(0)("wholes = increasing 0")(function(){return resolve(L_increasing)(0)})},
  function(){return resolve(L_define)("naturals")(0)("naturals = tail wholes")(function(){return resolve(L_tail)(L_wholes)})},
  function(){return resolve(L_define)("zip")(2)("zip a b = isNil a\n  nil\n  isNil b\n    nil\n    cons (cons (head a) (head b)) (zip (tail a) (tail b))")(lazy(function(L_a){return function(L_b){return resolve(L_isNil)(L_a)(L_nil)(function(){return resolve(L_isNil)(L_b)(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_a)})(function(){return resolve(L_head)(L_b)})})(function(){return resolve(L_zip)(function(){return resolve(L_tail)(L_a)})(function(){return resolve(L_tail)(L_b)})})})})}}))},
  function(){return resolve(L_define)("assertAlist")(3)("assertAlist msg value result = assert (isAlist value) (strCat (cons msg (cons ' should be a association list, but it is not; its type is ' (cons (getType value) (cons ': ' (cons (show value) nil)))))) result")(lazy(function(L_msg){return function(L_value){return function(L_result){return resolve(L_assert)(function(){return resolve(L_isAlist)(L_value)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_msg)(function(){return resolve(L_cons)(" should be a association list, but it is not; its type is ")(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_value)})(function(){return resolve(L_cons)(": ")(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_value)})(L_nil)})})})})})})(L_result)}}}))},
  function(){return resolve(L_define)("acons")(3)("acons k v alist = assertAlist \"acons alist\" alist (\\@ type cons . \\f . \\@ assoc true . f (cons k v) alist)")(lazy(function(L_k){return function(L_v){return function(L_alist){return resolve(L_assertAlist)("acons alist")(L_alist)(lazy(setType(setLambdaProperties(function(L_f){return resolve(L_f)(function(){return resolve(L_cons)(L_k)(L_v)})(L_alist)}, {"assoc":"true"}), 'cons')))}}}))},
  function(){return resolve(L_define)("assoc")(2)("assoc k alist  = find (\\el . eq k (head el)) alist (\\cell . cell \\head tail . some tail) none")(lazy(function(L_k){return function(L_alist){return resolve(L_find)(lazy(function(L_el){return resolve(L_eq)(L_k)(function(){return resolve(L_head)(L_el)})}))(L_alist)(lazy(function(L_cell){return resolve(L_cell)(lazy(function(L_head){return function(L_tail){return resolve(L_some)(L_tail)}}))}))(L_none)}}))},
  function(){return resolve(L_define)("rassoc")(2)("rassoc v alist = find (\\el . eq v (tail el)) alist (\\cell . cell \\head tail . some head) none")(lazy(function(L_v){return function(L_alist){return resolve(L_find)(lazy(function(L_el){return resolve(L_eq)(L_v)(function(){return resolve(L_tail)(L_el)})}))(L_alist)(lazy(function(L_cell){return resolve(L_cell)(lazy(function(L_head){return function(L_tail){return resolve(L_some)(L_head)}}))}))(L_none)}}))},
  function(){return resolve(L_define)("isAlist")(1)("isAlist obj = or (isNil obj) (hasProperty obj 'assoc')")(lazy(function(L_obj){return resolve(L_or)(function(){return resolve(L_isNil)(L_obj)})(function(){return resolve(L_hasProperty)(L_obj)("assoc")})}))},
  function(){return resolve(L_define)("aconsPair")(2)("aconsPair keyValue list = \\@ type cons . \\f . \\@ assoc true . f keyValue list")(lazy(function(L_keyValue){return function(L_list){return setType(setLambdaProperties(function(L_f){return resolve(L_f)(L_keyValue)(L_list)}, {"assoc":"true"}), 'cons')}}))},
  function(){return resolve(L_define)("appendAlist")(2)("appendAlist a b = isNil a\n  b\n  aconsPair (head a) (appendAlist (tail a) b)")(lazy(function(L_a){return function(L_b){return resolve(L_isNil)(L_a)(L_b)(function(){return resolve(L_aconsPair)(function(){return resolve(L_head)(L_a)})(function(){return resolve(L_appendAlist)(function(){return resolve(L_tail)(L_a)})(L_b)})})}}))},
  function(){return resolve(L_define)("keys")(1)("keys list = map (\\l . head l) list")(lazy(function(L_list){return resolve(L_map)(lazy(function(L_l){return resolve(L_head)(L_l)}))(L_list)}))},
  function(){return resolve(L_define)("getProperty")(2)("getProperty func prop = getProperties func\n  \\props . assoc prop props\n  none")(lazy(function(L_func){return function(L_prop){return resolve(L_getProperties)(L_func)(lazy(function(L_props){return resolve(L_assoc)(L_prop)(L_props)}))(L_none)}}))},
  function(){return resolve(L_define)("hasProperty")(2)("hasProperty func prop = getProperty func prop\n  \\_ . true\n  false")(lazy(function(L_func){return function(L_prop){return resolve(L_getProperty)(L_func)(L_prop)(lazy(function(L__){return resolve(L_true)}))(L_false)}}))},
  function(){return resolve(L_define)("quicksort")(2)("quicksort less list = (qs less list) nil")(lazy(function(L_less){return function(L_list){return resolve(L_qs)(L_less)(L_list)(L_nil)}}))},
  function(){return resolve(L_define)("qs")(2)("qs sortedFunc list = list\n  \\h t D . \\\\\n    greater = filter (sortedFunc h) t\n    lesser = filter (compose not (sortedFunc h)) t\n    .\n    \\rest . (qs sortedFunc lesser) (cons h ((qs sortedFunc greater) rest))\n  id")(lazy(function(L_sortedFunc){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return (function(){

var L_lesser, L_greater;

L_greater = function(){return resolve(L_filter)(function(){return resolve(L_sortedFunc)(L_h)})(L_t)};

L_lesser = function(){return resolve(L_filter)(function(){return resolve(L_compose)(L_not)(function(){return resolve(L_sortedFunc)(L_h)})})(L_t)};
return function(L_rest){return resolve(L_qs)(L_sortedFunc)(L_lesser)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_qs)(L_sortedFunc)(L_greater)(L_rest)})})}})()}}}))(L_id)}}))},
  function(){return resolve(L_define)("insertSorted")(3)("insertSorted sortFunc item list = list\n  \\h t D . sortFunc item h (cons item list) (cons h (insertSorted sortFunc item t))\n  cons item nil")(lazy(function(L_sortFunc){return function(L_item){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_sortFunc)(L_item)(L_h)(function(){return resolve(L_cons)(L_item)(L_list)})(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_insertSorted)(L_sortFunc)(L_item)(L_t)})})}}}))(function(){return resolve(L_cons)(L_item)(L_nil)})}}}))},
  function(){return resolve(L_define)("token")(2)("token txt pos = \\f . f txt pos")(lazy(setDataType(function(L_txt){return function(L_pos){return setType(function(L_f){return resolve(L_f)(L_txt)(L_pos)}, 'token')}}, 'token')))},
  function(){return resolve(L_define)("tokenString")(1)("tokenString tok = tok \\t p . t")(lazy(function(L_tok){return resolve(L_tok)(lazy(function(L_t){return function(L_p){return resolve(L_t)}}))}))},
  function(){return resolve(L_define)("tokenPos")(1)("tokenPos tok = tok \\t p . p")(lazy(function(L_tok){return resolve(L_tok)(lazy(function(L_t){return function(L_p){return resolve(L_p)}}))}))},
  function(){return resolve(L_define)("isToken")(1)("isToken t = hasType t token")(lazy(function(L_t){return resolve(L_hasType)(L_t)(L_token)}))},
  function(){return resolve(L_define)("parens")(3)("parens start end content = \\f . f start end content")(lazy(setDataType(function(L_start){return function(L_end){return function(L_content){return setType(function(L_f){return resolve(L_f)(L_start)(L_end)(L_content)}, 'parens')}}}, 'parens')))},
  function(){return resolve(L_define)("parensStart")(1)("parensStart p = p \\s e c . s")(lazy(function(L_p){return resolve(L_p)(lazy(function(L_s){return function(L_e){return function(L_c){return resolve(L_s)}}}))}))},
  function(){return resolve(L_define)("parensEnd")(1)("parensEnd p = p \\s e c . e")(lazy(function(L_p){return resolve(L_p)(lazy(function(L_s){return function(L_e){return function(L_c){return resolve(L_e)}}}))}))},
  function(){return resolve(L_define)("parensContent")(1)("parensContent p = p \\s e c . c")(lazy(function(L_p){return resolve(L_p)(lazy(function(L_s){return function(L_e){return function(L_c){return resolve(L_c)}}}))}))},
  function(){return resolve(L_define)("isParens")(1)("isParens p = hasType p parens")(lazy(function(L_p){return resolve(L_hasType)(L_p)(L_parens)}))},
  function(){return resolve(L_define)("makeParens")(3)("makeParens start end content =\n  and (isCons content) (isNil (tail content))\n    makeParens start end (head content)\n    or (isToken content) (isParens content)\n      content\n      parens start end content")(lazy(function(L_start){return function(L_end){return function(L_content){return resolve(L_and)(function(){return resolve(L_isCons)(L_content)})(function(){return resolve(L_isNil)(function(){return resolve(L_tail)(L_content)})})(function(){return resolve(L_makeParens)(L_start)(L_end)(function(){return resolve(L_head)(L_content)})})(function(){return resolve(L_or)(function(){return resolve(L_isToken)(L_content)})(function(){return resolve(L_isParens)(L_content)})(L_content)(function(){return resolve(L_parens)(L_start)(L_end)(L_content)})})}}}))},
  function(){return resolve(L_define)("parensFromToks")(3)("parensFromToks left right content = \\\\\n  start = tokenPos left\n  end = + (tokenPos right) (strLen (tokenString right))\n  .\n  parens start end content")(lazy(function(L_left){return function(L_right){return function(L_content){return (function(){

var L_end, L_start;

L_start = function(){return resolve(L_tokenPos)(L_left)};

L_end = function(){return resolve(L_$o)(function(){return resolve(L_tokenPos)(L_right)})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_right)})})};
return resolve(L_parens)(L_start)(L_end)(L_content)})()}}}))},
  function(){return resolve(L_define)("stripParens")(1)("stripParens p = isParens p (parensContent p) p")(lazy(function(L_p){return resolve(L_isParens)(L_p)(function(){return resolve(L_parensContent)(L_p)})(L_p)}))},
  function(){return resolve(L_define)("parseErr")(2)("parseErr msg1 msg2 = \\f . f (strCat (cons msg1 (cons msg2 nil)))")(lazy(setDataType(function(L_msg1){return function(L_msg2){return setType(function(L_f){return resolve(L_f)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_msg1)(function(){return resolve(L_cons)(L_msg2)(L_nil)})})})}, 'parseErr')}}, 'parseErr')))},
  function(){return resolve(L_define)("parseErrMsg")(1)("parseErrMsg err = err \\m . m")(lazy(function(L_err){return resolve(L_err)(lazy(function(L_m){return resolve(L_m)}))}))},
  function(){return resolve(L_define)("isParseErr")(1)("isParseErr thing = hasType thing parseErr")(lazy(function(L_thing){return resolve(L_hasType)(L_thing)(L_parseErr)}))},
  function(){return resolve(L_define)("emptyToken")(0)("emptyToken = regexp '^\\\\r?\\\\n[ \\\\i]*(#|$)'")(function(){return resolve(L_regexp)("^\\r?\\n[ \\i]*(#|$)")})},
  function(){return resolve(L_define)("makeTokens")(2)("makeTokens strings start = strings (\\h t D . makeMoreTokens h t start) nil")(lazy(function(L_strings){return function(L_start){return resolve(L_strings)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_makeMoreTokens)(L_h)(L_t)(L_start)}}}))(L_nil)}}))},
  function(){return resolve(L_define)("makeMoreTokens")(3)("makeMoreTokens h t start = \\\\\n  next = makeTokens t (+ start (strLen h))\n  .\n  and (strMatches h emptyToken) (or (isNil t) (or (strStartsWith (head t) '\\n') (strStartsWith (head t) '\\r\\n')))\n  #and (strMatches h emptyToken) (or (isNil t) (strStartsWith (head t) '\\n'))\n    makeTokens t (+ start (strLen h))\n    or (strStartsWith h ' ') (strStartsWith h '#')\n      next\n      and (or (strStartsWith h '\\n') (strStartsWith h '\\r\\n')) (strStartsWith (head t) '#')\n      #and (strStartsWith h '\\n') (strStartsWith (head t) '#')\n        makeTokens (tail t) (+ start (+ (strLen h) (strLen (head t))))\n        cons (token h start) next")(lazy(function(L_h){return function(L_t){return function(L_start){return (function(){

var L_next;

L_next = function(){return resolve(L_makeTokens)(L_t)(function(){return resolve(L_$o)(L_start)(function(){return resolve(L_strLen)(L_h)})})};
return resolve(L_and)(function(){return resolve(L_strMatches)(L_h)(L_emptyToken)})(function(){return resolve(L_or)(function(){return resolve(L_isNil)(L_t)})(function(){return resolve(L_or)(function(){return resolve(L_strStartsWith)(function(){return resolve(L_head)(L_t)})("\n")})(function(){return resolve(L_strStartsWith)(function(){return resolve(L_head)(L_t)})("\r\n")})})})(function(){return resolve(L_makeTokens)(L_t)(function(){return resolve(L_$o)(L_start)(function(){return resolve(L_strLen)(L_h)})})})(function(){return resolve(L_or)(function(){return resolve(L_strStartsWith)(L_h)(" ")})(function(){return resolve(L_strStartsWith)(L_h)("#")})(L_next)(function(){return resolve(L_and)(function(){return resolve(L_or)(function(){return resolve(L_strStartsWith)(L_h)("\n")})(function(){return resolve(L_strStartsWith)(L_h)("\r\n")})})(function(){return resolve(L_strStartsWith)(function(){return resolve(L_head)(L_t)})("#")})(function(){return resolve(L_makeTokens)(function(){return resolve(L_tail)(L_t)})(function(){return resolve(L_$o)(L_start)(function(){return resolve(L_$o)(function(){return resolve(L_strLen)(L_h)})(function(){return resolve(L_strLen)(function(){return resolve(L_head)(L_t)})})})})})(function(){return resolve(L_cons)(function(){return resolve(L_token)(L_h)(L_start)})(L_next)})})})})()}}}))},
  function(){return resolve(L_define)("splitTokens")(2)("splitTokens str pat = filter (\\s . not (eq s '')) (basicSplitTokens str pat true)")(lazy(function(L_str){return function(L_pat){return resolve(L_filter)(lazy(function(L_s){return resolve(L_not)(function(){return resolve(L_eq)(L_s)("")})}))(function(){return resolve(L_basicSplitTokens)(L_str)(L_pat)(L_true)})}}))},
  function(){return resolve(L_define)("numberPat")(0)("numberPat = regexp '-?([0-9]+(\\\\.[0-9]+)?|\\\\.[0-9]+)'")(function(){return resolve(L_regexp)("-?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)")})},
  function(){return resolve(L_define)("matchOffset")(2)("matchOffset str match = isNil match\n  strLen str\n  head (tail (tail match))")(lazy(function(L_str){return function(L_match){return resolve(L_isNil)(L_match)(function(){return resolve(L_strLen)(L_str)})(function(){return resolve(L_head)(function(){return resolve(L_tail)(function(){return resolve(L_tail)(L_match)})})})}}))},
  function(){return resolve(L_define)("basicSplitTokens")(3)("basicSplitTokens str pat prevIsDel = == str ''\n  nil\n  \\\\\n    num = strMatch str numberPat\n    del = strMatch str pat\n    numOffset = matchOffset str num\n    delOffset = matchOffset str del\n    select = and (== numOffset 0) prevIsDel\n      \\del num first . num\n      == delOffset 0\n        \\del num first . del\n        \\del num first . first\n    first = select (head del) (head num) (strSubstring str 0 delOffset)\n    .\n    cons\n      first\n      basicSplitTokens\n        strSubstring str (strLen first) 0\n        pat\n        select true false false")(lazy(function(L_str){return function(L_pat){return function(L_prevIsDel){return resolve(L_$p$p)(L_str)("")(L_nil)(function(){
var L_first, L_select, L_delOffset, L_numOffset, L_del, L_num;

L_num = function(){return resolve(L_strMatch)(L_str)(L_numberPat)};

L_del = function(){return resolve(L_strMatch)(L_str)(L_pat)};

L_numOffset = function(){return resolve(L_matchOffset)(L_str)(L_num)};

L_delOffset = function(){return resolve(L_matchOffset)(L_str)(L_del)};

L_select = function(){return resolve(L_and)(function(){return resolve(L_$p$p)(L_numOffset)(0)})(L_prevIsDel)(lazy(function(L_del_0){return function(L_num_1){return function(L_first){return resolve(L_num_1)}}}))(function(){return resolve(L_$p$p)(L_delOffset)(0)(lazy(function(L_del_0){return function(L_num_1){return function(L_first){return resolve(L_del_0)}}}))(lazy(function(L_del_0){return function(L_num_1){return function(L_first){return resolve(L_first)}}}))})};

L_first = function(){return resolve(L_select)(function(){return resolve(L_head)(L_del)})(function(){return resolve(L_head)(L_num)})(function(){return resolve(L_strSubstring)(L_str)(0)(L_delOffset)})};
return resolve(L_cons)(L_first)(function(){return resolve(L_basicSplitTokens)(function(){return resolve(L_strSubstring)(L_str)(function(){return resolve(L_strLen)(L_first)})(0)})(L_pat)(function(){return resolve(L_select)(L_true)(L_false)(L_false)})})})}}}))},
  function(){return resolve(L_define)("tokens")(2)("tokens str pat = makeTokens (splitTokens str pat) 0")(lazy(function(L_str){return function(L_pat){return resolve(L_makeTokens)(function(){return resolve(L_splitTokens)(L_str)(L_pat)})(0)}}))},
  function(){return resolve(L_define)("isString")(1)("isString s = == (getType s) '*string'")(lazy(function(L_s){return resolve(L_$p$p)(function(){return resolve(L_getType)(L_s)})("*string")}))},
  function(){return resolve(L_define)("isNumber")(1)("isNumber s = == (getType s) '*number'")(lazy(function(L_s){return resolve(L_$p$p)(function(){return resolve(L_getType)(L_s)})("*number")}))},
  function(){return resolve(L_define)("isTokenString")(2)("isTokenString tok str = or\n  and (isToken tok) (eq (tokenString tok) str)\n  and (isString tok) (eq tok str)")(lazy(function(L_tok){return function(L_str){return resolve(L_or)(function(){return resolve(L_and)(function(){return resolve(L_isToken)(L_tok)})(function(){return resolve(L_eq)(function(){return resolve(L_tokenString)(L_tok)})(L_str)})})(function(){return resolve(L_and)(function(){return resolve(L_isString)(L_tok)})(function(){return resolve(L_eq)(L_tok)(L_str)})})}}))},
  function(){return resolve(L_define)("isTokenStart")(2)("isTokenStart tok str = or\n  and (isToken tok) (strStartsWith (tokenString tok) str)\n  and (isString tok) (strStartsWith tok str)")(lazy(function(L_tok){return function(L_str){return resolve(L_or)(function(){return resolve(L_and)(function(){return resolve(L_isToken)(L_tok)})(function(){return resolve(L_strStartsWith)(function(){return resolve(L_tokenString)(L_tok)})(L_str)})})(function(){return resolve(L_and)(function(){return resolve(L_isString)(L_tok)})(function(){return resolve(L_strStartsWith)(L_tok)(L_str)})})}}))},
  function(){return resolve(L_define)("strTokenString")(1)("strTokenString tok = withToken tok nil \\str pos . str")(lazy(function(L_tok){return resolve(L_withToken)(L_tok)(L_nil)(lazy(function(L_str){return function(L_pos){return resolve(L_str)}}))}))},
  function(){return resolve(L_define)("withToken")(3)("withToken tok nonTokCase tokCase = isToken tok\n  tok tokCase\n  isString tok\n    tokCase tok -1\n    nonTokCase")(lazy(function(L_tok){return function(L_nonTokCase){return function(L_tokCase){return resolve(L_isToken)(L_tok)(function(){return resolve(L_tok)(L_tokCase)})(function(){return resolve(L_isString)(L_tok)(function(){return resolve(L_tokCase)(L_tok)(-1)})(L_nonTokCase)})}}}))},
  function(){return resolve(L_define)("withCons")(3)("withCons l nilCase cont = isCons l (l (\\h t D . cont h t) nilCase) nilCase")(lazy(function(L_l){return function(L_nilCase){return function(L_cont){return resolve(L_isCons)(L_l)(function(){return resolve(L_l)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_cont)(L_h)(L_t)}}}))(L_nilCase)})(L_nilCase)}}}))},
  function(){return resolve(L_define)("ifNotErr")(2)("ifNotErr thing cont = hasType thing parseErr thing (cont thing)")(lazy(function(L_thing){return function(L_cont){return resolve(L_hasType)(L_thing)(L_parseErr)(L_thing)(function(){return resolve(L_cont)(L_thing)})}}))},
  function(){return resolve(L_define)("parseToks")(2)("parseToks toks groups =\n  isNil toks nil\n    ifNotErr (parseTok toks groups) \\list . list \\h t .\n      ifNotErr (parseToks t groups) \\res .\n        cons h\n          and (isCons res) (isBlockStart (head res))\n            cons res nil\n            res")(lazy(function(L_toks){return function(L_groups){return resolve(L_isNil)(L_toks)(L_nil)(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_ifNotErr)(function(){return resolve(L_parseToks)(L_t)(L_groups)})(lazy(function(L_res){return resolve(L_cons)(L_h)(function(){return resolve(L_and)(function(){return resolve(L_isCons)(L_res)})(function(){return resolve(L_isBlockStart)(function(){return resolve(L_head)(L_res)})})(function(){return resolve(L_cons)(L_res)(L_nil)})(L_res)})}))}}))}))})}}))},
  function(){return resolve(L_define)("parseTok")(2)("parseTok toks groups = withCons toks nil \\h t .\n  withToken h toks \\txt pos .\n    assoc txt groups\n      \\close . parseGroup h t nil close groups\n      (or (isTokenStart h '\\n') (isTokenStart h '\\r\\n')) (parseIndent h t nil groups)\n        toks")(lazy(function(L_toks){return function(L_groups){return resolve(L_withCons)(L_toks)(L_nil)(lazy(function(L_h){return function(L_t){return resolve(L_withToken)(L_h)(L_toks)(lazy(function(L_txt){return function(L_pos){return resolve(L_assoc)(L_txt)(L_groups)(lazy(function(L_close){return resolve(L_parseGroup)(L_h)(L_t)(L_nil)(L_close)(L_groups)}))(function(){return resolve(L_or)(function(){return resolve(L_isTokenStart)(L_h)("\n")})(function(){return resolve(L_isTokenStart)(L_h)("\r\n")})(function(){return resolve(L_parseIndent)(L_h)(L_t)(L_nil)(L_groups)})(L_toks)})}}))}}))}}))},
  function(){return resolve(L_define)("parseGroup")(5)("parseGroup left toks gr close groups = withCons toks (parseErr 'Unterminated group starting ' (loc left))\n  \\h t . isTokenString h close\n    eq close ')'\n      cons (parensFromToks left h (reverse gr)) t\n      cons (cons left (cons (reverse gr) (cons h nil))) t\n    withToken h\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT .\n        parseGroup left restT (cons restH gr) close groups\n      \\txt pos .\n        rassoc txt groups\n          \\open . parseErr (strCat (cons 'Mismatched group: ' (cons (tokenString left) (cons txt (cons ' ' nil))))) (loc left)\n          ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseGroup left restT (cons restH gr) close groups")(lazy(function(L_left){return function(L_toks){return function(L_gr){return function(L_close){return function(L_groups){return resolve(L_withCons)(L_toks)(function(){return resolve(L_parseErr)("Unterminated group starting ")(function(){return resolve(L_loc)(L_left)})})(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)(L_close)(function(){return resolve(L_eq)(L_close)(")")(function(){return resolve(L_cons)(function(){return resolve(L_parensFromToks)(L_left)(L_h)(function(){return resolve(L_reverse)(L_gr)})})(L_t)})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_left)(function(){return resolve(L_cons)(function(){return resolve(L_reverse)(L_gr)})(function(){return resolve(L_cons)(L_h)(L_nil)})})})(L_t)})})(function(){return resolve(L_withToken)(L_h)(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_restH){return function(L_restT){return resolve(L_parseGroup)(L_left)(L_restT)(function(){return resolve(L_cons)(L_restH)(L_gr)})(L_close)(L_groups)}}))}))})(lazy(function(L_txt){return function(L_pos){return resolve(L_rassoc)(L_txt)(L_groups)(lazy(function(L_open){return resolve(L_parseErr)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("Mismatched group: ")(function(){return resolve(L_cons)(function(){return resolve(L_tokenString)(L_left)})(function(){return resolve(L_cons)(L_txt)(function(){return resolve(L_cons)(" ")(L_nil)})})})})})(function(){return resolve(L_loc)(L_left)})}))(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_restH){return function(L_restT){return resolve(L_parseGroup)(L_left)(L_restT)(function(){return resolve(L_cons)(L_restH)(L_gr)})(L_close)(L_groups)}}))}))})}}))})}}))}}}}}))},
  function(){return resolve(L_define)("parseIndent")(4)("parseIndent indent toks gr groups =\n  withCons toks (cons (makeParens (tokenPos indent) (lexEnd (head gr)) (reverse gr)) nil)\n    \\h t . or (withToken h false (\\txt pos . rassoc txt groups (\\open . true) false))\n      and (or (isTokenStart h '\\n') (isTokenStart h '\\r\\n')) (<= (strLen (tokenString h)) (strLen (tokenString indent)))\n      cons (makeParens (tokenPos indent) (tokenPos h) (reverse gr)) toks\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseIndent indent restT (cons restH gr) groups")(lazy(function(L_indent){return function(L_toks){return function(L_gr){return function(L_groups){return resolve(L_withCons)(L_toks)(function(){return resolve(L_cons)(function(){return resolve(L_makeParens)(function(){return resolve(L_tokenPos)(L_indent)})(function(){return resolve(L_lexEnd)(function(){return resolve(L_head)(L_gr)})})(function(){return resolve(L_reverse)(L_gr)})})(L_nil)})(lazy(function(L_h){return function(L_t){return resolve(L_or)(function(){return resolve(L_withToken)(L_h)(L_false)(lazy(function(L_txt){return function(L_pos){return resolve(L_rassoc)(L_txt)(L_groups)(lazy(function(L_open){return resolve(L_true)}))(L_false)}}))})(function(){return resolve(L_and)(function(){return resolve(L_or)(function(){return resolve(L_isTokenStart)(L_h)("\n")})(function(){return resolve(L_isTokenStart)(L_h)("\r\n")})})(function(){return resolve(L_$y$p)(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_h)})})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_indent)})})})})(function(){return resolve(L_cons)(function(){return resolve(L_makeParens)(function(){return resolve(L_tokenPos)(L_indent)})(function(){return resolve(L_tokenPos)(L_h)})(function(){return resolve(L_reverse)(L_gr)})})(L_toks)})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_restH){return function(L_restT){return resolve(L_parseIndent)(L_indent)(L_restT)(function(){return resolve(L_cons)(L_restH)(L_gr)})(L_groups)}}))}))})}}))}}}}))},
  function(){return resolve(L_define)("lit")(1)("lit value = \\f . f value")(lazy(setDataType(function(L_value){return setType(function(L_f){return resolve(L_f)(L_value)}, 'lit')}, 'lit')))},
  function(){return resolve(L_define)("ref")(1)("ref name = \\f . f name")(lazy(setDataType(function(L_name){return setType(function(L_f){return resolve(L_f)(L_name)}, 'ref')}, 'ref')))},
  function(){return resolve(L_define)("lambda")(2)("lambda name body = \\f . f name body")(lazy(setDataType(function(L_name){return function(L_body){return setType(function(L_f){return resolve(L_f)(L_name)(L_body)}, 'lambda')}}, 'lambda')))},
  function(){return resolve(L_define)("apply")(2)("apply func arg = \\f . f func arg")(lazy(setDataType(function(L_func){return function(L_arg){return setType(function(L_f){return resolve(L_f)(L_func)(L_arg)}, 'apply')}}, 'apply')))},
  function(){return resolve(L_define)("let")(3)("let name value body = \\f . f name value body")(lazy(setDataType(function(L_name){return function(L_value){return function(L_body){return setType(function(L_f){return resolve(L_f)(L_name)(L_value)(L_body)}, 'let')}}}, 'let')))},
  function(){return resolve(L_define)("anno")(3)("anno name data body = \\f . f name data body")(lazy(setDataType(function(L_name){return function(L_data){return function(L_body){return setType(function(L_f){return resolve(L_f)(L_name)(L_data)(L_body)}, 'anno')}}}, 'anno')))},
  function(){return resolve(L_define)("withParens")(3)("withParens p err cont = isParens p (p cont) err")(lazy(function(L_p){return function(L_err){return function(L_cont){return resolve(L_isParens)(L_p)(function(){return resolve(L_p)(L_cont)})(L_err)}}}))},
  function(){return resolve(L_define)("setParens")(2)("setParens p func = isParens p\n  p \\start end content . parens start end (func content)\n  func p")(lazy(function(L_p){return function(L_func){return resolve(L_isParens)(L_p)(function(){return resolve(L_p)(lazy(function(L_start){return function(L_end){return function(L_content){return resolve(L_parens)(L_start)(L_end)(function(){return resolve(L_func)(L_content)})}}}))})(function(){return resolve(L_func)(L_p)})}}))},
  function(){return resolve(L_define)("withStripped")(2)("withStripped list cont = withParens list (cont list) \\start end content . withStripped content cont")(lazy(function(L_list){return function(L_cont){return resolve(L_withParens)(L_list)(function(){return resolve(L_cont)(L_list)})(lazy(function(L_start){return function(L_end){return function(L_content){return resolve(L_withStripped)(L_content)(L_cont)}}}))}}))},
  function(){return resolve(L_define)("position")(1)("position thing = isToken thing (tokenPos thing)\n  isParens thing (parensStart thing)\n    isCons thing (position (head thing))\n      -1")(lazy(function(L_thing){return resolve(L_isToken)(L_thing)(function(){return resolve(L_tokenPos)(L_thing)})(function(){return resolve(L_isParens)(L_thing)(function(){return resolve(L_parensStart)(L_thing)})(function(){return resolve(L_isCons)(L_thing)(function(){return resolve(L_position)(function(){return resolve(L_head)(L_thing)})})(-1)})})}))},
  function(){return resolve(L_define)("lexEnd")(1)("lexEnd thing = isToken thing (+ (tokenPos thing) (strLen (tokenString thing)))\n  isParens thing (parensEnd thing)\n    isCons thing (lexEnd (last thing))\n      -1")(lazy(function(L_thing){return resolve(L_isToken)(L_thing)(function(){return resolve(L_$o)(function(){return resolve(L_tokenPos)(L_thing)})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_thing)})})})(function(){return resolve(L_isParens)(L_thing)(function(){return resolve(L_parensEnd)(L_thing)})(function(){return resolve(L_isCons)(L_thing)(function(){return resolve(L_lexEnd)(function(){return resolve(L_last)(L_thing)})})(-1)})})}))},
  function(){return resolve(L_define)("loc")(1)("loc thing = \\\\\n  p = position thing\n  l = eq p -1 'an unknown location' p\n  .\n  strCat (cons 'at ' (cons l nil))")(lazy(function(L_thing){return (function(){

var L_l, L_p;

L_p = function(){return resolve(L_position)(L_thing)};

L_l = function(){return resolve(L_eq)(L_p)(-1)("an unknown location")(L_p)};
return resolve(L_strCat)(function(){return resolve(L_cons)("at ")(function(){return resolve(L_cons)(L_l)(L_nil)})})})()}))},
  function(){return resolve(L_define)("scrub")(1)("scrub str = strFromList (scrubList (strToList str))")(lazy(function(L_str){return resolve(L_strFromList)(function(){return resolve(L_scrubList)(function(){return resolve(L_strToList)(L_str)})})}))},
  function(){return resolve(L_define)("scrubList")(1)("scrubList list = list\n  \\h t D . \\\\\n    next = scrubList t\n    .\n    eq h '\\\\' (cons h (cons (head t) (scrubList (tail t))))\n      eq h '\\\"' (cons '\\\\' (cons '\\\"' next))\n        cons h next\n  nil")(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return (function(){

var L_next;

L_next = function(){return resolve(L_scrubList)(L_t)};
return resolve(L_eq)(L_h)("\\")(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_t)})(function(){return resolve(L_scrubList)(function(){return resolve(L_tail)(L_t)})})})})(function(){return resolve(L_eq)(L_h)("\"")(function(){return resolve(L_cons)("\\")(function(){return resolve(L_cons)("\"")(L_next)})})(function(){return resolve(L_cons)(L_h)(L_next)})})})()}}}))(L_nil)}))},
  function(){return resolve(L_define)("createAst")(3)("createAst lineEnds inList names = withStripped inList \\list .\n  isToken list (createLitOrRef (tokenString list) names)\n    list\n      \\h t D .\n        isTokenString h '\\\\\\\\' (createLet h t names)\n          isTokenString h '\\\\@' (createAnno h t names)\n            isTokenString h '\\\\' (createLambda h t names)\n              createApply list names\n      nil")(lazy(function(L_lineEnds){return function(L_inList){return function(L_names){return resolve(L_withStripped)(L_inList)(lazy(function(L_list){return resolve(L_isToken)(L_list)(function(){return resolve(L_createLitOrRef)(function(){return resolve(L_tokenString)(L_list)})(L_names)})(function(){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)("\\\\")(function(){return resolve(L_createLet)(L_h)(L_t)(L_names)})(function(){return resolve(L_isTokenString)(L_h)("\\@")(function(){return resolve(L_createAnno)(L_h)(L_t)(L_names)})(function(){return resolve(L_isTokenString)(L_h)("\\")(function(){return resolve(L_createLambda)(L_h)(L_t)(L_names)})(function(){return resolve(L_createApply)(L_list)(L_names)})})})}}}))(L_nil)})}))}}}))},
  function(){return resolve(L_define)("strMatches")(2)("strMatches str pat = isCons (strMatch str pat)")(lazy(function(L_str){return function(L_pat){return resolve(L_isCons)(function(){return resolve(L_strMatch)(L_str)(L_pat)})}}))},
  function(){return resolve(L_define)("digit")(0)("digit = regexp '^[0-9]+$'")(function(){return resolve(L_regexp)("^[0-9]+$")})},
  function(){return resolve(L_define)("backslashCodes")(0)("backslashCodes = 'bfnrt'")("bfnrt")},
  function(){return resolve(L_define)("backslashValues")(0)("backslashValues = '\\b\\f\\n\\r\\t'")("\b\f\n\r\t")},
  function(){return resolve(L_define)("convertStringEscape")(3)("convertStringEscape char codes values =\n  eq codes ''\n    char\n    eq char (strAt codes 0)\n      strAt values 0\n      convertStringEscape char (strSubstring codes 1 0) (strSubstring values 1 0)")(lazy(function(L_char){return function(L_codes){return function(L_values){return resolve(L_eq)(L_codes)("")(L_char)(function(){return resolve(L_eq)(L_char)(function(){return resolve(L_strAt)(L_codes)(0)})(function(){return resolve(L_strAt)(L_values)(0)})(function(){return resolve(L_convertStringEscape)(L_char)(function(){return resolve(L_strSubstring)(L_codes)(1)(0)})(function(){return resolve(L_strSubstring)(L_values)(1)(0)})})})}}}))},
  function(){return resolve(L_define)("convertStringEscapes")(3)("convertStringEscapes orig str cont =\n  eq str ''\n    cont str\n    eq (strAt str 0) '\\\\'\n      eq (strLen str) 1 (parseErr \"Error, backslash without character in string: \" orig)\n        convertStringEscapes orig (strSubstring str 2 0) \\rest . cont\n          strAdd\n            convertStringEscape (strAt str 1) backslashCodes backslashValues\n            rest\n      convertStringEscapes orig (strSubstring str 1 0) \\rest . cont\n        strAdd\n          strAt str 0\n          rest")(lazy(function(L_orig){return function(L_str){return function(L_cont){return resolve(L_eq)(L_str)("")(function(){return resolve(L_cont)(L_str)})(function(){return resolve(L_eq)(function(){return resolve(L_strAt)(L_str)(0)})("\\")(function(){return resolve(L_eq)(function(){return resolve(L_strLen)(L_str)})(1)(function(){return resolve(L_parseErr)("Error, backslash without character in string: ")(L_orig)})(function(){return resolve(L_convertStringEscapes)(L_orig)(function(){return resolve(L_strSubstring)(L_str)(2)(0)})(lazy(function(L_rest){return resolve(L_cont)(function(){return resolve(L_strAdd)(function(){return resolve(L_convertStringEscape)(function(){return resolve(L_strAt)(L_str)(1)})(L_backslashCodes)(L_backslashValues)})(L_rest)})}))})})(function(){return resolve(L_convertStringEscapes)(L_orig)(function(){return resolve(L_strSubstring)(L_str)(1)(0)})(lazy(function(L_rest){return resolve(L_cont)(function(){return resolve(L_strAdd)(function(){return resolve(L_strAt)(L_str)(0)})(L_rest)})}))})})}}}))},
  function(){return resolve(L_define)("parseString")(2)("parseString str cont =\n  neq (strAt str 0) (strAt str -1) (parseErr \"Badly terminated string: \" str)\n    convertStringEscapes str (strSubstring str 1 -1) cont")(lazy(function(L_str){return function(L_cont){return resolve(L_neq)(function(){return resolve(L_strAt)(L_str)(0)})(function(){return resolve(L_strAt)(L_str)(-1)})(function(){return resolve(L_parseErr)("Badly terminated string: ")(L_str)})(function(){return resolve(L_convertStringEscapes)(L_str)(function(){return resolve(L_strSubstring)(L_str)(1)(-1)})(L_cont)})}}))},
  function(){return resolve(L_define)("createLitOrRef")(2)("createLitOrRef tok names =\n  contains names tok\n    ref tok\n    or (strStartsWith tok '\\\"') (strStartsWith tok \"'\")\n      parseString tok \\str . lit str\n      strStartsWith tok '.'\n        jsonParse (strCat (cons '0' (cons tok nil))) (\\err . ref tok) (\\item . lit item)\n        or (and (>= (strAt tok 0) '0') (<= (strAt tok 0) '9')) (strStartsWith tok '-')\n          jsonParse tok (\\err . ref tok) (\\item . lit item)\n          ref tok")(lazy(function(L_tok){return function(L_names){return resolve(L_contains)(L_names)(L_tok)(function(){return resolve(L_ref)(L_tok)})(function(){return resolve(L_or)(function(){return resolve(L_strStartsWith)(L_tok)("\"")})(function(){return resolve(L_strStartsWith)(L_tok)("'")})(function(){return resolve(L_parseString)(L_tok)(lazy(function(L_str){return resolve(L_lit)(L_str)}))})(function(){return resolve(L_strStartsWith)(L_tok)(".")(function(){return resolve(L_jsonParse)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("0")(function(){return resolve(L_cons)(L_tok)(L_nil)})})})(lazy(function(L_err){return resolve(L_ref)(L_tok)}))(lazy(function(L_item){return resolve(L_lit)(L_item)}))})(function(){return resolve(L_or)(function(){return resolve(L_and)(function(){return resolve(L_$z$p)(function(){return resolve(L_strAt)(L_tok)(0)})("0")})(function(){return resolve(L_$y$p)(function(){return resolve(L_strAt)(L_tok)(0)})("9")})})(function(){return resolve(L_strStartsWith)(L_tok)("-")})(function(){return resolve(L_jsonParse)(L_tok)(lazy(function(L_err){return resolve(L_ref)(L_tok)}))(lazy(function(L_item){return resolve(L_lit)(L_item)}))})(function(){return resolve(L_ref)(L_tok)})})})})}}))},
  function(){return resolve(L_define)("createLambda")(3)("createLambda start list names = \\\\\n  err = parseErr \"Lambda needs a variable name, a dot, and a body \" (loc start)\n  .\n  withCons list err \\name rest .\n    withToken name err \\n p .\n      withCons rest err \\dot body .\n        # are these partial applications too hard to read?\n        isTokenString dot '.'\n          ifNotErr (createAst nil body (cons n names)) \\bodyAst . lambda n bodyAst\n          ifNotErr (createLambda start rest (cons n names)) \\bodyAst . lambda n bodyAst")(lazy(function(L_start){return function(L_list){return function(L_names){return (function(){

var L_err;

L_err = function(){return resolve(L_parseErr)("Lambda needs a variable name, a dot, and a body ")(function(){return resolve(L_loc)(L_start)})};
return resolve(L_withCons)(L_list)(L_err)(lazy(function(L_name){return function(L_rest){return resolve(L_withToken)(L_name)(L_err)(lazy(function(L_n){return function(L_p){return resolve(L_withCons)(L_rest)(L_err)(lazy(function(L_dot){return function(L_body){return resolve(L_isTokenString)(L_dot)(".")(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_nil)(L_body)(function(){return resolve(L_cons)(L_n)(L_names)})})(lazy(function(L_bodyAst){return resolve(L_lambda)(L_n)(L_bodyAst)}))})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createLambda)(L_start)(L_rest)(function(){return resolve(L_cons)(L_n)(L_names)})})(lazy(function(L_bodyAst){return resolve(L_lambda)(L_n)(L_bodyAst)}))})}}))}}))}}))})()}}}))},
  function(){return resolve(L_define)("createAnno")(3)("createAnno start list names =\n  withCons list (parseErr \"No annotation name or data in annotation \" (loc start)) \\name rest .\n    withCons rest (parseErr \"No data for annotation \" (loc start)) \\data rest . \\\\\n      finish data body = ifNotErr (createAst nil body names) \\bodyAst .\n        cleanTokens start name \\name .\n          cleanTokens start data \\data .\n            anno name data bodyAst\n      .\n      isTokenString data '.'\n        finish nil rest\n        withStripped data \\data .\n          withCons rest (parseErr \"No body for annotation \" (loc start)) \\dot body .\n            isTokenString dot '.'\n              finish data body\n              parseErr \"Annotation expects dot after name and data \" (loc start)")(lazy(function(L_start){return function(L_list){return function(L_names){return resolve(L_withCons)(L_list)(function(){return resolve(L_parseErr)("No annotation name or data in annotation ")(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_name){return function(L_rest){return resolve(L_withCons)(L_rest)(function(){return resolve(L_parseErr)("No data for annotation ")(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_data){return function(L_rest_0){return (function(){

var L_finish;

L_finish = function(){return function(L_data_1){return function(L_body){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_nil)(L_body)(L_names)})(lazy(function(L_bodyAst){return resolve(L_cleanTokens)(L_start)(L_name)(lazy(function(L_name_2){return resolve(L_cleanTokens)(L_start)(L_data_1)(lazy(function(L_data_3){return resolve(L_anno)(L_name_2)(L_data_3)(L_bodyAst)}))}))}))}}};
return resolve(L_isTokenString)(L_data)(".")(function(){return resolve(L_finish)(L_nil)(L_rest_0)})(function(){return resolve(L_withStripped)(L_data)(lazy(function(L_data_1){return resolve(L_withCons)(L_rest_0)(function(){return resolve(L_parseErr)("No body for annotation ")(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_dot){return function(L_body){return resolve(L_isTokenString)(L_dot)(".")(function(){return resolve(L_finish)(L_data_1)(L_body)})(function(){return resolve(L_parseErr)("Annotation expects dot after name and data ")(function(){return resolve(L_loc)(L_start)})})}}))}))})})()}}))}}))}}}))},
  function(){return resolve(L_define)("bodyStructPat")(0)("bodyStructPat = regexp '\\\\|\\\\\\\\|\\\\@'")(function(){return resolve(L_regexp)("\\|\\\\|\\@")})},
  function(){return resolve(L_define)("createApply")(2)("createApply inList names = withStripped inList \\list .\n  withCons list (parseErr \"Funcion apply expecting a non-empty list \" (loc inList)) \\h t .\n    ifNotErr (createAst nil h names) \\func . chainApply func t names")(lazy(function(L_inList){return function(L_names){return resolve(L_withStripped)(L_inList)(lazy(function(L_list){return resolve(L_withCons)(L_list)(function(){return resolve(L_parseErr)("Funcion apply expecting a non-empty list ")(function(){return resolve(L_loc)(L_inList)})})(lazy(function(L_h){return function(L_t){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_nil)(L_h)(L_names)})(lazy(function(L_func){return resolve(L_chainApply)(L_func)(L_t)(L_names)}))}}))}))}}))},
  function(){return resolve(L_define)("blockStarts")(0)("blockStarts = cons '\\\\' (cons '\\\\\\\\' (cons '\\\\@' nil))")(function(){return resolve(L_cons)("\\")(function(){return resolve(L_cons)("\\\\")(function(){return resolve(L_cons)("\\@")(L_nil)})})})},
  function(){return resolve(L_define)("chainApply")(3)("chainApply func list names = withCons list func \\argItem rest .\n  and (isToken argItem) (contains blockStarts (tokenString argItem))\n    ifNotErr (createAst nil list names) \\arg . apply func arg\n    ifNotErr (createAst nil argItem names) \\arg . chainApply (apply func arg) rest names")(lazy(function(L_func){return function(L_list){return function(L_names){return resolve(L_withCons)(L_list)(L_func)(lazy(function(L_argItem){return function(L_rest){return resolve(L_and)(function(){return resolve(L_isToken)(L_argItem)})(function(){return resolve(L_contains)(L_blockStarts)(function(){return resolve(L_tokenString)(L_argItem)})})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_nil)(L_list)(L_names)})(lazy(function(L_arg){return resolve(L_apply)(L_func)(L_arg)}))})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_nil)(L_argItem)(L_names)})(lazy(function(L_arg){return resolve(L_chainApply)(function(){return resolve(L_apply)(L_func)(L_arg)})(L_rest)(L_names)}))})}}))}}}))},
  function(){return resolve(L_define)("cleanTokens")(3)("cleanTokens start toks cont = isToken toks\n  cont (tokenString toks)\n  withCons toks (cont toks) \\head tail .\n    cleanTokens start head \\head .\n      cleanTokens start tail \\tail .\n        cont (cons head tail)")(lazy(function(L_start){return function(L_toks){return function(L_cont){return resolve(L_isToken)(L_toks)(function(){return resolve(L_cont)(function(){return resolve(L_tokenString)(L_toks)})})(function(){return resolve(L_withCons)(L_toks)(function(){return resolve(L_cont)(L_toks)})(lazy(function(L_head){return function(L_tail){return resolve(L_cleanTokens)(L_start)(L_head)(lazy(function(L_head_0){return resolve(L_cleanTokens)(L_start)(L_tail)(lazy(function(L_tail_1){return resolve(L_cont)(function(){return resolve(L_cons)(L_head_0)(L_tail_1)})}))}))}}))})}}}))},
  function(){return resolve(L_define)("createLet")(3)("createLet start list names = withCons list\n  parseErr \"No variable or body for let \" (loc start)\n  \\binding body . eq body nil (createAst nil binding name)\n    ifNotErr (getLetNames start list names) \\newNames .\n      createSublets start binding body newNames")(lazy(function(L_start){return function(L_list){return function(L_names){return resolve(L_withCons)(L_list)(function(){return resolve(L_parseErr)("No variable or body for let ")(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_binding){return function(L_body){return resolve(L_eq)(L_body)(L_nil)(function(){return resolve(L_createAst)(L_nil)(L_binding)(L_name)})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_getLetNames)(L_start)(L_list)(L_names)})(lazy(function(L_newNames){return resolve(L_createSublets)(L_start)(L_binding)(L_body)(L_newNames)}))})}}))}}}))},
  function(){return resolve(L_define)("getLetNames")(3)("getLetNames start list names = \\\\\n  err = parseErr \"Let expected binding \" (loc start)\n  .\n  withCons list names \\binding body .\n    isTokenString binding '.' names\n      withParens binding err \\start end def .\n        withCons def err \\name rest .\n          withToken name err \\str pos .\n            getLetNames start body (cons str names)")(lazy(function(L_start){return function(L_list){return function(L_names){return (function(){

var L_err;

L_err = function(){return resolve(L_parseErr)("Let expected binding ")(function(){return resolve(L_loc)(L_start)})};
return resolve(L_withCons)(L_list)(L_names)(lazy(function(L_binding){return function(L_body){return resolve(L_isTokenString)(L_binding)(".")(L_names)(function(){return resolve(L_withParens)(L_binding)(L_err)(lazy(function(L_start_0){return function(L_end){return function(L_def){return resolve(L_withCons)(L_def)(L_err)(lazy(function(L_name){return function(L_rest){return resolve(L_withToken)(L_name)(L_err)(lazy(function(L_str){return function(L_pos){return resolve(L_getLetNames)(L_start_0)(L_body)(function(){return resolve(L_cons)(L_str)(L_names)})}}))}}))}}}))})}}))})()}}}))},
  function(){return resolve(L_define)("createSublets")(4)("createSublets start binding body names =\n  isTokenString binding '.' (createAst nil body names)\n    withCons body (parseErr \"Let expected a body \" (loc start)) \\bodyH bodyT .\n      ifNotErr (getNameAndDef (parensStart binding) (parensContent binding) names) \\res . res \\name def .\n        ifNotErr (createSublets start bodyH bodyT names) \\bodyAst .\n          let (tokenString name) def bodyAst")(lazy(function(L_start){return function(L_binding){return function(L_body){return function(L_names){return resolve(L_isTokenString)(L_binding)(".")(function(){return resolve(L_createAst)(L_nil)(L_body)(L_names)})(function(){return resolve(L_withCons)(L_body)(function(){return resolve(L_parseErr)("Let expected a body ")(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_bodyH){return function(L_bodyT){return resolve(L_ifNotErr)(function(){return resolve(L_getNameAndDef)(function(){return resolve(L_parensStart)(L_binding)})(function(){return resolve(L_parensContent)(L_binding)})(L_names)})(lazy(function(L_res){return resolve(L_res)(lazy(function(L_name){return function(L_def){return resolve(L_ifNotErr)(function(){return resolve(L_createSublets)(L_start)(L_bodyH)(L_bodyT)(L_names)})(lazy(function(L_bodyAst){return resolve(L_let)(function(){return resolve(L_tokenString)(L_name)})(L_def)(L_bodyAst)}))}}))}))}}))})}}}}))},
  function(){return resolve(L_define)("getNameAndDef")(3)("getNameAndDef pos binding names =\n  withCons (tail binding) (parseErr \"Let expected binding at \" pos) \\snd sndT .\n    isTokenString snd '=' (ifNotErr (createAst nil sndT names) \\def . cons (head binding) def)\n      ifNotErr (getLetLambda pos (tail binding) nil names) \\lamb . cons (head binding) lamb")(lazy(function(L_pos){return function(L_binding){return function(L_names){return resolve(L_withCons)(function(){return resolve(L_tail)(L_binding)})(function(){return resolve(L_parseErr)("Let expected binding at ")(L_pos)})(lazy(function(L_snd){return function(L_sndT){return resolve(L_isTokenString)(L_snd)("=")(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_nil)(L_sndT)(L_names)})(lazy(function(L_def){return resolve(L_cons)(function(){return resolve(L_head)(L_binding)})(L_def)}))})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_getLetLambda)(L_pos)(function(){return resolve(L_tail)(L_binding)})(L_nil)(L_names)})(lazy(function(L_lamb){return resolve(L_cons)(function(){return resolve(L_head)(L_binding)})(L_lamb)}))})}}))}}}))},
  function(){return resolve(L_define)("getLetLambda")(4)("getLetLambda pos def args names =\n  withCons def (parseErr \"Let expected binding at \" pos) \\arg rest .\n    not (isToken arg) (parseErr \"Let expected binding at \" pos)\n      isTokenString arg '='\n        createAst nil (cons (token '\\\\' pos) (append (reverse args) (cons (token '.' (position arg)) rest))) names\n        getLetLambda pos rest (cons arg args) names")(lazy(function(L_pos){return function(L_def){return function(L_args){return function(L_names){return resolve(L_withCons)(L_def)(function(){return resolve(L_parseErr)("Let expected binding at ")(L_pos)})(lazy(function(L_arg){return function(L_rest){return resolve(L_not)(function(){return resolve(L_isToken)(L_arg)})(function(){return resolve(L_parseErr)("Let expected binding at ")(L_pos)})(function(){return resolve(L_isTokenString)(L_arg)("=")(function(){return resolve(L_createAst)(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_token)("\\")(L_pos)})(function(){return resolve(L_append)(function(){return resolve(L_reverse)(L_args)})(function(){return resolve(L_cons)(function(){return resolve(L_token)(".")(function(){return resolve(L_position)(L_arg)})})(L_rest)})})})(L_names)})(function(){return resolve(L_getLetLambda)(L_pos)(L_rest)(function(){return resolve(L_cons)(L_arg)(L_args)})(L_names)})})}}))}}}}))},
  function(){return resolve(L_define)("scanLineG")(5)("scanLineG str pat groups onDef onExpr = \\\\\n  toks = tokens str pat\n  groupToks = foldr (\\el value . el \\h t . cons h (cons t value)) (cons '=' blockStarts) groups\n  .\n  # check if it's a definition\n  find (\\tok . or (contains groupToks (tokenString tok)) (isCons (strMatch (tokenString tok) '^\\r?\\n'))) toks (\\item . isTokenString item '=') false\n    toks \\name rest . \\\\\n      parseIt func = \\\\\n        parsed = parseToks (checkSetDataType func rest name) groups\n        .\n        onDef (ifNotErr parsed \\list . createDef list name (arity rest 0) str)\n      .\n      isTokenString (head rest) '='\n        isTokenString (head (tail rest)) '\\\\'\n          parseIt (setTypeAnno (tail rest) (tokenString name))\n          parseIt (tail rest)\n        ifNotErr (transformDef name rest) \\def .\n          parseIt (cons (token '\\\\' (- (position (head rest)) 1)) def)\n    ifNotErr (parseToks toks groups) \\list . onExpr list")(lazy(function(L_str){return function(L_pat){return function(L_groups){return function(L_onDef){return function(L_onExpr){return (function(){

var L_groupToks, L_toks;

L_toks = function(){return resolve(L_tokens)(L_str)(L_pat)};

L_groupToks = function(){return resolve(L_foldr)(lazy(function(L_el){return function(L_value){return resolve(L_el)(lazy(function(L_h){return function(L_t){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(L_t)(L_value)})}}))}}))(function(){return resolve(L_cons)("=")(L_blockStarts)})(L_groups)};
return resolve(L_find)(lazy(function(L_tok){return resolve(L_or)(function(){return resolve(L_contains)(L_groupToks)(function(){return resolve(L_tokenString)(L_tok)})})(function(){return resolve(L_isCons)(function(){return resolve(L_strMatch)(function(){return resolve(L_tokenString)(L_tok)})("^\r?\n")})})}))(L_toks)(lazy(function(L_item){return resolve(L_isTokenString)(L_item)("=")}))(L_false)(function(){return resolve(L_toks)(lazy(function(L_name){return function(L_rest){return (function(){

var L_parseIt;

L_parseIt = function(){return function(L_func){return (function(){

var L_parsed;

L_parsed = function(){return resolve(L_parseToks)(function(){return resolve(L_checkSetDataType)(L_func)(L_rest)(L_name)})(L_groups)};
return resolve(L_onDef)(function(){return resolve(L_ifNotErr)(L_parsed)(lazy(function(L_list){return resolve(L_createDef)(L_list)(L_name)(function(){return resolve(L_arity)(L_rest)(0)})(L_str)}))})})()}};
return resolve(L_isTokenString)(function(){return resolve(L_head)(L_rest)})("=")(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_rest)})})("\\")(function(){return resolve(L_parseIt)(function(){return resolve(L_setTypeAnno)(function(){return resolve(L_tail)(L_rest)})(function(){return resolve(L_tokenString)(L_name)})})})(function(){return resolve(L_parseIt)(function(){return resolve(L_tail)(L_rest)})})})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_transformDef)(L_name)(L_rest)})(lazy(function(L_def){return resolve(L_parseIt)(function(){return resolve(L_cons)(function(){return resolve(L_token)("\\")(function(){return resolve(L_$_)(function(){return resolve(L_position)(function(){return resolve(L_head)(L_rest)})})(1)})})(L_def)})}))})})()}}))})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseToks)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_onExpr)(L_list)}))})})()}}}}}))},
  function(){return resolve(L_define)("parseLineG")(6)("parseLineG str pat names groups onDef onExpr = \\\\\n  astCallback cb = \\list . ifNotErr (createAst nil list names) \\ast . cb ast\n  .\n  scanLineG str pat groups (astCallback onDef) (astCallback onExpr)")(lazy(function(L_str){return function(L_pat){return function(L_names){return function(L_groups){return function(L_onDef){return function(L_onExpr){return (function(){

var L_astCallback;

L_astCallback = function(){return function(L_cb){return function(L_list){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_nil)(L_list)(L_names)})(lazy(function(L_ast){return resolve(L_cb)(L_ast)}))}}};
return resolve(L_scanLineG)(L_str)(L_pat)(L_groups)(function(){return resolve(L_astCallback)(L_onDef)})(function(){return resolve(L_astCallback)(L_onExpr)})})()}}}}}}))},
  function(){return resolve(L_define)("transformDef")(2)("transformDef name toks = withCons toks (parseErr \"Bad definition, expecting tokens\" (loc name)) \\h t .\n  isTokenString h '='\n    isTokenString (head t) '\\\\'\n      cons (token '.' (position h)) (setTypeAnno t (tokenString name))\n      cons (token '.' (position h)) t\n    ifNotErr (transformDef name t) \\list . cons h list")(lazy(function(L_name){return function(L_toks){return resolve(L_withCons)(L_toks)(function(){return resolve(L_parseErr)("Bad definition, expecting tokens")(function(){return resolve(L_loc)(L_name)})})(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)("=")(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_t)})("\\")(function(){return resolve(L_cons)(function(){return resolve(L_token)(".")(function(){return resolve(L_position)(L_h)})})(function(){return resolve(L_setTypeAnno)(L_t)(function(){return resolve(L_tokenString)(L_name)})})})(function(){return resolve(L_cons)(function(){return resolve(L_token)(".")(function(){return resolve(L_position)(L_h)})})(L_t)})})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_transformDef)(L_name)(L_t)})(lazy(function(L_list){return resolve(L_cons)(L_h)(L_list)}))})}}))}}))},
  function(){return resolve(L_define)("setTypeAnno")(2)("setTypeAnno toks name = \\\\\n  tok = \\str . token str (position toks)\n  .\n  cons (tok '\\\\@') (cons (tok 'type') (cons (tok name) (cons (tok '.') toks)))")(lazy(function(L_toks){return function(L_name){return (function(){

var L_tok;

L_tok = function(){return function(L_str){return resolve(L_token)(L_str)(function(){return resolve(L_position)(L_toks)})}};
return resolve(L_cons)(function(){return resolve(L_tok)("\\@")})(function(){return resolve(L_cons)(function(){return resolve(L_tok)("type")})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(L_name)})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(".")})(L_toks)})})})})()}}))},
  function(){return resolve(L_define)("setDataTypeAnno")(2)("setDataTypeAnno toks name = \\\\\n  tok = \\str . token str (position toks)\n  .\n  cons (tok '\\\\@') (cons (tok 'dataType') (cons (tok (tokenString name)) (cons (tok '.') toks)))")(lazy(function(L_toks){return function(L_name){return (function(){

var L_tok;

L_tok = function(){return function(L_str){return resolve(L_token)(L_str)(function(){return resolve(L_position)(L_toks)})}};
return resolve(L_cons)(function(){return resolve(L_tok)("\\@")})(function(){return resolve(L_cons)(function(){return resolve(L_tok)("dataType")})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(function(){return resolve(L_tokenString)(L_name)})})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(".")})(L_toks)})})})})()}}))},
  function(){return resolve(L_define)("createDef")(4)("createDef def name arity src = \\\\\n  tok str = token str (position def)\n  .\n  jsonStringify (tokenString name) (\\err . parseErr (strCat (cons \"Bad function name \" (cons (loc name) nil))) err) \\nameStr .\n    jsonStringify src (\\err . parseErr (strCat (cons \"Bad source \" (cons (loc name) nil))) err) \\srcStr .\n      cons (tok 'define') (cons (tok nameStr) (cons (tok (strString arity)) (cons (tok srcStr) (cons def nil))))\n      #cons (tok '\\\\@') (cons (cons (tok 'definition') (cons (tok name) nil)) (cons (tok '.') (cons (tok 'define') (cons (tok nameStr) (cons (tok (strString arity)) (cons (tok srcStr) (cons def nil)))))))")(lazy(function(L_def){return function(L_name){return function(L_arity){return function(L_src){return (function(){

var L_tok;

L_tok = function(){return function(L_str){return resolve(L_token)(L_str)(function(){return resolve(L_position)(L_def)})}};
return resolve(L_jsonStringify)(function(){return resolve(L_tokenString)(L_name)})(lazy(function(L_err){return resolve(L_parseErr)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("Bad function name ")(function(){return resolve(L_cons)(function(){return resolve(L_loc)(L_name)})(L_nil)})})})(L_err)}))(lazy(function(L_nameStr){return resolve(L_jsonStringify)(L_src)(lazy(function(L_err){return resolve(L_parseErr)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("Bad source ")(function(){return resolve(L_cons)(function(){return resolve(L_loc)(L_name)})(L_nil)})})})(L_err)}))(lazy(function(L_srcStr){return resolve(L_cons)(function(){return resolve(L_tok)("define")})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(L_nameStr)})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(function(){return resolve(L_strString)(L_arity)})})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(L_srcStr)})(function(){return resolve(L_cons)(L_def)(L_nil)})})})})}))}))})()}}}}))},
  function(){return resolve(L_define)("checkSetDataType")(3)("checkSetDataType toks curToks name = withCons curToks toks \\h t .\n  isTokenString h '='\n    isTokenString (head t) '\\\\'\n      setDataTypeAnno toks name\n      toks\n    checkSetDataType toks t name")(lazy(function(L_toks){return function(L_curToks){return function(L_name){return resolve(L_withCons)(L_curToks)(L_toks)(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)("=")(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_t)})("\\")(function(){return resolve(L_setDataTypeAnno)(L_toks)(L_name)})(L_toks)})(function(){return resolve(L_checkSetDataType)(L_toks)(L_t)(L_name)})}}))}}}))},
  function(){return resolve(L_define)("arity")(2)("arity toks n = isTokenString (head toks) '=' n (arity (tail toks) (+ n 1))")(lazy(function(L_toks){return function(L_n){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_toks)})("=")(L_n)(function(){return resolve(L_arity)(function(){return resolve(L_tail)(L_toks)})(function(){return resolve(L_$o)(L_n)(1)})})}}))},
  function(){return resolve(L_define)("tokListStr")(1)("tokListStr toks = jsonStringify (join (map (\\t . tokenString t) toks) ' ')")(lazy(function(L_toks){return resolve(L_jsonStringify)(function(){return resolve(L_join)(function(){return resolve(L_map)(lazy(function(L_t){return resolve(L_tokenString)(L_t)}))(L_toks)})(" ")})}))},
  function(){return resolve(L_define)("linePat")(0)("linePat = regexp '\\\\r?\\\\n(?=[^ ]|$)'")(function(){return resolve(L_regexp)("\\r?\\n(?=[^ ]|$)")})},
  function(){return resolve(L_define)("emptyLinePat")(0)("emptyLinePat = regexp '(^[ \\\\i]*\\\\#.*|^[ \\\\i]*$|^\\\\r?\\\\n[ \\\\i]*$)'")(function(){return resolve(L_regexp)("(^[ \\i]*\\#.*|^[ \\i]*$|^\\r?\\n[ \\i]*$)")})},
  function(){return resolve(L_define)("lineScrub")(0)("lineScrub = regexpFlags '\\\\r\\\\n' 'g'")(function(){return resolve(L_regexpFlags)("\\r\\n")("g")})},
  function(){return resolve(L_define)("linesForFile")(1)("linesForFile text = map tail (countedLinesForFile text)")(lazy(function(L_text){return resolve(L_map)(L_tail)(function(){return resolve(L_countedLinesForFile)(L_text)})}))},
  function(){return resolve(L_define)("countedLinesForFile")(1)("countedLinesForFile text = filter\n  \\line . isNil (strMatch (tail line) emptyLinePat)\n  zip naturals (strSplit text linePat)")(lazy(function(L_text){return resolve(L_filter)(lazy(function(L_line){return resolve(L_isNil)(function(){return resolve(L_strMatch)(function(){return resolve(L_tail)(L_line)})(L_emptyLinePat)})}))(function(){return resolve(L_zip)(L_naturals)(function(){return resolve(L_strSplit)(L_text)(L_linePat)})})}))},
  function(){return resolve(L_define)("countedLines")(2)("countedLines offset str = \\\\\n  m = strMatch str linePat\n  idx = head (tail (tail m))\n  chunk = strSubstring str 0 idx\n  newlines = findLineEnds offset chunk\n  next = + idx (strLen (head m))\n  .\n  eq str ''\n    nil\n    isNil m\n      cons (cons str (cons offset (cons nil nil))) nil\n      cons (cons chunk (cons offset (cons newlines nil)))\n        countedLines (+ offset next) (strSubstring str next 0)")(lazy(function(L_offset){return function(L_str){return (function(){

var L_next, L_newlines, L_chunk, L_idx, L_m;

L_m = function(){return resolve(L_strMatch)(L_str)(L_linePat)};

L_idx = function(){return resolve(L_head)(function(){return resolve(L_tail)(function(){return resolve(L_tail)(L_m)})})};

L_chunk = function(){return resolve(L_strSubstring)(L_str)(0)(L_idx)};

L_newlines = function(){return resolve(L_findLineEnds)(L_offset)(L_chunk)};

L_next = function(){return resolve(L_$o)(L_idx)(function(){return resolve(L_strLen)(function(){return resolve(L_head)(L_m)})})};
return resolve(L_eq)(L_str)("")(L_nil)(function(){return resolve(L_isNil)(L_m)(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_str)(function(){return resolve(L_cons)(L_offset)(function(){return resolve(L_cons)(L_nil)(L_nil)})})})(L_nil)})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_chunk)(function(){return resolve(L_cons)(L_offset)(function(){return resolve(L_cons)(L_newlines)(L_nil)})})})(function(){return resolve(L_countedLines)(function(){return resolve(L_$o)(L_offset)(L_next)})(function(){return resolve(L_strSubstring)(L_str)(L_next)(0)})})})})})()}}))},
  function(){return resolve(L_define)("defPat")(0)("defPat = regexp '^[^ =]+.* =( |$)'")(function(){return resolve(L_regexp)("^[^ =]+.* =( |$)")})},
  function(){return resolve(L_define)("unanchoredDefPat")(0)("unanchoredDefPat = regexp '^((?:\\\\s*\\\\n|#[^\\\\n]*\\\\n)*)([^=\\\\n]*)(=\\\\([^=]+=|=)?'")(function(){return resolve(L_regexp)("^((?:\\s*\\n|#[^\\n]*\\n)*)([^=\\n]*)(=\\([^=]+=|=)?")})},
  function(){return resolve(L_define)("namesForLines")(1)("namesForLines lines = foldl\n  \\result line . \\\\\n    m = strMatch line defPat\n    .\n    isNil m result (cons (head (tail m)) result)\n  nil\n  lines")(lazy(function(L_lines){return resolve(L_foldl)(lazy(function(L_result){return function(L_line){return (function(){

var L_m;

L_m = function(){return resolve(L_strMatch)(L_line)(L_defPat)};
return resolve(L_isNil)(L_m)(L_result)(function(){return resolve(L_cons)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_m)})})(L_result)})})()}}))(L_nil)(L_lines)}))},
  function(){return resolve(L_define)("runParseFilters")(2)("runParseFilters filters line = filters\n  \\h t D . bind (h line) \\filtered . runParseFilters t filtered\n  line")(lazy(function(L_filters){return function(L_line){return resolve(L_filters)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_bind)(function(){return resolve(L_h)(L_line)})(lazy(function(L_filtered){return resolve(L_runParseFilters)(L_t)(L_filtered)}))}}}))(L_line)}}))},
  function(){return resolve(L_define)("isBlockStart")(1)("isBlockStart tok = and\n  or (isToken tok) (isString tok)\n  contains blockStarts (strTokenString tok)")(lazy(function(L_tok){return resolve(L_and)(function(){return resolve(L_or)(function(){return resolve(L_isToken)(L_tok)})(function(){return resolve(L_isString)(L_tok)})})(function(){return resolve(L_contains)(L_blockStarts)(function(){return resolve(L_strTokenString)(L_tok)})})}))},
  function(){return resolve(L_define)("macroSub")(2)("macroSub macs expr = postProcessMacro -1 -1 (baseMacroSub macs expr)")(lazy(function(L_macs){return function(L_expr){return resolve(L_postProcessMacro)(-1)(-1)(function(){return resolve(L_baseMacroSub)(L_macs)(L_expr)})}}))},
  function(){return resolve(L_define)("consifyMacroValue")(1)("consifyMacroValue value = isCons value value (cons value nil)")(lazy(function(L_value){return resolve(L_isCons)(L_value)(L_value)(function(){return resolve(L_cons)(L_value)(L_nil)})}))},
  function(){return resolve(L_define)("baseMacroSub")(2)("baseMacroSub macs expr = isToken expr\n  expr\n  isParens expr\n    expr \\start end content . \\\\\n      result = baseMacroSub macs content\n      .\n      isToken result result (parens start end result)\n    withCons expr expr \\h t .\n      isBlockStart h\n        cons h\n          isTokenString h '\\\\\\\\'\n            macroSubLet macs t\n            macroSubBody '.' macs t\n        withToken h\n          \\\\\n            subH = baseMacroSub macs h\n            .\n            withToken subH\n              cons subH (map (baseMacroSub macs) t)\n              \\tok pos . baseMacroSub macs (cons subH t)\n          \\tok pos . assoc tok macs\n            \\def . baseMacroSub macs (def t)\n            cons h (map (baseMacroSub macs) t)")(lazy(function(L_macs){return function(L_expr){return resolve(L_isToken)(L_expr)(L_expr)(function(){return resolve(L_isParens)(L_expr)(function(){return resolve(L_expr)(lazy(function(L_start){return function(L_end){return function(L_content){return (function(){

var L_result;

L_result = function(){return resolve(L_baseMacroSub)(L_macs)(L_content)};
return resolve(L_isToken)(L_result)(L_result)(function(){return resolve(L_parens)(L_start)(L_end)(L_result)})})()}}}))})(function(){return resolve(L_withCons)(L_expr)(L_expr)(lazy(function(L_h){return function(L_t){return resolve(L_isBlockStart)(L_h)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_isTokenString)(L_h)("\\\\")(function(){return resolve(L_macroSubLet)(L_macs)(L_t)})(function(){return resolve(L_macroSubBody)(".")(L_macs)(L_t)})})})(function(){return resolve(L_withToken)(L_h)(function(){
var L_subH;

L_subH = function(){return resolve(L_baseMacroSub)(L_macs)(L_h)};
return resolve(L_withToken)(L_subH)(function(){return resolve(L_cons)(L_subH)(function(){return resolve(L_map)(function(){return resolve(L_baseMacroSub)(L_macs)})(L_t)})})(lazy(function(L_tok){return function(L_pos){return resolve(L_baseMacroSub)(L_macs)(function(){return resolve(L_cons)(L_subH)(L_t)})}}))})(lazy(function(L_tok){return function(L_pos){return resolve(L_assoc)(L_tok)(L_macs)(lazy(function(L_def){return resolve(L_baseMacroSub)(L_macs)(function(){return resolve(L_def)(L_t)})}))(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_map)(function(){return resolve(L_baseMacroSub)(L_macs)})(L_t)})})}}))})}}))})})}}))},
  function(){return resolve(L_define)("macroSubLet")(2)("macroSubLet macs list = list\n  \\h t D . isTokenString h '.'\n    cons h (baseMacroSub macs t)\n    cons (setParens h \\content . macroSubBody '=' macs content) (macroSubLet macs t)\n  # Don't bother with parse errors at this point -- ast generator will detect them\n  nil")(lazy(function(L_macs){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)(".")(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_baseMacroSub)(L_macs)(L_t)})})(function(){return resolve(L_cons)(function(){return resolve(L_setParens)(L_h)(lazy(function(L_content){return resolve(L_macroSubBody)("=")(L_macs)(L_content)}))})(function(){return resolve(L_macroSubLet)(L_macs)(L_t)})})}}}))(L_nil)}}))},
  function(){return resolve(L_define)("macroSubBody")(3)("macroSubBody char macs list = list\n  \\h t D . cons h\n    isTokenString h char baseMacroSub (macroSubBody char)\n      macs\n      t\n  nil")(lazy(function(L_char){return function(L_macs){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_cons)(L_h)(function(){return resolve(L_isTokenString)(L_h)(L_char)(L_baseMacroSub)(function(){return resolve(L_macroSubBody)(L_char)})(L_macs)(L_t)})}}}))(L_nil)}}}))},
  function(){return resolve(L_define)("postProcessMacro")(3)("postProcessMacro before after expr = isString expr\n  token expr (eq after -1 before after)\n  isParens expr\n    expr \\start end contents . parens start end (postProcessMacro start end contents)\n    isCons expr\n      expr \\h t .\n        isToken h\n          cons h (postProcessMacro (+ 1 (+ (tokenPos h) (strLen (tokenString h)))) -1 t)\n          \\\\\n            posStart = position h\n            posEnd = position t\n            t2 = postProcessMacro -1 after t\n            h2 = postProcessMacro before -1 h\n            .\n            eq posStart -1\n              cons (postProcessMacro before (position t2) h) t2\n              cons h2 (postProcessMacro (+ 1 (lexEnd h2)) after t)\n      isNumber expr\n        token (strString expr) (eq after -1 before after)\n        expr")(lazy(function(L_before){return function(L_after){return function(L_expr){return resolve(L_isString)(L_expr)(function(){return resolve(L_token)(L_expr)(function(){return resolve(L_eq)(L_after)(-1)(L_before)(L_after)})})(function(){return resolve(L_isParens)(L_expr)(function(){return resolve(L_expr)(lazy(function(L_start){return function(L_end){return function(L_contents){return resolve(L_parens)(L_start)(L_end)(function(){return resolve(L_postProcessMacro)(L_start)(L_end)(L_contents)})}}}))})(function(){return resolve(L_isCons)(L_expr)(function(){return resolve(L_expr)(lazy(function(L_h){return function(L_t){return resolve(L_isToken)(L_h)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_postProcessMacro)(function(){return resolve(L_$o)(1)(function(){return resolve(L_$o)(function(){return resolve(L_tokenPos)(L_h)})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_h)})})})})(-1)(L_t)})})(function(){
var L_h2, L_t2, L_posEnd, L_posStart;

L_posStart = function(){return resolve(L_position)(L_h)};

L_posEnd = function(){return resolve(L_position)(L_t)};

L_t2 = function(){return resolve(L_postProcessMacro)(-1)(L_after)(L_t)};

L_h2 = function(){return resolve(L_postProcessMacro)(L_before)(-1)(L_h)};
return resolve(L_eq)(L_posStart)(-1)(function(){return resolve(L_cons)(function(){return resolve(L_postProcessMacro)(L_before)(function(){return resolve(L_position)(L_t2)})(L_h)})(L_t2)})(function(){return resolve(L_cons)(L_h2)(function(){return resolve(L_postProcessMacro)(function(){return resolve(L_$o)(1)(function(){return resolve(L_lexEnd)(L_h2)})})(L_after)(L_t)})})})}}))})(function(){return resolve(L_isNumber)(L_expr)(function(){return resolve(L_token)(function(){return resolve(L_strString)(L_expr)})(function(){return resolve(L_eq)(L_after)(-1)(L_before)(L_after)})})(L_expr)})})})}}}))},
  function(){return resolve(L_define)("defMacro")(2)("defMacro name def = bind (getValue 'macroDefs') \\macs . setValue 'macroDefs' (acons name def macs)")(lazy(function(L_name){return function(L_def){return resolve(L_bind)(function(){return resolve(L_getValue)("macroDefs")})(lazy(function(L_macs){return resolve(L_setValue)("macroDefs")(function(){return resolve(L_acons)(L_name)(L_def)(L_macs)})}))}}))},
  function(){return resolve(L_define)("delimiterListPrefix")(0)("delimiterListPrefix = \"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"|'(?:\\\\\\\\.|[^'])*'|\\\\r?\\\\n *|#.*| +\"")("\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\r?\\n *|#.*| +")},
  function(){return resolve(L_define)("regexpEscapePat")(0)("regexpEscapePat = regexpFlags '[\\\\-\\\\[\\\\]/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\\\^\\\\$\\\\|]' 'g'")(function(){return resolve(L_regexpFlags)("[\\-\\[\\]/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]")("g")})},
  function(){return resolve(L_define)("addToken")(1)("addToken del = bind (getValue 'tokenList')\n  \\dels . contains dels del\n    false\n    \\\\\n      newDels = insertSorted (\\a b . > (strLen a) (strLen b)) del dels\n      .\n      bind (setValue 'tokenList' newDels)\n        \\_ . computeTokenPat newDels")(lazy(function(L_del){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenList")})(lazy(function(L_dels){return resolve(L_contains)(L_dels)(L_del)(L_false)(function(){
var L_newDels;

L_newDels = function(){return resolve(L_insertSorted)(lazy(function(L_a){return function(L_b){return resolve(L_$z)(function(){return resolve(L_strLen)(L_a)})(function(){return resolve(L_strLen)(L_b)})}}))(L_del)(L_dels)};
return resolve(L_bind)(function(){return resolve(L_setValue)("tokenList")(L_newDels)})(lazy(function(L__){return resolve(L_computeTokenPat)(L_newDels)}))})}))}))},
  function(){return resolve(L_define)("computeTokenPat")(1)("computeTokenPat dels = \\\\\n  delPats = map (\\item . strReplace item regexpEscapePat \"\\\\$&\") dels\n  newPat = strCat (cons '(' (cons (join (cons delimiterListPrefix delPats) '|') (cons ')' nil)))\n  .\n  setValue 'tokenPat' newPat")(lazy(function(L_dels){return (function(){

var L_newPat, L_delPats;

L_delPats = function(){return resolve(L_map)(lazy(function(L_item){return resolve(L_strReplace)(L_item)(L_regexpEscapePat)("\\$&")}))(L_dels)};

L_newPat = function(){return resolve(L_strCat)(function(){return resolve(L_cons)("(")(function(){return resolve(L_cons)(function(){return resolve(L_join)(function(){return resolve(L_cons)(L_delimiterListPrefix)(L_delPats)})("|")})(function(){return resolve(L_cons)(")")(L_nil)})})})};
return resolve(L_setValue)("tokenPat")(L_newPat)})()}))},
  function(){return resolve(L_define)("addTokenGroup")(2)("addTokenGroup open close = bind (addToken open)\n  \\_ . bind (addToken close)\n    \\_ . bind (getValue 'tokenGroups')\n      \\gr . setValue 'tokenGroups' (acons open close gr)")(lazy(function(L_open){return function(L_close){return resolve(L_bind)(function(){return resolve(L_addToken)(L_open)})(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_addToken)(L_close)})(lazy(function(L___0){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenGroups")})(lazy(function(L_gr){return resolve(L_setValue)("tokenGroups")(function(){return resolve(L_acons)(L_open)(L_close)(L_gr)})}))}))}))}}))},
  function(){return resolve(L_define)("parenGroups")(0)("parenGroups = acons '(' ')' nil")(function(){return resolve(L_acons)("(")(")")(L_nil)})},
  function(){return resolve(L_define)("parse")(2)("parse str pat = ifNotErr (parseIndent (token '\\n' 0) (tokens str pat) nil parenGroups) \\list . list \\h t . stripParens h")(lazy(function(L_str){return function(L_pat){return resolve(L_ifNotErr)(function(){return resolve(L_parseIndent)(function(){return resolve(L_token)("\n")(0)})(function(){return resolve(L_tokens)(L_str)(L_pat)})(L_nil)(L_parenGroups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_stripParens)(L_h)}}))}))}}))},
  function(){return resolve(L_define)("parseG")(3)("parseG str pat groups = ifNotErr (parseIndent (token '\\n' 0) (tokens str pat) nil groups) \\list . list \\h t . stripParens h")(lazy(function(L_str){return function(L_pat){return function(L_groups){return resolve(L_ifNotErr)(function(){return resolve(L_parseIndent)(function(){return resolve(L_token)("\n")(0)})(function(){return resolve(L_tokens)(L_str)(L_pat)})(L_nil)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_stripParens)(L_h)}}))}))}}}))},
  function(){return resolve(L_define)("parseToAst")(2)("parseToAst str pat = createAst nil (parse str pat) nil")(lazy(function(L_str){return function(L_pat){return resolve(L_createAst)(L_nil)(function(){return resolve(L_parse)(L_str)(L_pat)})(L_nil)}}))},
  function(){return resolve(L_define)("parseM")(1)("parseM str =\n  bind (getValue 'tokenPat')\n    \\tokPat . bind (getValue 'tokenGroups')\n      \\groups . parseG str tokPat groups")(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenPat")})(lazy(function(L_tokPat){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenGroups")})(lazy(function(L_groups){return resolve(L_parseG)(L_str)(L_tokPat)(L_groups)}))}))}))},
  function(){return resolve(L_define)("scanLine")(4)("scanLine str pat onDef onExpr = scanLineG str pat parenGroups onDef onExpr")(lazy(function(L_str){return function(L_pat){return function(L_onDef){return function(L_onExpr){return resolve(L_scanLineG)(L_str)(L_pat)(L_parenGroups)(L_onDef)(L_onExpr)}}}}))},
  function(){return resolve(L_define)("parseLine")(5)("parseLine str pat names onDef onExpr = parseLineG str pat names parenGroups onDef onExpr")(lazy(function(L_str){return function(L_pat){return function(L_names){return function(L_onDef){return function(L_onExpr){return resolve(L_parseLineG)(L_str)(L_pat)(L_names)(L_parenGroups)(L_onDef)(L_onExpr)}}}}}))},
  function(){return resolve(L_define)("parseLineM")(1)("parseLineM str = bind (getValue 'tokenPat')\n  \\tokPat . bind (getValue 'tokenGroups')\n    \\groups . parseLineG str tokPat nil groups id id")(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenPat")})(lazy(function(L_tokPat){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenGroups")})(lazy(function(L_groups){return resolve(L_parseLineG)(L_str)(L_tokPat)(L_nil)(L_groups)(L_id)(L_id)}))}))}))},
  function(){return resolve(L_define)("macroSubM")(1)("macroSubM expr =\n  bind (getValue 'macroDefs')\n    \\macs . macroSub macs expr")(lazy(function(L_expr){return resolve(L_bind)(function(){return resolve(L_getValue)("macroDefs")})(lazy(function(L_macs){return resolve(L_macroSub)(L_macs)(L_expr)}))}))},
  function(){return resolve(L_define)("macroParse")(1)("macroParse str =\n  bind (parseM str)\n    \\ex . macroSubM ex")(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_parseM)(L_str)})(lazy(function(L_ex){return resolve(L_macroSubM)(L_ex)}))}))},
  function(){return resolve(L_define)("tokensM")(1)("tokensM str =\n  bind (getValue 'tokenPat')\n    \\delimiterPat . tokens str delimiterPat")(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenPat")})(lazy(function(L_delimiterPat){return resolve(L_tokens)(L_str)(L_delimiterPat)}))}))},
  function(){return resolve(L_define)("parseLines")(2)("parseLines lines result = lines\n  \\h t D . bind (parseLineM h)\n    \\ast . parseLines t (cons ast result)\n  reverse result")(lazy(function(L_lines){return function(L_result){return resolve(L_lines)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_bind)(function(){return resolve(L_parseLineM)(L_h)})(lazy(function(L_ast){return resolve(L_parseLines)(L_t)(function(){return resolve(L_cons)(L_ast)(L_result)})}))}}}))(function(){return resolve(L_reverse)(L_result)})}}))},
  function(){return resolve(L_define)("parseFile")(1)("parseFile text = parseLines (linesForFile text) nil")(lazy(function(L_text){return resolve(L_parseLines)(function(){return resolve(L_linesForFile)(L_text)})(L_nil)}))},
  function(){return resolve(L_define)("simpleScanLine")(1)("simpleScanLine line = bind (getValue 'tokenPat')\n  \\tokenPat . bind (getValue 'tokenGroups')\n    \\groups . scanLineG line tokenPat groups id id")(lazy(function(L_line){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenPat")})(lazy(function(L_tokenPat){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenGroups")})(lazy(function(L_groups){return resolve(L_scanLineG)(L_line)(L_tokenPat)(L_groups)(L_id)(L_id)}))}))}))},
  function(){return resolve(L_define)("scanLineM")(1)("scanLineM line = bind (getValue 'tokenPat')\n  \\tokenPat . bind (getValue 'tokenGroups')\n    \\groups . bind (getValue 'parseFilters')\n      \\filters . bind (getValue 'macroDefs')\n        \\macros . bind (runParseFilters filters (scanLineG line tokenPat groups id id))\n          \\scanned . macroSub macros scanned")(lazy(function(L_line){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenPat")})(lazy(function(L_tokenPat){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenGroups")})(lazy(function(L_groups){return resolve(L_bind)(function(){return resolve(L_getValue)("parseFilters")})(lazy(function(L_filters){return resolve(L_bind)(function(){return resolve(L_getValue)("macroDefs")})(lazy(function(L_macros){return resolve(L_bind)(function(){return resolve(L_runParseFilters)(L_filters)(function(){return resolve(L_scanLineG)(L_line)(L_tokenPat)(L_groups)(L_id)(L_id)})})(lazy(function(L_scanned){return resolve(L_macroSub)(L_macros)(L_scanned)}))}))}))}))}))}))},
  function(){return resolve(L_define)("newline")(0)("newline = regexp '\\\\r?\\\\n'")(function(){return resolve(L_regexp)("\\r?\\n")})},
  function(){return resolve(L_define)("findLineEnds")(2)("findLineEnds offset line = \\\\\n  m = strMatch line newline\n  idx = head (tail (tail m))\n  .\n  eq m nil\n    nil\n    cons (+ offset idx) (findLineEnds offset (strSubstring line (+ 1 idx) 0))")(lazy(function(L_offset){return function(L_line){return (function(){

var L_idx, L_m;

L_m = function(){return resolve(L_strMatch)(L_line)(L_newline)};

L_idx = function(){return resolve(L_head)(function(){return resolve(L_tail)(function(){return resolve(L_tail)(L_m)})})};
return resolve(L_eq)(L_m)(L_nil)(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_$o)(L_offset)(L_idx)})(function(){return resolve(L_findLineEnds)(L_offset)(function(){return resolve(L_strSubstring)(L_line)(function(){return resolve(L_$o)(1)(L_idx)})(0)})})})})()}}))},
  function(){return resolve(L_define)("newParseLine")(3)("newParseLine offset names line = bind (scanLineM line)\n  \\scanned . ifNotErr (createAst (findLineEnds offset line) scanned names) \\ast . ast")(lazy(function(L_offset){return function(L_names){return function(L_line){return resolve(L_bind)(function(){return resolve(L_scanLineM)(L_line)})(lazy(function(L_scanned){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(function(){return resolve(L_findLineEnds)(L_offset)(L_line)})(L_scanned)(L_names)})(lazy(function(L_ast){return resolve(L_ast)}))}))}}}))},
  function(){return resolve(L_define)("runLine")(3)("runLine offset names line = bind (newParseLine offset names line)\n  \\ast . bind (runAst ast)\n    \\result . cons\n      ast\n      isParseErr result\n        left (parseErrMsg result)\n        right result")(lazy(function(L_offset){return function(L_names){return function(L_line){return resolve(L_bind)(function(){return resolve(L_newParseLine)(L_offset)(L_names)(L_line)})(lazy(function(L_ast){return resolve(L_bind)(function(){return resolve(L_runAst)(L_ast)})(lazy(function(L_result){return resolve(L_cons)(L_ast)(function(){return resolve(L_isParseErr)(L_result)(function(){return resolve(L_left)(function(){return resolve(L_parseErrMsg)(L_result)})})(function(){return resolve(L_right)(L_result)})})}))}))}}}))},
  function(){return resolve(L_define)("runLines")(2)("runLines names lines = lines\n  \\h t D . bind (runLine 0 names (tail h))\n    \\line . bind (runLines names t)\n      \\rest . cons line rest\n  nil")(lazy(function(L_names){return function(L_lines){return resolve(L_lines)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_bind)(function(){return resolve(L_runLine)(0)(L_names)(function(){return resolve(L_tail)(L_h)})})(lazy(function(L_line){return resolve(L_bind)(function(){return resolve(L_runLines)(L_names)(L_t)})(lazy(function(L_rest){return resolve(L_cons)(L_line)(L_rest)}))}))}}}))(L_nil)}}))},
  function(){return resolve(L_define)("runFile")(1)("runFile text = \\\\\n  counted = countedLinesForFile text\n  lines = map tail counted\n  names = namesForLines lines\n  .\n  runLines names counted")(lazy(function(L_text){return (function(){

var L_names, L_lines, L_counted;

L_counted = function(){return resolve(L_countedLinesForFile)(L_text)};

L_lines = function(){return resolve(L_map)(L_tail)(L_counted)};

L_names = function(){return resolve(L_namesForLines)(L_lines)};
return resolve(L_runLines)(L_names)(L_counted)})()}))},
  function(){return resolve(L_define)("baseLoad")(1)("baseLoad file = bind (readFile file)\n  \\result . result\n    \\err . err\n    \\contents . bind (getValue 'activeTokenPacks')\n      \\activePacks . bind resetStdTokenPacks\n        \\_ . bind (runFile contents)\n          \\result . isNil activePacks\n            bind resetStdTokenPacks\n              \\_ . result\n            bind (resetTokenPacks activePacks)\n                \\_ . result")(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_readFile)(L_file)})(lazy(function(L_result){return resolve(L_result)(lazy(function(L_err){return resolve(L_err)}))(lazy(function(L_contents){return resolve(L_bind)(function(){return resolve(L_getValue)("activeTokenPacks")})(lazy(function(L_activePacks){return resolve(L_bind)(L_resetStdTokenPacks)(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_runFile)(L_contents)})(lazy(function(L_result_0){return resolve(L_isNil)(L_activePacks)(function(){return resolve(L_bind)(L_resetStdTokenPacks)(lazy(function(L___1){return resolve(L_result_0)}))})(function(){return resolve(L_bind)(function(){return resolve(L_resetTokenPacks)(L_activePacks)})(lazy(function(L___1){return resolve(L_result_0)}))})}))}))}))}))}))}))},
  function(){return resolve(L_define)("load")(1)("load file = bind (baseLoad file)\n  \\result . \\\\\n    errs = foldr (\\line results . tail line (\\er . cons er results) (\\x . results)) nil result\n    .\n    isNil errs\n      right true\n      left errs")(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_baseLoad)(L_file)})(lazy(function(L_result){return (function(){

var L_errs;

L_errs = function(){return resolve(L_foldr)(lazy(function(L_line){return function(L_results){return resolve(L_tail)(L_line)(lazy(function(L_er){return resolve(L_cons)(L_er)(L_results)}))(lazy(function(L_x){return resolve(L_results)}))}}))(L_nil)(L_result)};
return resolve(L_isNil)(L_errs)(function(){return resolve(L_right)(L_true)})(function(){return resolve(L_left)(L_errs)})})()}))}))},
  function(){return resolve(L_define)("require")(1)("require file = bind (getValue 'requiredFiles')\n  \\files . contains files file\n    right false\n    bind (setValue 'requiredFiles' (cons file files))\n      \\_. bind (load file)\n        \\result . result\n          \\x . left x\n          \\_ . right true")(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_getValue)("requiredFiles")})(lazy(function(L_files){return resolve(L_contains)(L_files)(L_file)(function(){return resolve(L_right)(L_false)})(function(){return resolve(L_bind)(function(){return resolve(L_setValue)("requiredFiles")(function(){return resolve(L_cons)(L_file)(L_files)})})(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_load)(L_file)})(lazy(function(L_result){return resolve(L_result)(lazy(function(L_x){return resolve(L_left)(L_x)}))(lazy(function(L___0){return resolve(L_right)(L_true)}))}))}))})}))}))},
  function(){return resolve(L_define)("defTokenPack")(2)("defTokenPack name pack = bind (getValue 'tokenPacks')\n  \\packs . setValue 'tokenPacks' (acons name pack packs)")(lazy(function(L_name){return function(L_pack){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenPacks")})(lazy(function(L_packs){return resolve(L_setValue)("tokenPacks")(function(){return resolve(L_acons)(L_name)(L_pack)(L_packs)})}))}}))},
  function(){return resolve(L_define)("useTokenPack")(1)("useTokenPack name = bind (getValue 'tokenPacks')\n  \\packs . bind (getValue 'tokenGroups')\n    \\groups . bind (getValue 'tokenList')\n      \\tokens . bind (getValue 'activeTokenPacks')\n        \\activePacks . bind (getValue 'parseFilters')\n          \\filters . assoc name packs\n            \\pack . \\\\\n              groupToks = foldl (\\value el . el \\h t . cons h (cons t value)) nil (head (tail pack))\n              newToks = quicksort (\\a b . > (strLen a) (strLen b)) (append (head pack) (append groupToks tokens))\n              .\n              bind (setValue 'tokenList' newToks)\n                \\_ . bind (setValue 'tokenGroups' (appendAlist (head (tail pack)) groups))\n                  \\_ . bind (setValue 'parseFilters' (append filters (head (tail (tail pack)))))\n                    \\_ . bind (computeTokenPat newToks)\n                      \\_ . setValue 'activeTokenPacks' (cons name activePacks)\n            nil")(lazy(function(L_name){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenPacks")})(lazy(function(L_packs){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenGroups")})(lazy(function(L_groups){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenList")})(lazy(function(L_tokens){return resolve(L_bind)(function(){return resolve(L_getValue)("activeTokenPacks")})(lazy(function(L_activePacks){return resolve(L_bind)(function(){return resolve(L_getValue)("parseFilters")})(lazy(function(L_filters){return resolve(L_assoc)(L_name)(L_packs)(lazy(function(L_pack){return (function(){

var L_newToks, L_groupToks;

L_groupToks = function(){return resolve(L_foldl)(lazy(function(L_value){return function(L_el){return resolve(L_el)(lazy(function(L_h){return function(L_t){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(L_t)(L_value)})}}))}}))(L_nil)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_pack)})})};

L_newToks = function(){return resolve(L_quicksort)(lazy(function(L_a){return function(L_b){return resolve(L_$z)(function(){return resolve(L_strLen)(L_a)})(function(){return resolve(L_strLen)(L_b)})}}))(function(){return resolve(L_append)(function(){return resolve(L_head)(L_pack)})(function(){return resolve(L_append)(L_groupToks)(L_tokens)})})};
return resolve(L_bind)(function(){return resolve(L_setValue)("tokenList")(L_newToks)})(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_setValue)("tokenGroups")(function(){return resolve(L_appendAlist)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_pack)})})(L_groups)})})(lazy(function(L___0){return resolve(L_bind)(function(){return resolve(L_setValue)("parseFilters")(function(){return resolve(L_append)(L_filters)(function(){return resolve(L_head)(function(){return resolve(L_tail)(function(){return resolve(L_tail)(L_pack)})})})})})(lazy(function(L___1){return resolve(L_bind)(function(){return resolve(L_computeTokenPat)(L_newToks)})(lazy(function(L___2){return resolve(L_setValue)("activeTokenPacks")(function(){return resolve(L_cons)(L_name)(L_activePacks)})}))}))}))}))})()}))(L_nil)}))}))}))}))}))}))},
  function(){return resolve(L_define)("resetTokenPacks")(1)("resetTokenPacks packs = bind (setValue 'tokenGroups' nil)\n  \\_ . bind (setValue 'tokenList' nil)\n    \\_ . bind (setValue 'activeTokenPacks' nil)\n      \\_ . bind (setValue 'parseFilters' nil)\n        \\_ . foldr1\n          \\packCmd result . bind packCmd \\_ . result\n          map useTokenPack packs")(lazy(function(L_packs){return resolve(L_bind)(function(){return resolve(L_setValue)("tokenGroups")(L_nil)})(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_setValue)("tokenList")(L_nil)})(lazy(function(L___0){return resolve(L_bind)(function(){return resolve(L_setValue)("activeTokenPacks")(L_nil)})(lazy(function(L___1){return resolve(L_bind)(function(){return resolve(L_setValue)("parseFilters")(L_nil)})(lazy(function(L___2){return resolve(L_foldr1)(lazy(function(L_packCmd){return function(L_result){return resolve(L_bind)(L_packCmd)(lazy(function(L___3){return resolve(L_result)}))}}))(function(){return resolve(L_map)(L_useTokenPack)(L_packs)})}))}))}))}))}))},
  function(){return resolve(L_define)("resetStdTokenPacks")(0)("resetStdTokenPacks = bind (getValue 'stdTokenPacks')\n  \\stds . bind (resetTokenPacks stds)\n    \\_ . setValue 'activeTokenPacks' nil")(function(){return resolve(L_bind)(function(){return resolve(L_getValue)("stdTokenPacks")})(lazy(function(L_stds){return resolve(L_bind)(function(){return resolve(L_resetTokenPacks)(L_stds)})(lazy(function(L__){return resolve(L_setValue)("activeTokenPacks")(L_nil)}))}))})},
  function(){return resolve(L_define)("addStdTokenPacks")(1)("addStdTokenPacks morePacks = bind (getValue 'stdTokenPacks')\n  \\stds . setValue 'stdTokenPacks' (append stds morePacks)")(lazy(function(L_morePacks){return resolve(L_bind)(function(){return resolve(L_getValue)("stdTokenPacks")})(lazy(function(L_stds){return resolve(L_setValue)("stdTokenPacks")(function(){return resolve(L_append)(L_stds)(L_morePacks)})}))}))},
  function(){return resolve(L_define)("addParseFilter")(1)("addParseFilter filt = bind (getValue 'parseFilters')\n  \\filters . setValue 'parseFilters' (append filters (cons filt nil))")(lazy(function(L_filt){return resolve(L_bind)(function(){return resolve(L_getValue)("parseFilters")})(lazy(function(L_filters){return resolve(L_setValue)("parseFilters")(function(){return resolve(L_append)(L_filters)(function(){return resolve(L_cons)(L_filt)(L_nil)})})}))}))},
  function(){return resolve(L_define)("d")(3)("d label value expr = log (strCat (cons label (cons value nil))) expr")(lazy(function(L_label){return function(L_value){return function(L_expr){return resolve(L_log)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_label)(function(){return resolve(L_cons)(L_value)(L_nil)})})})(L_expr)}}}))},
  function(){return resolve(L_define)("dd")(2)("dd label arg = d label arg arg")(lazy(function(L_label){return function(L_arg){return resolve(L_d)(L_label)(L_arg)(L_arg)}}))},
  function(){return resolve(L_setValue)("macroDefs")(L_nil)},
  function(){return resolve(L_setValue)("requiredFiles")(L_nil)},
  function(){return resolve(L_setValue)("tokenPacks")(L_nil)},
  function(){return resolve(L_setValue)("activeTokenPacks")(L_nil)},
  function(){return resolve(L_setValue)("stdTokenPacks")(function(){return resolve(L_cons)("std")(L_nil)})},
  function(){return resolve(L_defTokenPack)("std")(function(){return resolve(L_cons)(function(){return resolve(L_cons)(".")(function(){return resolve(L_cons)("\\")(function(){return resolve(L_cons)("\\\\")(function(){return resolve(L_cons)("\\@")(L_nil)})})})})(function(){return resolve(L_cons)(function(){return resolve(L_acons)("(")(")")(L_nil)})(function(){return resolve(L_cons)(L_nil)(L_nil)})})})},
  function(){return resolve(L_resetStdTokenPacks)},
  function(){return resolve(L_newGen)},
  function(){return resolve(L_addTokenGroup)("[")("]")},
  function(){return resolve(L_addToken)("|")},
  function(){return resolve(L_define)("listifyOp")(2)("listifyOp op list = list\r\n  \\h t D . isTokenString h '|'\r\n    cons t nil\r\n    cons (cons op (cons h (listifyOp op t))) nil\r\n  cons 'nil' nil")(lazy(function(L_op){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)("|")(function(){return resolve(L_cons)(L_t)(L_nil)})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_op)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_listifyOp)(L_op)(L_t)})})})(L_nil)})}}}))(function(){return resolve(L_cons)("nil")(L_nil)})}}))},
  function(){return resolve(L_define)("listify")(1)("listify list = listifyOp 'cons' list")(lazy(function(L_list){return resolve(L_listifyOp)("cons")(L_list)}))},
  function(){return resolve(L_defMacro)("[")(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_listify)(L_h)}}))}))},
  function(){return resolve(L_define)("listFilter")(1)("listFilter code = bind (getValue 'listMacros')\r\n  \\listMacros . filterApplies code \\list . list \\h t .\r\n    and (isToken h) (contains listMacros (tokenString h))\r\n      listFilterTail list\r\n      list")(lazy(function(L_code){return resolve(L_bind)(function(){return resolve(L_getValue)("listMacros")})(lazy(function(L_listMacros){return resolve(L_filterApplies)(L_code)(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_and)(function(){return resolve(L_isToken)(L_h)})(function(){return resolve(L_contains)(L_listMacros)(function(){return resolve(L_tokenString)(L_h)})})(function(){return resolve(L_listFilterTail)(L_list)})(L_list)}}))}))}))}))},
  function(){return resolve(L_define)("listFilterTail")(1)("listFilterTail list = list\r\n  \\h t D . isTokenString h '|'\r\n    > (length t) 2\r\n      cons h (cons (removeLast t) (cons (last t) nil))\r\n      list\r\n    cons h (listFilterTail t)\r\n  nil")(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)("|")(function(){return resolve(L_$z)(function(){return resolve(L_length)(L_t)})(2)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(function(){return resolve(L_removeLast)(L_t)})(function(){return resolve(L_cons)(function(){return resolve(L_last)(L_t)})(L_nil)})})})(L_list)})(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_listFilterTail)(L_t)})})}}}))(L_nil)}))},
  function(){return resolve(L_define)("filterApplies")(2)("filterApplies code func = isParens code\r\n  code \\start end contents . parens start end (filterApplies contents func)\r\n  isCons code\r\n    \\\\\r\n      filtered = filterApplyElements code func\r\n      .\r\n      and (isCons filtered) (isBlockStart (head filtered))\r\n        filtered\r\n        func filtered\r\n    code")(lazy(function(L_code){return function(L_func){return resolve(L_isParens)(L_code)(function(){return resolve(L_code)(lazy(function(L_start){return function(L_end){return function(L_contents){return resolve(L_parens)(L_start)(L_end)(function(){return resolve(L_filterApplies)(L_contents)(L_func)})}}}))})(function(){return resolve(L_isCons)(L_code)(function(){
var L_filtered;

L_filtered = function(){return resolve(L_filterApplyElements)(L_code)(L_func)};
return resolve(L_and)(function(){return resolve(L_isCons)(L_filtered)})(function(){return resolve(L_isBlockStart)(function(){return resolve(L_head)(L_filtered)})})(L_filtered)(function(){return resolve(L_func)(L_filtered)})})(L_code)})}}))},
  function(){return resolve(L_define)("filterApplyElements")(2)("filterApplyElements code func = code\r\n  \\h t D . isBlockStart h\r\n    cons h (filterBlock h t func)\r\n    cons (filterApplies h func)\r\n      and (isCons t) (isBlockStart (head t))\r\n        cons (filterApplyElements t func) nil\r\n        filterApplyElements t func\r\n  nil")(lazy(function(L_code){return function(L_func){return resolve(L_code)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isBlockStart)(L_h)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_filterBlock)(L_h)(L_t)(L_func)})})(function(){return resolve(L_cons)(function(){return resolve(L_filterApplies)(L_h)(L_func)})(function(){return resolve(L_and)(function(){return resolve(L_isCons)(L_t)})(function(){return resolve(L_isBlockStart)(function(){return resolve(L_head)(L_t)})})(function(){return resolve(L_cons)(function(){return resolve(L_filterApplyElements)(L_t)(L_func)})(L_nil)})(function(){return resolve(L_filterApplyElements)(L_t)(L_func)})})})}}}))(L_nil)}}))},
  function(){return resolve(L_define)("filterBlock")(3)("filterBlock type code func = isTokenString type '\\\\'\r\n  filterLambda code func\r\n  filterLet code func")(lazy(function(L_type){return function(L_code){return function(L_func){return resolve(L_isTokenString)(L_type)("\\")(function(){return resolve(L_filterLambda)(L_code)(L_func)})(function(){return resolve(L_filterLet)(L_code)(L_func)})}}}))},
  function(){return resolve(L_define)("filterLet")(2)("filterLet code func = code \\h t . isTokenString h '.'\r\n  cons h (filterApplies t func)\r\n  cons (filterLetBinding h func)\r\n    filterLet t func")(lazy(function(L_code){return function(L_func){return resolve(L_code)(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)(".")(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_filterApplies)(L_t)(L_func)})})(function(){return resolve(L_cons)(function(){return resolve(L_filterLetBinding)(L_h)(L_func)})(function(){return resolve(L_filterLet)(L_t)(L_func)})})}}))}}))},
  function(){return resolve(L_define)("filterLetBinding")(2)("filterLetBinding code func = isParens code\r\n  setParens code \\contents . filterLetBinding contents func\r\n  isCons code\r\n    code \\h t . cons h\r\n      isTokenString h '='\r\n        filterApplies t func\r\n        filterLetBinding t func\r\n    code")(lazy(function(L_code){return function(L_func){return resolve(L_isParens)(L_code)(function(){return resolve(L_setParens)(L_code)(lazy(function(L_contents){return resolve(L_filterLetBinding)(L_contents)(L_func)}))})(function(){return resolve(L_isCons)(L_code)(function(){return resolve(L_code)(lazy(function(L_h){return function(L_t){return resolve(L_cons)(L_h)(function(){return resolve(L_isTokenString)(L_h)("=")(function(){return resolve(L_filterApplies)(L_t)(L_func)})(function(){return resolve(L_filterLetBinding)(L_t)(L_func)})})}}))})(L_code)})}}))},
  function(){return resolve(L_define)("filterLambda")(2)("filterLambda code func = code \\h t . cons h\r\n  isTokenString h '.'\r\n    filterApplies t func\r\n    filterLambda t func")(lazy(function(L_code){return function(L_func){return resolve(L_code)(lazy(function(L_h){return function(L_t){return resolve(L_cons)(L_h)(function(){return resolve(L_isTokenString)(L_h)(".")(function(){return resolve(L_filterApplies)(L_t)(L_func)})(function(){return resolve(L_filterLambda)(L_t)(L_func)})})}}))}}))},
  function(){return resolve(L_setValue)("listMacros")(function(){return resolve(L_cons)("[")(function(){return resolve(L_cons)("{")(function(){return resolve(L_cons)("hamt{")(L_nil)})})})},
  function(){return resolve(L_addParseFilter)(L_listFilter)},
  function(){return resolve(L_addTokenGroup)("{")("}")},
  function(){return resolve(L_defMacro)("{")(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_listifyOp)("aconsPair")(L_h)}}))}))},
  function(){return resolve(L_addTokenGroup)("hamt{")("}")},
  function(){return resolve(L_defMacro)("hamt{")(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_hamtify)(L_h)}}))}))},
  function(){return resolve(L_define)("hamtWithPair")(2)("hamtWithPair pair t = hamtWith (head pair) (tail pair) t")(lazy(function(L_pair){return function(L_t){return resolve(L_hamtWith)(function(){return resolve(L_head)(L_pair)})(function(){return resolve(L_tail)(L_pair)})(L_t)}}))},
  function(){return resolve(L_define)("hamtify")(1)("hamtify list = list\r\n  \\h t D . isTokenString h '|'\r\n    cons t nil\r\n    and (isCons h) (or (isTokenString (head h) 'cons') (isTokenString (head h) ':'))\r\n      [['hamtWith' (head (tail h)) (head (tail (tail h))) | hamtify t]]\r\n      [['hamtWithPair' h | hamtify t]]\r\n  ['hamt']")(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)("|")(function(){return resolve(L_cons)(L_t)(L_nil)})(function(){return resolve(L_and)(function(){return resolve(L_isCons)(L_h)})(function(){return resolve(L_or)(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_h)})("cons")})(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_h)})(":")})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)("hamtWith")(function(){return resolve(L_cons)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_h)})})(function(){return resolve(L_cons)(function(){return resolve(L_head)(function(){return resolve(L_tail)(function(){return resolve(L_tail)(L_h)})})})(function(){return resolve(L_hamtify)(L_t)})})})})(L_nil)})(function(){return resolve(L_cons)(function(){return resolve(L_cons)("hamtWithPair")(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_hamtify)(L_t)})})})(L_nil)})})}}}))(function(){return resolve(L_cons)("hamt")(L_nil)})}))},
  function(){return resolve(L_defTokenPack)("list")(function(){return resolve(L_cons)(function(){return resolve(L_cons)("|")(function(){return resolve(L_cons)("=")(L_nil)})})(function(){return resolve(L_cons)(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("{")("}")})(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("hamt{")("}")})(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("[")("]")})(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("or[")("]")})(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("and[")("]")})(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("concat[")("]")})(function(){return resolve(L_aconsPair)(function(){return resolve(L_cons)("concatFlat[")("]")})(L_nil)})})})})})})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_listFilter)(L_nil)})(L_nil)})})})},
  function(){return resolve(L_addTokenGroup)("or[")("]")},
  function(){return resolve(L_addTokenGroup)("and[")("]")},
  function(){return resolve(L_addTokenGroup)("concat[")("]")},
  function(){return resolve(L_addTokenGroup)("concatFlat[")("]")},
  function(){return resolve(L_define)("listMacroFoldOp")(3)("listMacroFoldOp op emptyCase list = list \\h t . foldr\r\n    \\case result . [op case result]\r\n    emptyCase\r\n    h")(lazy(function(L_op){return function(L_emptyCase){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_foldr)(lazy(function(L_case){return function(L_result){return resolve(L_cons)(L_op)(function(){return resolve(L_cons)(L_case)(function(){return resolve(L_cons)(L_result)(L_nil)})})}}))(L_emptyCase)(L_h)}}))}}}))},
  function(){return resolve(L_defMacro)("or[")(lazy(function(L_list){return resolve(L_listMacroFoldOp)("or")("false")(L_list)}))},
  function(){return resolve(L_defMacro)("and[")(lazy(function(L_list){return resolve(L_listMacroFoldOp)("and")("true")(L_list)}))},
  function(){return resolve(L_defMacro)("concat[")(lazy(function(L_list){return resolve(L_cons)("strCat")(function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_listify)(function(){return resolve(L_head)(L_list)})})(L_nil)})(L_nil)})}))},
  function(){return resolve(L_defMacro)("concatFlat[")(lazy(function(L_list){return resolve(L_cons)("strCat")(function(){return resolve(L_cons)(function(){return resolve(L_cons)("flatten")(function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_listify)(function(){return resolve(L_head)(L_list)})})(L_nil)})(L_nil)})})(L_nil)})}))},
  function(){return resolve(L_bind)(function(){return resolve(L_getValue)("listMacros")})(lazy(function(L_lm){return resolve(L_cons)("concat[")(L_lm)}))},
  function(){return resolve(L_define)("infix")(1)("infix code = bind (getValue 'infixPrecedence')\r\n  \\prec . bind (getValue 'infixRightAssociative')\r\n    \\right . bind (getValue 'tokenGroups')\r\n      \\groups . filterApplies\r\n        code\r\n        \\expr . infixRearrange prec right (map (\\cell . tail cell) groups) expr")(lazy(function(L_code){return resolve(L_bind)(function(){return resolve(L_getValue)("infixPrecedence")})(lazy(function(L_prec){return resolve(L_bind)(function(){return resolve(L_getValue)("infixRightAssociative")})(lazy(function(L_right){return resolve(L_bind)(function(){return resolve(L_getValue)("tokenGroups")})(lazy(function(L_groups){return resolve(L_filterApplies)(L_code)(lazy(function(L_expr){return resolve(L_infixRearrange)(L_prec)(L_right)(function(){return resolve(L_map)(lazy(function(L_cell){return resolve(L_tail)(L_cell)}))(L_groups)})(L_expr)}))}))}))}))}))},
  function(){return resolve(L_define)("infixRearrange")(4)("infixRearrange prec right closes list = \\\\\r\n  len = length list\r\n  head1 = head list\r\n  tail1 = tail list\r\n  head2 = head tail1\r\n  tail2 = tail tail1\r\n  head3 = head tail2\r\n  opPrec = getPrec prec head2\r\n  .\r\n  < len 2\r\n    list\r\n    isInfix opPrec head1 head2 len\r\n      or (== len 2) (not (isInfixArg closes head3))\r\n        [[head2 head1] | tail2]\r\n        infixRearrange prec right closes (absorbArgument opPrec prec right closes head1 head2 tail2 head3 (- len 2))\r\n      [head1 | infixRearrange prec right closes tail1]")(lazy(function(L_prec){return function(L_right){return function(L_closes){return function(L_list){return (function(){

var L_opPrec, L_head3, L_tail2, L_head2, L_tail1, L_head1, L_len;

L_len = function(){return resolve(L_length)(L_list)};

L_head1 = function(){return resolve(L_head)(L_list)};

L_tail1 = function(){return resolve(L_tail)(L_list)};

L_head2 = function(){return resolve(L_head)(L_tail1)};

L_tail2 = function(){return resolve(L_tail)(L_tail1)};

L_head3 = function(){return resolve(L_head)(L_tail2)};

L_opPrec = function(){return resolve(L_getPrec)(L_prec)(L_head2)};
return resolve(L_$y)(L_len)(2)(L_list)(function(){return resolve(L_isInfix)(L_opPrec)(L_head1)(L_head2)(L_len)(function(){return resolve(L_or)(function(){return resolve(L_$p$p)(L_len)(2)})(function(){return resolve(L_not)(function(){return resolve(L_isInfixArg)(L_closes)(L_head3)})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_head2)(function(){return resolve(L_cons)(L_head1)(L_nil)})})(L_tail2)})(function(){return resolve(L_infixRearrange)(L_prec)(L_right)(L_closes)(function(){return resolve(L_absorbArgument)(L_opPrec)(L_prec)(L_right)(L_closes)(L_head1)(L_head2)(L_tail2)(L_head3)(function(){return resolve(L_$_)(L_len)(2)})})})})(function(){return resolve(L_cons)(L_head1)(function(){return resolve(L_infixRearrange)(L_prec)(L_right)(L_closes)(L_tail1)})})})})()}}}}))},
  function(){return resolve(L_define)("absorbArgument")(9)("absorbArgument opPrec prec right closes head1 head2 tail2 head3 len = \\\\\r\n  tail3 = tail tail2\r\n  head4 = head tail3\r\n  tail4 = tail tail3\r\n  head5 = head tail4\r\n  .\r\n  infixShouldEatNext opPrec prec (contains right (strTokenString head2)) head3 head4 head5 closes len\r\n    [head1 head2 | absorbArgument (getPrec prec head4) prec right closes head3 head4 tail4 head5 (- len 2)]\r\n    [[head2 head1 head3] | tail3]")(lazy(function(L_opPrec){return function(L_prec){return function(L_right){return function(L_closes){return function(L_head1){return function(L_head2){return function(L_tail2){return function(L_head3){return function(L_len){return (function(){

var L_head5, L_tail4, L_head4, L_tail3;

L_tail3 = function(){return resolve(L_tail)(L_tail2)};

L_head4 = function(){return resolve(L_head)(L_tail3)};

L_tail4 = function(){return resolve(L_tail)(L_tail3)};

L_head5 = function(){return resolve(L_head)(L_tail4)};
return resolve(L_infixShouldEatNext)(L_opPrec)(L_prec)(function(){return resolve(L_contains)(L_right)(function(){return resolve(L_strTokenString)(L_head2)})})(L_head3)(L_head4)(L_head5)(L_closes)(L_len)(function(){return resolve(L_cons)(L_head1)(function(){return resolve(L_cons)(L_head2)(function(){return resolve(L_absorbArgument)(function(){return resolve(L_getPrec)(L_prec)(L_head4)})(L_prec)(L_right)(L_closes)(L_head3)(L_head4)(L_tail4)(L_head5)(function(){return resolve(L_$_)(L_len)(2)})})})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_head2)(function(){return resolve(L_cons)(L_head1)(function(){return resolve(L_cons)(L_head3)(L_nil)})})})(L_tail3)})})()}}}}}}}}}))},
  function(){return resolve(L_define)("isInfixArg")(2)("isInfixArg closes item = or[\r\n  isParens item\r\n  isCons item\r\n  and[\r\n    isToken item\r\n    not (contains closes (tokenString item))\r\n    not (isBlockStart item)]]")(lazy(function(L_closes){return function(L_item){return resolve(L_or)(function(){return resolve(L_isParens)(L_item)})(function(){return resolve(L_or)(function(){return resolve(L_isCons)(L_item)})(function(){return resolve(L_or)(function(){return resolve(L_and)(function(){return resolve(L_isToken)(L_item)})(function(){return resolve(L_and)(function(){return resolve(L_not)(function(){return resolve(L_contains)(L_closes)(function(){return resolve(L_tokenString)(L_item)})})})(function(){return resolve(L_and)(function(){return resolve(L_not)(function(){return resolve(L_isBlockStart)(L_item)})})(L_true)})})})(L_false)})})}}))},
  function(){return resolve(L_define)("isInfix")(4)("isInfix opPrec head1 head2 len = and[\r\n  > len 1\r\n  > opPrec -1\r\n  isInfixArg nil head1]")(lazy(function(L_opPrec){return function(L_head1){return function(L_head2){return function(L_len){return resolve(L_and)(function(){return resolve(L_$z)(L_len)(1)})(function(){return resolve(L_and)(function(){return resolve(L_$z)(L_opPrec)(-1)})(function(){return resolve(L_and)(function(){return resolve(L_isInfixArg)(L_nil)(L_head1)})(L_true)})})}}}}))},
  function(){return resolve(L_define)("getPrec")(2)("getPrec prec token = \\\\\r\n  str = tokenString token\r\n  .\r\n  isToken token\r\n    findIndex (\\level . contains level str) prec\r\n    -1")(lazy(function(L_prec){return function(L_token){return (function(){

var L_str;

L_str = function(){return resolve(L_tokenString)(L_token)};
return resolve(L_isToken)(L_token)(function(){return resolve(L_findIndex)(lazy(function(L_level){return resolve(L_contains)(L_level)(L_str)}))(L_prec)})(-1)})()}}))},
  function(){return resolve(L_define)("infixShouldEatNext")(8)("infixShouldEatNext opPrec prec isRight curArg nextOp nextArg closes len = \\\\\r\n  nextPrec = getPrec prec nextOp\r\n  .\r\n  and[\r\n    > len 2\r\n    isInfix nextPrec curArg nextOp len\r\n    or (> opPrec nextPrec) (and (== opPrec nextPrec) isRight)\r\n    isInfixArg closes nextArg]")(lazy(function(L_opPrec){return function(L_prec){return function(L_isRight){return function(L_curArg){return function(L_nextOp){return function(L_nextArg){return function(L_closes){return function(L_len){return (function(){

var L_nextPrec;

L_nextPrec = function(){return resolve(L_getPrec)(L_prec)(L_nextOp)};
return resolve(L_and)(function(){return resolve(L_$z)(L_len)(2)})(function(){return resolve(L_and)(function(){return resolve(L_isInfix)(L_nextPrec)(L_curArg)(L_nextOp)(L_len)})(function(){return resolve(L_and)(function(){return resolve(L_or)(function(){return resolve(L_$z)(L_opPrec)(L_nextPrec)})(function(){return resolve(L_and)(function(){return resolve(L_$p$p)(L_opPrec)(L_nextPrec)})(L_isRight)})})(function(){return resolve(L_and)(function(){return resolve(L_isInfixArg)(L_closes)(L_nextArg)})(L_true)})})})})()}}}}}}}}))},
  function(){return resolve(L_defMacro)(":")(lazy(function(L_list){return resolve(L_cons)("cons")(L_list)}))},
  function(){return resolve(L_define)("iprec")(0)("iprec = [['*' '/' '%'] ['+' '-'] [':'] ['<' '>' '<=' '>='] ['==' '!=']]")(function(){return resolve(L_cons)(function(){return resolve(L_cons)("*")(function(){return resolve(L_cons)("/")(function(){return resolve(L_cons)("%")(L_nil)})})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)("+")(function(){return resolve(L_cons)("-")(L_nil)})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(":")(L_nil)})(function(){return resolve(L_cons)(function(){return resolve(L_cons)("<")(function(){return resolve(L_cons)(">")(function(){return resolve(L_cons)("<=")(function(){return resolve(L_cons)(">=")(L_nil)})})})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)("==")(function(){return resolve(L_cons)("!=")(L_nil)})})(L_nil)})})})})})},
  function(){return resolve(L_define)("rightAssoc")(0)("rightAssoc = [':']")(function(){return resolve(L_cons)(":")(L_nil)})},
  function(){return resolve(L_setValue)("infixPrecedence")(L_iprec)},
  function(){return resolve(L_setValue)("infixRightAssociative")(L_rightAssoc)},
  function(){return resolve(L_defTokenPack)("infix")(function(){return resolve(L_cons)(function(){return resolve(L_flatten)(L_iprec)})(function(){return resolve(L_cons)(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_infix)(L_nil)})(L_nil)})})})},
  function(){return resolve(L_useTokenPack)("infix")},
  function(){return resolve(L_defMacro)("do")(lazy(function(L_list){return resolve(L_handleDo)(L_list)(L_false)(L_id)}))},
  function(){return resolve(L_define)("handleDo")(3)("handleDo list inLet cont = list\r\n  \\h t D . isNil t\r\n    cont (inLet ['.' h] [h])\r\n    doClause (stripParens h) h nil inLet \\newInLet chain .\r\n      handleDo t newInLet \\rest . cont (chain rest)\r\n  cont nil")(lazy(function(L_list){return function(L_inLet){return function(L_cont){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isNil)(L_t)(function(){return resolve(L_cont)(function(){return resolve(L_inLet)(function(){return resolve(L_cons)(".")(function(){return resolve(L_cons)(L_h)(L_nil)})})(function(){return resolve(L_cons)(L_h)(L_nil)})})})(function(){return resolve(L_doClause)(function(){return resolve(L_stripParens)(L_h)})(L_h)(L_nil)(L_inLet)(lazy(function(L_newInLet){return function(L_chain){return resolve(L_handleDo)(L_t)(L_newInLet)(lazy(function(L_rest){return resolve(L_cont)(function(){return resolve(L_chain)(L_rest)})}))}}))})}}}))(function(){return resolve(L_cont)(L_nil)})}}}))},
  function(){return resolve(L_define)("doClause")(5)("doClause steppingClause clause prefix inLet cont = \\\\\r\n  makeBind var monad = cont false \\rest . inLet (cons '.') id\r\n    ['bind' monad ['\\\\' var '.' | rest]]\r\n  .\r\n  isCons steppingClause\r\n    steppingClause \\h t . isTokenString h '='\r\n      inLet\r\n        cont true \\rest . [clause | rest]\r\n        cont true \\rest . ['\\\\\\\\' clause | rest]\r\n      isTokenString h '<-'\r\n        isNil t\r\n          parseErr \"No monad in do-clause: \" clause\r\n          prefix\r\n            \\ph pt D . isNil pt\r\n              makeBind (isNil prefix '_' (head prefix)) t\r\n              parseErr \"More than one variable in do-clause: \" clause\r\n            makeBind '_' t\r\n        doClause t clause [h | prefix] inLet cont\r\n    makeBind '_' clause")(lazy(function(L_steppingClause){return function(L_clause){return function(L_prefix){return function(L_inLet){return function(L_cont){return (function(){

var L_makeBind;

L_makeBind = function(){return function(L_var){return function(L_monad){return resolve(L_cont)(L_false)(lazy(function(L_rest){return resolve(L_inLet)(function(){return resolve(L_cons)(".")})(L_id)(function(){return resolve(L_cons)("bind")(function(){return resolve(L_cons)(L_monad)(function(){return resolve(L_cons)(function(){return resolve(L_cons)("\\")(function(){return resolve(L_cons)(L_var)(function(){return resolve(L_cons)(".")(L_rest)})})})(L_nil)})})})}))}}};
return resolve(L_isCons)(L_steppingClause)(function(){return resolve(L_steppingClause)(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)("=")(function(){return resolve(L_inLet)(function(){return resolve(L_cont)(L_true)(lazy(function(L_rest){return resolve(L_cons)(L_clause)(L_rest)}))})(function(){return resolve(L_cont)(L_true)(lazy(function(L_rest){return resolve(L_cons)("\\\\")(function(){return resolve(L_cons)(L_clause)(L_rest)})}))})})(function(){return resolve(L_isTokenString)(L_h)("<-")(function(){return resolve(L_isNil)(L_t)(function(){return resolve(L_parseErr)("No monad in do-clause: ")(L_clause)})(function(){return resolve(L_prefix)(lazy(function(L_ph){return function(L_pt){return function(L_D){return resolve(L_isNil)(L_pt)(function(){return resolve(L_makeBind)(function(){return resolve(L_isNil)(L_prefix)("_")(function(){return resolve(L_head)(L_prefix)})})(L_t)})(function(){return resolve(L_parseErr)("More than one variable in do-clause: ")(L_clause)})}}}))(function(){return resolve(L_makeBind)("_")(L_t)})})})(function(){return resolve(L_doClause)(L_t)(L_clause)(function(){return resolve(L_cons)(L_h)(L_prefix)})(L_inLet)(L_cont)})})}}))})(function(){return resolve(L_makeBind)("_")(L_clause)})})()}}}}}))},
  function(){return resolve(L_defTokenPack)("do")(function(){return resolve(L_cons)(function(){return resolve(L_cons)("<-")(L_nil)})(function(){return resolve(L_cons)(L_nil)(function(){return resolve(L_cons)(L_nil)(L_nil)})})})},
  function(){return resolve(L_addStdTokenPacks)(function(){return resolve(L_cons)("list")(function(){return resolve(L_cons)("infix")(function(){return resolve(L_cons)("do")(L_nil)})})})},
  function(){return resolve(L_resetStdTokenPacks)}]);

},{}],6:[function(require,module,exports){
(function(global){/*!
 Lo-Dash 0.7.0 lodash.com/license
 Underscore.js 1.3.3 github.com/documentcloud/underscore/blob/master/LICENSE
*/
;(function(e,t){function s(e){return new o(e)}function o(e){if(e&&e.__wrapped__)return e;this.__wrapped__=e}function u(e,t){return function(n,r,i){return e.call(t,n,r,i)}}function a(e,t,n){t||(t=0);var r=e.length,i=r-t>=(n||W),s=i?{}:e;if(i)for(var o=t-1;++o<r;)n=e[o]+"",(at.call(s,n)?s[n]:s[n]=[]).push(e[o]);return function(e){if(i){var n=e+"";return at.call(s,n)&&-1<L(s[n],e)}return-1<L(s,e,t)}}function f(e,n){var r=e.b,i=n.b,e=e.a,n=n.a;if(e!==n){if(e>n||e===t)return 1;if(e<n||n===t)return-1}return r<
i?-1:1}function l(e,t,n){function r(){var u=arguments,a=s?this:t;return i||(e=t[o]),n.length&&(u=u.length?n.concat(ct.call(u)):n),this instanceof r?(v.prototype=e.prototype,a=new v,(u=e.apply(a,u))&&$t[typeof u]?u:a):e.apply(a,u)}var i=E(e),s=!n,o=e;return s&&(n=t),r}function c(){for(var e,t,n,s=-1,o=arguments.length,a={e:"",f:"",j:"",q:"",c:{d:""},m:{d:""}};++s<o;)for(t in e=arguments[s],e)n=(n=e[t])==r?"":n,/d|i/.test(t)?("string"==typeof n&&(n={b:n,l:n}),a.c[t]=n.b||"",a.m[t]=n.l||""):a[t]=n;e=
a.a,t=/^[^,]+/.exec(e)[0],n=a.s,a.g=t,a.h=Mt,a.k=Rt,a.n=Pt,a.p=rt,a.r=a.r!==i,a.s=n==r?Ut:n,a.o==r&&(a.o=jt),a.f||(a.f="if(!"+t+")return u");if("e"!=t||!a.c.i)a.c=r;t="",a.s&&(t+="'use strict';"),t+="var j,A,k="+a.g+",u",a.j&&(t+="="+a.j),t+=";"+a.f+";"+a.q+";",a.c&&(t+="var l=k.length;j=-1;",a.m&&(t+="if(l===+l){"),a.o&&(t+="if(z.call(k)==x){k=k.split('')}"),t+=a.c.d+";while(++j<l){A=k[j];"+a.c.i+"}",a.m&&(t+="}"));if(a.m){a.c?t+="else{":a.n&&(t+="var l=k.length;j=-1;if(l&&O(k)){while(++j<l){A=k[j+=''];"+
a.m.i+"}}else{"),a.h||(t+="var v=typeof k=='function'&&r.call(k,'prototype');");if(a.k&&a.r)t+="var o=-1,p=X[typeof k]?m(k):[],l=p.length;"+a.m.d+";while(++o<l){j=p[o];",a.h||(t+="if(!(v&&j=='prototype')){"),t+="A=k[j];"+a.m.i+"",a.h||(t+="}");else{t+=a.m.d+";for(j in k){";if(!a.h||a.r)t+="if(",a.h||(t+="!(v&&j=='prototype')"),!a.h&&a.r&&(t+="&&"),a.r&&(t+="h.call(k,j)"),t+="){";t+="A=k[j];"+a.m.i+";";if(!a.h||a.r)t+="}"}t+="}";if(a.h){t+="var g=k.constructor;";for(n=0;7>n;n++)t+="j='"+a.p[n]+"';if("
,"constructor"==a.p[n]&&(t+="!(g&&g.prototype===k)&&"),t+="h.call(k,j)){A=k[j];"+a.m.i+"}"}if(a.c||a.n)t+="}"}return t+=a.e+";return u",Function("D,E,F,c,I,f,J,h,i,M,O,Q,S,T,W,X,m,r,w,x,z","var G=function("+e+"){"+t+"};return G")(zt,R,D,u,f,ut,ln,at,P,L,w,sn,E,on,Ct,$t,gt,lt,ct,Lt,ht)}function h(e,t){return ot[t]}function p(e){return"\\"+Jt[e]}function d(e){return Xt[e]}function v(){}function m(e,t){if(e&&V.test(t))return"<e%-"+t+"%>";var n=ot.length;return ot[n]="'+__e("+t+")+'",it+n+st}function g
(e,t,n,i){return i?(e=ot.length,ot[e]="';"+i+";__p+='",it+e+st):t?m(r,t):y(r,n)}function y(e,t){if(e&&V.test(t))return"<e%="+t+"%>";var n=ot.length;return ot[n]="'+((__t=("+t+"))==null?'':__t)+'",it+n+st}function b(e){return Vt[e]}function w(e){return ht.call(e)==Et}function E(e){return"function"==typeof e}function S(e,t){var n=i;if(!e||"object"!=typeof e||!t&&w(e))return n;var r=e.constructor;return(!Ft||"function"==typeof e.toString||"string"!=typeof (e+""))&&(!E(r)||r instanceof r)?Dt?(ln(e,function(
e,t,r){return n=!at.call(r,t),i}),n===i):(ln(e,function(e,t){n=t}),n===i||at.call(e,n)):n}function x(e,t,s,o,u){if(e==r)return e;s&&(t=i);if(s=$t[typeof e]){var a=ht.call(e);if(!Wt[a]||Ht&&w(e))return e;var f=a==St,s=f||(a==Ct?on(e,n):s)}if(!s||!t)return s?f?ct.call(e):fn({},e):e;s=e.constructor;switch(a){case xt:return new s(e==n);case Tt:return new s(+e);case Nt:case Lt:return new s(e);case kt:return s(e.source,G.exec(e))}o||(o=[]),u||(u=[]);for(a=o.length;a--;)if(o[a]==e)return u[a];var l=f?s(
a=e.length):{};o.push(e),u.push(l);if(f)for(f=-1;++f<a;)l[f]=x(e[f],t,r,o,u);else cn(e,function(e,n){l[n]=x(e,t,r,o,u)});return l}function T(e,t,s,o){if(e==r||t==r)return e===t;if(e===t)return 0!==e||1/e==1/t;if($t[typeof e]||$t[typeof t])e=e.__wrapped__||e,t=t.__wrapped__||t;var u=ht.call(e);if(u!=ht.call(t))return i;switch(u){case xt:case Tt:return+e==+t;case Nt:return e!=+e?t!=+t:0==e?1/e==1/t:e==+t;case kt:case Lt:return e==t+""}var a=zt[u];if(Ht&&!a&&(a=w(e))&&!w(t)||!a&&(u!=Ct||Ft&&("function"!=typeof 
e.toString&&"string"==typeof (e+"")||"function"!=typeof t.toString&&"string"==typeof (t+""))))return i;s||(s=[]),o||(o=[]);for(u=s.length;u--;)if(s[u]==e)return o[u]==t;var u=-1,f=n,l=0;s.push(e),o.push(t);if(a){l=e.length;if(f=l==t.length)for(;l--&&(f=T(e[l],t[l],s,o)););return f}a=e.constructor,f=t.constructor;if(a!=f&&(!E(a)||!(a instanceof a&&E(f)&&f instanceof f)))return i;for(var c in e)if(at.call(e,c)&&(l++,!at.call(t,c)||!T(e[c],t[c],s,o)))return i;for(c in t)if(at.call(t,c)&&!(l--))return i
;if(Mt)for(;7>++u;)if(c=rt[u],at.call(e,c)&&(!at.call(t,c)||!T(e[c],t[c],s,o)))return i;return n}function N(e,t,n,r){if(!e)return n;var i=e.length,s=3>arguments.length;r&&(t=u(t,r));if(i===+i){var o=jt&&ht.call(e)==Lt?e.split(""):e;for(i&&s&&(n=o[--i]);i--;)n=t(n,o[i],i,e);return n}o=vn(e);for((i=o.length)&&s&&(n=e[o[--i]]);i--;)s=o[i],n=t(n,e[s],s,e);return n}function C(e,t,n){if(e)return t==r||n?e[0]:ct.call(e,0,t)}function k(e,t){var n=[];if(!e)return n;for(var r,i=-1,s=e.length;++i<s;)r=e[i],
sn(r)?ft.apply(n,t?r:k(r)):n.push(r);return n}function L(e,t,n){if(!e)return-1;var r=-1,i=e.length;if(n){if("number"!=typeof n)return r=M(e,t),e[r]===t?r:-1;r=(0>n?yt(0,i+n):n)-1}for(;++r<i;)if(e[r]===t)return r;return-1}function A(e,t,n){var r=-Infinity,i=r;if(!e)return i;var s=-1,o=e.length;if(!t){for(;++s<o;)e[s]>i&&(i=e[s]);return i}for(n&&(t=u(t,n));++s<o;)n=t(e[s],s,e),n>r&&(r=n,i=e[s]);return i}function O(e,t,n){return e?ct.call(e,t==r||n?1:t):[]}function M(e,t,n,r){if(!e)return 0;var i=0,
s=e.length;if(n){r&&(n=D(n,r));for(t=n(t);i<s;)r=i+s>>>1,n(e[r])<t?i=r+1:s=r}else for(;i<s;)r=i+s>>>1,e[r]<t?i=r+1:s=r;return i}function _(e,t,n,r){var s=[];if(!e)return s;var o=-1,a=e.length,f=[];"function"==typeof t&&(r=n,n=t,t=i);for(n?r&&(n=u(n,r)):n=P;++o<a;)if(r=n(e[o],o,e),t?!o||f[f.length-1]!==r:0>L(f,r))f.push(r),s.push(e[o]);return s}function D(e,t){return qt||pt&&2<arguments.length?pt.call.apply(pt,arguments):l(e,t,ct.call(arguments,2))}function P(e){return e}function H(e){Cn(hn(e),function(
t){var r=s[t]=e[t];o.prototype[t]=function(){var e=[this.__wrapped__];return arguments.length&&ft.apply(e,arguments),e=r.apply(s,e),this.__chain__&&(e=new o(e),e.__chain__=n),e}})}var n=!0,r=null,i=!1,B,j,F,I,q="object"==typeof exports&&exports&&("object"==typeof global&&global&&global==global.global&&(e=global),exports),R=Array.prototype,U=Object.prototype,z=0,W=30,X=e._,V=/[-?+=!~*%&^<>|{(\/]|\[\D|\b(?:delete|in|instanceof|new|typeof|void)\b/,$=/&(?:amp|lt|gt|quot|#x27);/g,J=/\b__p\+='';/g,K=/\b(__p\+=)''\+/g
,Q=/(__e\(.*?\)|\b__t\))\+'';/g,G=/\w*$/,Y=/(?:__e|__t=)\(\s*(?![\d\s"']|this\.)/g,Z=RegExp("^"+(U.valueOf+"").replace(/[.*+?^=!:${}()|[\]\/\\]/g,"\\$&").replace(/valueOf|for [^\]]+/g,".+?")+"$"),et=/__token(\d+)__/g,tt=/[&<>"']/g,nt=/['\n\r\t\u2028\u2029\\]/g,rt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),it="__token",st="__",ot=[],ut=R.concat,at=U.hasOwnProperty,ft=R.push,lt=U.propertyIsEnumerable,ct=R.slice,ht=U.toString,pt=Z.test(
pt=ct.bind)&&pt,dt=Math.floor,vt=Z.test(vt=Array.isArray)&&vt,mt=e.isFinite,gt=Z.test(gt=Object.keys)&&gt,yt=Math.max,bt=Math.min,wt=Math.random,Et="[object Arguments]",St="[object Array]",xt="[object Boolean]",Tt="[object Date]",Nt="[object Number]",Ct="[object Object]",kt="[object RegExp]",Lt="[object String]",At=e.clearTimeout,Ot=e.setTimeout,Mt,_t,Dt,Pt=n;(function(){function e(){this.x=1}var t={0:1,length:1},n=[];e.prototype={valueOf:1,y:1};for(var r in new e)n.push(r);for(r in arguments)Pt=!r;Mt=4>
(n+"").length,Dt="x"!=n[0],_t=(n.splice.call(t,0,1),t[0])})(1);var Ht=!w(arguments),Bt="x"!=ct.call("x")[0],jt="xx"!="x"[0]+Object("x")[0];try{var Ft=("[object Object]",ht.call(e.document||0)==Ct)}catch(It){}var qt=pt&&/\n|Opera/.test(pt+ht.call(e.opera)),Rt=gt&&/^.+$|true/.test(gt+!!e.attachEvent),Ut=!qt,zt={};zt[xt]=zt[Tt]=zt["[object Function]"]=zt[Nt]=zt[Ct]=zt[kt]=i,zt[Et]=zt[St]=zt[Lt]=n;var Wt={};Wt[Et]=Wt["[object Function]"]=i,Wt[St]=Wt[xt]=Wt[Tt]=Wt[Nt]=Wt[Ct]=Wt[kt]=Wt[Lt]=n;var Xt={"&"
:"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"},Vt={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#x27;":"'"},$t={"boolean":i,"function":n,object:n,number:i,string:i,"undefined":i,unknown:n},Jt={"\\":"\\","'":"'","\n":"n","\r":"r","	":"t","\u2028":"u2028","\u2029":"u2029"};s.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,variable:""};var Kt={a:"e,d,y",j:"e",q:"if(!d)d=i;else if(y)d=c(d,y)",i:"if(d(A,j,e)===false)return u"},Qt={j:"{}"
,q:"var q;if(typeof d!='function'){var hh=d;d=function(A){return A[hh]}}else if(y)d=c(d,y)",i:"q=d(A,j,e);(h.call(u,q)?u[q]++:u[q]=1)"},Gt={j:"true",i:"if(!d(A,j,e))return!u"},Yt={r:i,s:i,a:"n",j:"n",q:"for(var a=1,b=arguments.length;a<b;a++){if(k=arguments[a]){",i:"u[j]=A",e:"}}"},Zt={j:"[]",i:"d(A,j,e)&&u.push(A)"},en={q:"if(y)d=c(d,y)"},tn={i:{l:Kt.i}},nn={j:"",f:"if(!e)return[]",d:{b:"u=Array(l)",l:"u="+(Rt?"Array(l)":"[]")},i:{b:"u[j]=d(A,j,e)",l:"u"+(Rt?"[o]=":".push")+"(d(A,j,e))"}},rn={r:
i,a:"n,d,y",j:"{}",q:"var R=typeof d=='function';if(!R){var t=f.apply(E,arguments)}else if(y)d=c(d,y)",i:"if(R?!d(A,j,n):M(t,j)<0)u[j]=A"};Ht&&(w=function(e){return!!e&&!!at.call(e,"callee")});var sn=vt||function(e){return ht.call(e)==St};E(/x/)&&(E=function(e){return"[object Function]"==ht.call(e)});var on=$t.__proto__!=U?S:function(e,t){if(!e)return i;var n=e.valueOf,r="function"==typeof n&&(r=n.__proto__)&&r.__proto__;return r?e==r||e.__proto__==r&&(t||!w(e)):S(e)},un=c({a:"n",j:"[]",i:"u.push(j)"
}),an=c(Yt,{i:"if(u[j]==null)"+Yt.i}),fn=c(Yt),ln=c(Kt,en,tn,{r:i}),cn=c(Kt,en,tn),hn=c({r:i,a:"n",j:"[]",i:"if(S(A))u.push(j)",e:"u.sort()"}),pn=c({a:"n",j:"{}",i:"u[A]=j"}),dn=c({a:"A",j:"true",q:"var H=z.call(A),l=A.length;if(D[H]"+(Ht?"||O(A)":"")+"||(H==W&&l===+l&&S(A.splice)))return!l",i:{l:"return false"}}),vn=gt?function(e){var t=typeof e;return"function"==t&&lt.call(e,"prototype")?un(e):e&&$t[t]?gt(e):[]}:un,mn=c(Yt,{a:"n,cc,N",q:"var b,P,dd,ee,C=arguments,a=0;if(N==T){b=2;dd=C[3];ee=C[4]}else{b=C.length;dd=[];ee=[]}while(++a<b){if(k=C[a]){"
,i:"if((cc=A)&&((P=Q(cc))||T(cc))){var K=false,ff=dd.length;while(ff--)if(K=dd[ff]==cc)break;if(K){u[j]=ee[ff]}else{dd.push(cc);ee.push(A=(A=u[j])&&P?(Q(A)?A:[]):(T(A)?A:{}));u[j]=G(A,cc,T,dd,ee)}}else if(cc!=null)u[j]=cc"}),gn=c(rn),yn=c({a:"n",j:"[]",i:"u"+(Rt?"[o]=":".push")+"([j,A])"}),bn=c(rn,{q:"if(typeof d!='function'){var q,t=f.apply(E,arguments),l=t.length;for(j=1;j<l;j++){q=t[j];if(q in n)u[q]=n[q]}}else{if(y)d=c(d,y)",i:"if(d(A,j,n))u[j]=A",e:"}"}),wn=c({a:"n",j:"[]",i:"u.push(A)"}),En=
c({a:"e,gg",j:"false",o:i,d:{b:"if(z.call(e)==x)return e.indexOf(gg)>-1"},i:"if(A===gg)return true"}),Sn=c(Kt,Qt),xn=c(Kt,Gt),Tn=c(Kt,Zt),Nn=c(Kt,en,{j:"",i:"if(d(A,j,e))return A"}),Cn=c(Kt,en),kn=c(Kt,Qt,{i:"q=d(A,j,e);(h.call(u,q)?u[q]:u[q]=[]).push(A)"}),Ln=c(nn,{a:"e,U",q:"var C=w.call(arguments,2),R=typeof U=='function'",i:{b:"u[j]=(R?U:A[U]).apply(A,C)",l:"u"+(Rt?"[o]=":".push")+"((R?U:A[U]).apply(A,C))"}}),An=c(Kt,nn),On=c(nn,{a:"e,aa",i:{b:"u[j]=A[aa]",l:"u"+(Rt?"[o]=":".push")+"(A[aa])"}
}),Mn=c({a:"e,d,B,y",j:"B",q:"var V=arguments.length<3;if(y)d=c(d,y)",d:{b:"if(V)u=k[++j]"},i:{b:"u=d(u,A,j,e)",l:"u=V?(V=false,A):d(u,A,j,e)"}}),_n=c(Kt,Zt,{i:"!"+Zt.i}),Dn=c(Kt,Gt,{j:"false",i:Gt.i.replace("!","")}),Pn=c(Kt,Qt,nn,{i:{b:"u[j]={a:d(A,j,e),b:j,c:A}",l:"u"+(Rt?"[o]=":".push")+"({a:d(A,j,e),b:j,c:A})"},e:"u.sort(I);l=u.length;while(l--)u[l]=u[l].c"}),Hn=c(Zt,{a:"e,Z",q:"var t=[];J(Z,function(A,q){t.push(q)});var bb=t.length",i:"for(var q,Y=true,s=0;s<bb;s++){q=t[s];if(!(Y=A[q]===Z[q]))break}Y&&u.push(A)"
}),Bn=c({r:i,s:i,a:"n",j:"n",q:"var L=arguments,l=L.length;if(l>1){for(var j=1;j<l;j++)u[L[j]]=F(u[L[j]],u);return u}",i:"if(S(u[j]))u[j]=F(u[j],u)"});s.VERSION="0.7.0",s.after=function(e,t){return 1>e?t():function(){if(1>--e)return t.apply(this,arguments)}},s.bind=D,s.bindAll=Bn,s.chain=function(e){return e=new o(e),e.__chain__=n,e},s.clone=x,s.compact=function(e){var t=[];if(!e)return t;for(var n=-1,r=e.length;++n<r;)e[n]&&t.push(e[n]);return t},s.compose=function(){var e=arguments;return function(
){for(var t=arguments,n=e.length;n--;)t=[e[n].apply(this,t)];return t[0]}},s.contains=En,s.countBy=Sn,s.debounce=function(e,t,n){function i(){a=r,n||(o=e.apply(u,s))}var s,o,u,a;return function(){var r=n&&!a;return s=arguments,u=this,At(a),a=Ot(i,t),r&&(o=e.apply(u,s)),o}},s.defaults=an,s.defer=function(e){var n=ct.call(arguments,1);return Ot(function(){return e.apply(t,n)},1)},s.delay=function(e,n){var r=ct.call(arguments,2);return Ot(function(){return e.apply(t,r)},n)},s.difference=function(e){
var t=[];if(!e)return t;for(var n=-1,r=e.length,i=ut.apply(t,arguments),i=a(i,r);++n<r;)i(e[n])||t.push(e[n]);return t},s.escape=function(e){return e==r?"":(e+"").replace(tt,d)},s.every=xn,s.extend=fn,s.filter=Tn,s.find=Nn,s.first=C,s.flatten=k,s.forEach=Cn,s.forIn=ln,s.forOwn=cn,s.functions=hn,s.groupBy=kn,s.has=function(e,t){return e?at.call(e,t):i},s.identity=P,s.indexOf=L,s.initial=function(e,t,n){return e?ct.call(e,0,-(t==r||n?1:t)):[]},s.intersection=function(e){var t=[];if(!e)return t;var n
,r=arguments.length,i=[],s=-1,o=e.length;e:for(;++s<o;)if(n=e[s],0>L(t,n)){for(var u=1;u<r;u++)if(!(i[u]||(i[u]=a(arguments[u])))(n))continue e;t.push(n)}return t},s.invert=pn,s.invoke=Ln,s.isArguments=w,s.isArray=sn,s.isBoolean=function(e){return e===n||e===i||ht.call(e)==xt},s.isElement=function(e){return e?1===e.nodeType:i},s.isEmpty=dn,s.isEqual=T,s.isFinite=function(e){return mt(e)&&ht.call(e)==Nt},s.isFunction=E,s.isNaN=function(e){return ht.call(e)==Nt&&e!=+e},s.isNull=function(e){return e===
r},s.isObject=function(e){return e?$t[typeof e]:i},s.isUndefined=function(e){return e===t},s.keys=vn,s.last=function(e,t,n){if(e){var i=e.length;return t==r||n?e[i-1]:ct.call(e,-t||i)}},s.lastIndexOf=function(e,t,n){if(!e)return-1;var r=e.length;for(n&&"number"==typeof n&&(r=(0>n?yt(0,r+n):bt(n,r-1))+1);r--;)if(e[r]===t)return r;return-1},s.lateBind=function(e,t){return l(t,e,ct.call(arguments,2))},s.map=An,s.max=A,s.memoize=function(e,t){var n={};return function(){var r=t?t.apply(this,arguments)
:arguments[0];return at.call(n,r)?n[r]:n[r]=e.apply(this,arguments)}},s.merge=mn,s.min=function(e,t,n){var r=Infinity,i=r;if(!e)return i;var s=-1,o=e.length;if(!t){for(;++s<o;)e[s]<i&&(i=e[s]);return i}for(n&&(t=u(t,n));++s<o;)n=t(e[s],s,e),n<r&&(r=n,i=e[s]);return i},s.mixin=H,s.noConflict=function(){return e._=X,this},s.object=function(e,t){if(!e)return{};for(var n=-1,r=e.length,i={};++n<r;)t?i[e[n]]=t[n]:i[e[n][0]]=e[n][1];return i},s.omit=gn,s.once=function(e){var t,s=i;return function(){return s?
t:(s=n,t=e.apply(this,arguments),e=r,t)}},s.pairs=yn,s.partial=function(e){return l(e,ct.call(arguments,1))},s.pick=bn,s.pluck=On,s.random=function(e,t){return e==r&&t==r?wt():(e=+e||0,t==r&&(t=e,e=0),e+dt(wt()*((+t||0)-e+1)))},s.range=function(e,t,n){e=+e||0,n=+n||1,t==r&&(t=e,e=0);for(var i=-1,t=yt(0,Math.ceil((t-e)/n)),s=Array(t);++i<t;)s[i]=e,e+=n;return s},s.reduce=Mn,s.reduceRight=N,s.reject=_n,s.rest=O,s.result=function(e,t){if(!e)return r;var n=e[t];return E(n)?e[t]():n},s.shuffle=function(
e){if(!e)return[];for(var t,n=-1,r=e.length,i=Array(r);++n<r;)t=dt(wt()*(n+1)),i[n]=i[t],i[t]=e[n];return i},s.size=function(e){if(!e)return 0;var t=e.length;return t===+t?t:vn(e).length},s.some=Dn,s.sortBy=Pn,s.sortedIndex=M,s.tap=function(e,t){return t(e),e},s.template=function(e,t,n){n||(n={});var e=e+"",o,u;o=n.escape;var a=n.evaluate,f=n.interpolate,l=s.templateSettings,c=n=n.variable||l.variable;o==r&&(o=l.escape),a==r&&(a=l.evaluate||i),f==r&&(f=l.interpolate),o&&(e=e.replace(o,m)),f&&(e=e
.replace(f,y)),a!=B&&(B=a,I=RegExp("<e%-([\\s\\S]+?)%>|<e%=([\\s\\S]+?)%>"+(a?"|"+a.source:""),"g")),o=ot.length,e=e.replace(I,g),o=o!=ot.length,e="__p += '"+e.replace(nt,p).replace(et,h)+"';",ot.length=0,c||(n=j||"obj",o?e="with("+n+"){"+e+"}":(n!=j&&(j=n,F=RegExp("(\\(\\s*)"+n+"\\."+n+"\\b","g")),e=e.replace(Y,"$&"+n+".").replace(F,"$1__d"))),e=(o?e.replace(J,""):e).replace(K,"$1").replace(Q,"$1;"),e="function("+n+"){"+(c?"":n+"||("+n+"={});")+"var __t,__p='',__e=_.escape"+(o?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}"
:(c?"":",__d="+n+"."+n+"||"+n)+";")+e+"return __p}";try{u=Function("_","return "+e)(s)}catch(d){throw d.source=e,d}return t?u(t):(u.source=e,u)},s.throttle=function(e,t){function n(){a=new Date,u=r,s=e.apply(o,i)}var i,s,o,u,a=0;return function(){var r=new Date,f=t-(r-a);return i=arguments,o=this,0>=f?(a=r,s=e.apply(o,i)):u||(u=Ot(n,f)),s}},s.times=function(e,t,n){var r=-1;if(n)for(;++r<e;)t.call(n,r);else for(;++r<e;)t(r)},s.toArray=function(e){if(!e)return[];var t=e.length;return t===+t?(Bt?ht.
call(e)==Lt:"string"==typeof e)?e.split(""):ct.call(e):wn(e)},s.unescape=function(e){return e==r?"":(e+"").replace($,b)},s.union=function(){for(var e=-1,t=[],n=ut.apply(t,arguments),r=n.length;++e<r;)0>L(t,n[e])&&t.push(n[e]);return t},s.uniq=_,s.uniqueId=function(e){var t=z++;return e?e+t:t},s.values=wn,s.where=Hn,s.without=function(e){var t=[];if(!e)return t;for(var n=-1,r=e.length,i=a(arguments,1,20);++n<r;)i(e[n])||t.push(e[n]);return t},s.wrap=function(e,t){return function(){var n=[e];return arguments
.length&&ft.apply(n,arguments),t.apply(this,n)}},s.zip=function(e){if(!e)return[];for(var t=-1,n=A(On(arguments,"length")),r=Array(n);++t<n;)r[t]=On(arguments,t);return r},s.all=xn,s.any=Dn,s.collect=An,s.detect=Nn,s.drop=O,s.each=Cn,s.foldl=Mn,s.foldr=N,s.head=C,s.include=En,s.inject=Mn,s.methods=hn,s.select=Tn,s.tail=O,s.take=C,s.unique=_,Cn({Date:Tt,Number:Nt,RegExp:kt,String:Lt},function(e,t){s["is"+t]=function(t){return ht.call(t)==e}}),o.prototype=s.prototype,H(s),o.prototype.chain=function(
){return this.__chain__=n,this},o.prototype.value=function(){return this.__wrapped__},Cn("pop push reverse shift sort splice unshift".split(" "),function(e){var t=R[e];o.prototype[e]=function(){var e=this.__wrapped__;return t.apply(e,arguments),_t&&e.length===0&&delete e[0],this.__chain__&&(e=new o(e),e.__chain__=n),e}}),Cn(["concat","join","slice"],function(e){var t=R[e];o.prototype[e]=function(){var e=t.apply(this.__wrapped__,arguments);return this.__chain__&&(e=new o(e),e.__chain__=n),e}}),typeof 
define=="function"&&typeof define.amd=="object"&&define.amd?(e._=s,define(function(){return s})):q?"object"==typeof module&&module&&module.exports==q?(module.exports=s)._=s:q._=s:e._=s})(this);
})(self)
},{}],7:[function(require,module,exports){
(function(global){/**
 * marked - A markdown parser (https://github.com/chjj/marked)
 * Copyright (c) 2011-2012, Christopher Jeffrey. (MIT Licensed)
 */

;(function() {

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^( {4}[^\n]+\n*)+/,
  fences: noop,
  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
  lheading: /^([^\n]+)\n *(=|-){3,} *\n*/,
  blockquote: /^( *>[^\n]+(\n[^\n]+)*\n*)+/,
  list: /^( *)(bull) [^\0]+?(?:hr|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: /^ *(?:comment|closed|closing) *(?:\n{2,}|\s*$)/,
  def: /^ *\[([^\]]+)\]: *([^\s]+)(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
  paragraph: /^([^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+\n*/,
  text: /^[^\n]+/
};

block.bullet = /(?:[*+-]|\d+\.)/;
block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
block.item = replace(block.item, 'gm')
  (/bull/g, block.bullet)
  ();

block.list = replace(block.list)
  (/bull/g, block.bullet)
  ('hr', /\n+(?=(?: *[-*_]){3,} *(?:\n+|$))/)
  ();

block.html = replace(block.html)
  ('comment', /<!--[^\0]*?-->/)
  ('closed', /<(tag)[^\0]+?<\/\1>/)
  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
  (/tag/g, tag())
  ();

block.paragraph = replace(block.paragraph)
  ('hr', block.hr)
  ('heading', block.heading)
  ('lheading', block.lheading)
  ('blockquote', block.blockquote)
  ('tag', '<' + tag())
  ('def', block.def)
  ();

block.normal = {
  fences: block.fences,
  paragraph: block.paragraph
};

block.gfm = {
  fences: /^ *(```|~~~) *(\w+)? *\n([^\0]+?)\s*\1 *(?:\n+|$)/,
  paragraph: /^/
};

block.gfm.paragraph = replace(block.paragraph)
  ('(?!', '(?!' + block.gfm.fences.source.replace('\\1', '\\2') + '|')
  ();

/**
 * Block Lexer
 */

block.lexer = function(src) {
  var tokens = [];

  tokens.links = {};

  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ');

  return block.token(src, tokens, true);
};

block.token = function(src, tokens, top) {
  var src = src.replace(/^ +$/gm, '')
    , next
    , loose
    , cap
    , item
    , space
    , i
    , l
    , start;

  while (src) {
    start = src.length;
    // newline
    if (cap = block.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = block.code.exec(src)) {
      src = src.substring(cap[0].length);
      cap = cap[0].replace(/^ {4}/gm, '');
      tokens.push({
        type: 'code',
        text: !options.pedantic
          ? cap.replace(/\n+$/, '')
          : cap,
        textLen: start - src.length,
        remain: src.length
      });
      continue;
    }

    // fences (gfm)
    if (cap = block.fences.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'code',
        lang: cap[2],
        text: cap[3],
        textLen: start - src.length,
        remain: src.length
      });
      continue;
    }

    // heading
    if (cap = block.heading.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // lheading
    if (cap = block.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'heading',
        depth: cap[2] === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // hr
    if (cap = block.hr.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = block.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      block.token(cap, tokens, top);

      tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = block.list.exec(src)) {
      src = src.substring(cap[0].length);

      tokens.push({
        type: 'list_start',
        ordered: isFinite(cap[2])
      });

      // Get each top-level item.
      cap = cap[0].match(block.item);

      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item[item.length-1] === '\n';
          if (!loose) loose = next;
        }

        tokens.push({
          type: loose
            ? 'loose_item_start'
            : 'list_item_start'
        });

        // Recurse.
        block.token(item, tokens);

        tokens.push({
          type: 'list_item_end'
        });
      }

      tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = block.html.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: options.sanitize
          ? 'paragraph'
          : 'html',
        pre: cap[1] === 'pre',
        text: cap[0]
      });
      continue;
    }

    // def
    if (top && (cap = block.def.exec(src))) {
      src = src.substring(cap[0].length);
      tokens.links[cap[1].toLowerCase()] = {
        href: cap[2],
        title: cap[3]
      };
      continue;
    }

    // top-level paragraph
    if (top && (cap = block.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'paragraph',
        text: cap[0]
      });
      continue;
    }

    // text
    if (cap = block.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }
  }

  return tokens;
};

/**
 * Inline Processing
 */

var inline = {
  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
  url: noop,
  tag: /^<!--[^\0]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
  link: /^!?\[(inside)\]\(href\)/,
  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
  strong: /^__([^\0]+?)__(?!_)|^\*\*([^\0]+?)\*\*(?!\*)/,
  em: /^\b_((?:__|[^\0])+?)_\b|^\*((?:\*\*|[^\0])+?)\*(?!\*)/,
  code: /^(`+)([^\0]*?[^`])\1(?!`)/,
  br: /^ {2,}\n(?!\s*$)/,
  text: /^[^\0]+?(?=[\\<!\[_*`]| {2,}\n|$)/
};

inline._linkInside = /(?:\[[^\]]*\]|[^\]]|\](?=[^\[]*\]))*/;
inline._linkHref = /\s*<?([^\s]*?)>?(?:\s+['"]([^\0]*?)['"])?\s*/;

inline.link = replace(inline.link)
  ('inside', inline._linkInside)
  ('href', inline._linkHref)
  ();

inline.reflink = replace(inline.reflink)
  ('inside', inline._linkInside)
  ();

inline.normal = {
  url: inline.url,
  strong: inline.strong,
  em: inline.em,
  text: inline.text
};

inline.pedantic = {
  strong: /^__(?=\S)([^\0]*?\S)__(?!_)|^\*\*(?=\S)([^\0]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([^\0]*?\S)_(?!_)|^\*(?=\S)([^\0]*?\S)\*(?!\*)/
};

inline.gfm = {
  url: /^(https?:\/\/[^\s]+[^.,:;"')\]\s])/,
  text: /^[^\0]+?(?=[\\<!\[_*`]|https?:\/\/| {2,}\n|$)/
};

/**
 * Inline Lexer
 */

inline.lexer = function(src) {
  var out = ''
    , links = tokens.links
    , link
    , text
    , href
    , cap;

  while (src) {
    // escape
    if (cap = inline.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out += cap[1];
      continue;
    }

    // autolink
    if (cap = inline.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = cap[1][6] === ':'
          ? mangle(cap[1].substring(7))
          : mangle(cap[1]);
        href = mangle('mailto:') + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out += '<a href="'
        + href
        + '">'
        + text
        + '</a>';
      continue;
    }

    // url (gfm)
    if (cap = inline.url.exec(src)) {
      src = src.substring(cap[0].length);
      text = escape(cap[1]);
      href = text;
      out += '<a href="'
        + href
        + '">'
        + text
        + '</a>';
      continue;
    }

    // tag
    if (cap = inline.tag.exec(src)) {
      src = src.substring(cap[0].length);
      out += options.sanitize
        ? escape(cap[0])
        : cap[0];
      continue;
    }

    // link
    if (cap = inline.link.exec(src)) {
      src = src.substring(cap[0].length);
      out += outputLink(cap, {
        href: cap[2],
        title: cap[3]
      });
      continue;
    }

    // reflink, nolink
    if ((cap = inline.reflink.exec(src))
        || (cap = inline.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = links[link.toLowerCase()];
      if (!link || !link.href) {
        out += cap[0][0];
        src = cap[0].substring(1) + src;
        continue;
      }
      out += outputLink(cap, link);
      continue;
    }

    // strong
    if (cap = inline.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<strong>'
        + inline.lexer(cap[2] || cap[1])
        + '</strong>';
      continue;
    }

    // em
    if (cap = inline.em.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<em>'
        + inline.lexer(cap[2] || cap[1])
        + '</em>';
      continue;
    }

    // code
    if (cap = inline.code.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<code>'
        + escape(cap[2], true)
        + '</code>';
      continue;
    }

    // br
    if (cap = inline.br.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<br>';
      continue;
    }

    // text
    if (cap = inline.text.exec(src)) {
      src = src.substring(cap[0].length);
      out += escape(cap[0]);
      continue;
    }
  }

  return out;
};

function outputLink(cap, link) {
  if (cap[0][0] !== '!') {
    return '<a href="'
      + escape(link.href)
      + '"'
      + (link.title
      ? ' title="'
      + escape(link.title)
      + '"'
      : '')
      + '>'
      + inline.lexer(cap[1])
      + '</a>';
  } else {
    return '<img src="'
      + escape(link.href)
      + '" alt="'
      + escape(cap[1])
      + '"'
      + (link.title
      ? ' title="'
      + escape(link.title)
      + '"'
      : '')
      + '>';
  }
}

/**
 * Parsing
 */

var tokens
  , token;

function next() {
  return token = tokens.pop();
}

function tok() {
  switch (token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return '<hr>\n';
    }
    case 'heading': {
      return '<h'
        + token.depth
        + '>'
        + inline.lexer(token.text)
        + '</h'
        + token.depth
        + '>\n';
    }
    case 'code': {
      if (options.highlight) {
        token.code = options.highlight(token.text, token.lang);
        if (token.code != null && token.code !== token.text) {
          token.escaped = true;
          token.text = token.code;
        }
      }

      if (!token.escaped) {
        token.text = escape(token.text, true);
      }

      return '<pre><code'
        + (token.lang
        ? ' class="lang-'
        + token.lang
        + '"'
        : '')
        + '>'
        + token.text
        + '</code></pre>\n';
    }
    case 'blockquote_start': {
      var body = '';

      while (next().type !== 'blockquote_end') {
        body += tok();
      }

      return '<blockquote>\n'
        + body
        + '</blockquote>\n';
    }
    case 'list_start': {
      var type = token.ordered ? 'ol' : 'ul'
        , body = '';

      while (next().type !== 'list_end') {
        body += tok();
      }

      return '<'
        + type
        + '>\n'
        + body
        + '</'
        + type
        + '>\n';
    }
    case 'list_item_start': {
      var body = '';

      while (next().type !== 'list_item_end') {
        body += token.type === 'text'
          ? parseText()
          : tok();
      }

      return '<li>'
        + body
        + '</li>\n';
    }
    case 'loose_item_start': {
      var body = '';

      while (next().type !== 'list_item_end') {
        body += tok();
      }

      return '<li>'
        + body
        + '</li>\n';
    }
    case 'html': {
      return !token.pre && !options.pedantic
        ? inline.lexer(token.text)
        : token.text;
    }
    case 'paragraph': {
      return '<p>'
        + inline.lexer(token.text)
        + '</p>\n';
    }
    case 'text': {
      return '<p>'
        + parseText()
        + '</p>\n';
    }
  }
}

function parseText() {
  var body = token.text
    , top;

  while ((top = tokens[tokens.length-1])
         && top.type === 'text') {
    body += '\n' + next().text;
  }

  return inline.lexer(body);
}

function parse(src) {
  tokens = src.reverse();

  var out = '';
  while (next()) {
    out += tok();
  }

  tokens = null;
  token = null;

  return out;
}

/**
 * Helpers
 */

function escape(html, encode) {
  return html
    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function mangle(text) {
  var out = ''
    , l = text.length
    , i = 0
    , ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
}

function tag() {
  var tag = '(?!(?:'
    + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
    + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
    + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|@)\\b';

  return tag;
}

function replace(regex, opt) {
  regex = regex.source;
  opt = opt || '';
  return function self(name, val) {
    if (!name) return new RegExp(regex, opt);
    val = val.source || val;
    val = val.replace(/(^|[^\[])\^/g, '$1');
    regex = regex.replace(name, val);
    return self;
  };
}

function noop() {}
noop.exec = noop;

/**
 * Marked
 */

function marked(src, opt) {
  setOptions(opt);
  if (opt && opt.saveLex) {
    return [parse(block.lexer(src)), block.lexer(src)];
  } else {
    return parse(block.lexer(src));
  }
}

/**
 * Options
 */

var options
  , defaults;

function setOptions(opt) {
  if (!opt) opt = defaults;
  if (options === opt) return;
  options = opt;

  if (options.gfm) {
    block.fences = block.gfm.fences;
    block.paragraph = block.gfm.paragraph;
    inline.text = inline.gfm.text;
    inline.url = inline.gfm.url;
  } else {
    block.fences = block.normal.fences;
    block.paragraph = block.normal.paragraph;
    inline.text = inline.normal.text;
    inline.url = inline.normal.url;
  }

  if (options.pedantic) {
    inline.em = inline.pedantic.em;
    inline.strong = inline.pedantic.strong;
  } else {
    inline.em = inline.normal.em;
    inline.strong = inline.normal.strong;
  }
}

marked.options =
marked.setOptions = function(opt) {
  defaults = opt;
  setOptions(opt);
  return marked;
};

marked.setOptions({
  gfm: true,
  pedantic: false,
  sanitize: false,
  highlight: null
});

/**
 * Expose
 */

marked.parser = function(src, opt) {
  setOptions(opt);
  return parse(src);
};

marked.lexer = function(src, opt) {
  setOptions(opt);
  return block.lexer(src);
};

marked.parse = marked;

if (typeof module !== 'undefined') {
  module.exports = marked;
} else {
  this.marked = marked;
}

}).call(function() {
  return this || (typeof window !== 'undefined' ? window : global);
}());

})(self)
},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var $, DOWN_ARROW, END, ENTER, ESC, HOME, LEFT_ARROW, Notebook, PAGE_DOWN, PAGE_UP, Q, RIGHT_ARROW, UP_ARROW, arrows, bindMarkupDiv, bindSlider, chooseSlide, cleanEmptyNodes, closeWindow, countSlide, createNode, delay, editingEnabled, enableEditing, enableSlideControls, firstSlide, getElementCode, handleInternalSections, hideSlide, insertControls, isLeisureCode, jQuery, lastSlide, makeMarkupDiv, makeSection, makeSlideDiv, markupButtons, markupElement, markupSlideContent, markupSlides, mergeLeisureCode, mergeUp, nextSibling, nextSlide, nthSlide, oldSlide, padSlide, presentLeisureCode, presentSlide, prevSlide, previousSibling, remove, showSlide, slideControls, slideControlsEnabled, slideKeyListener, slideName, slidePat, slides, sliding, textNode, unwrap, unwrapContent, _, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jQuery = window.jQuery, $ = window.$, _ = window._;

  _ref = Notebook = require('./notebook'), ENTER = _ref.ENTER, delay = _ref.delay, textNode = _ref.textNode, createNode = _ref.createNode, remove = _ref.remove, unwrap = _ref.unwrap, insertControls = _ref.insertControls, cleanEmptyNodes = _ref.cleanEmptyNodes, isLeisureCode = _ref.isLeisureCode, getElementCode = _ref.getElementCode, previousSibling = _ref.previousSibling, nextSibling = _ref.nextSibling, presentLeisureCode = _ref.presentLeisureCode, mergeLeisureCode = _ref.mergeLeisureCode, closeWindow = _ref.closeWindow, markupButtons = _ref.markupButtons, ESC = _ref.ESC, HOME = _ref.HOME, END = _ref.END, PAGE_UP = _ref.PAGE_UP, PAGE_DOWN = _ref.PAGE_DOWN, LEFT_ARROW = _ref.LEFT_ARROW, RIGHT_ARROW = _ref.RIGHT_ARROW, UP_ARROW = _ref.UP_ARROW, DOWN_ARROW = _ref.DOWN_ARROW, arrows = _ref.arrows;

  Q = 81;

  window.markup = function(md) {
    var maindoc, nodes, _ref1;

    nodes = document.querySelectorAll('[maindoc]');
    if (nodes.length === 0) {
      maindoc = createNode("<div maindoc></div>");
      document.body.insertBefore(maindoc, document.body.firstChild);
      nodes = [maindoc];
    } else {
      maindoc = nodes[0];
    }
    md = ((_ref1 = md != null ? md.replace(/\r\n/mg, '\n') : void 0) != null ? _ref1 : maindoc.innerHTML.replace(/^\s*<!--*/, '').replace(/-->\s*\n*/m, '')).trim();
    document.body.classList.add('hideControls');
    markupSlides(maindoc, md);
    return insertControls(maindoc);
  };

  lastSlide = null;

  if (typeof console !== "undefined" && console !== null) {
    if (typeof console.error === "function") {
      console.error(new Error("REMINDER: Incompatibility: using -webkit-calc").stack);
    }
  }

  slidePat = /^(\*\*\*[^\n]*\n(?:--?\n)?)/m;

  slideName = /^\*\*\*([^\n]*)\n(?:--?\n)?/m;

  sliding = false;

  markupSlides = function(el, md) {
    var div, hasCode, slides;

    hasCode = markupSlideContent(el, md);
    slides = el.querySelectorAll('[leisureSection]');
    if (slides.length <= (el.querySelector('[leisureSection="Leisure Controls"]') ? 2 : 1)) {
      document.body.classList.add("oneSlide");
    }
    div = createNode("<div class='slide-controls'>\n  <div id='slide-killbutton' onclick='toggleSlideShow()' style='float: right'><button>Slides</button></div>\n  <div id='slide-num' style='float: right; margin-right: 10px'></div>\n</div>");
    markupButtons(div);
    el.appendChild(div);
    if (location.search && _.find(location.search.slice(1).split('&'), (function(p) {
      return p.match(/^slides=/);
    }))) {
      sliding = true;
      showSlide($(chooseSlide()));
    } else {
      document.body.classList.add('scroll');
    }
    return hasCode;
  };

  markupSlideContent = function(el, md, noMain) {
    var content, hasCode, i, m, p, pageType, pages, _i, _ref1, _ref2;

    pages = md.split(slidePat);
    hasCode = false;
    if (pages.length > 1) {
      document.body.classList.add('slide-container');
      el.innerHTML = '';
      bindSlider();
      el.removeAttribute('doc');
      if (pages.length === 3 && !pages[0] && !pages[2]) {
        pages[2] = '\n';
      }
      for (i = _i = 0, _ref1 = pages.length; _i < _ref1; i = _i += 2) {
        p = pages[i];
        if (p) {
          pageType = i > 0 ? (m = (_ref2 = pages[i - 1].match(slidePat)) != null ? _ref2[1] : void 0, m.match(/\n-\n/) ? ['continuation', 'hiddenPage'] : m.match(/\n--\n/) ? ['hiddenPage', 'secretPage'] : []) : [];
          content = makeSlideDiv(el, pageType, (i > 0 ? pages[i - 1].match(slideName)[1].trim() : 'Main'));
          if (i > 0) {
            hasCode = (markupElement(content, pages[i - 1] + p)) || hasCode;
          } else {
            hasCode = (markupElement(content, '***\n' + p)) || hasCode;
          }
          padSlide(content, (i > 0 ? pages[i - 1] : '***\n'));
        }
      }
    } else {
      content = makeSlideDiv(el, ['page'], 'Main');
      while (el.firstChild !== content.parentNode) {
        content.appendChild(el.firstChild);
      }
      hasCode = markupElement(content, md);
      padSlide(content, '***\n');
      if (noMain) {
        unwrapContent(content);
      }
    }
    return hasCode;
  };

  padSlide = function(content, header) {
    var div, range;

    if (!content.firstChild || isLeisureCode(content.firstChild)) {
      range = document.createRange();
      range.setStart(content, 0);
      range.setEnd(content, 0);
      div = makeMarkupDiv(range, header);
      div.appendChild(createNode('<br>'));
    }
    if (isLeisureCode(content.lastChild)) {
      range = document.createRange();
      range.setStartAfter(content.lastChild);
      range.setEndAfter(content.lastChild);
      div = makeMarkupDiv(range, '\n');
      return div.appendChild(createNode('<br>'));
    }
  };

  unwrapContent = function(content) {
    var el, section;

    section = content.parentNode;
    el = section.parentNode;
    el.insertBefore(content, section);
    remove(section);
    return unwrap(content);
  };

  makeSlideDiv = function(el, pageTypes, title) {
    var content, div, pageType, sectionTitle, _i, _len;

    lastSlide = div = createNode("<div class='leisure_page'></div>");
    div.setAttribute('leisureSection', title);
    div.setAttribute('doc', '');
    div.setAttribute('slide', '');
    div.classList.add('slide');
    div.classList.add('ui-corner-all');
    div.classList.add('ui-widget');
    div.classList.add('ui-widget-content');
    for (_i = 0, _len = pageTypes.length; _i < _len; _i++) {
      pageType = pageTypes[_i];
      div.classList.add(pageType);
    }
    el.appendChild(div);
    sectionTitle = createNode("<div class='pageTitle'>" + title + "</div>");
    sectionTitle.setAttribute('leisureoutput', '');
    div.appendChild(sectionTitle);
    content = createNode("<div class='pageContent'></div>");
    div.appendChild(content);
    return content;
  };

  chooseSlide = function() {
    var param;

    param = _.find(location.search.slice(1).split('&'), (function(p) {
      return p.match(/^slide=.*/);
    }));
    console.log(param);
    if (param) {
      return document.querySelector("[slide='" + (param.split('=')[1]) + "']");
    } else {
      return document.querySelector('[maindoc]').firstElementChild;
    }
  };

  oldSlide = 0;

  window.toggleSlideShow = function() {
    sliding = $(document.body).is('.scroll');
    enableSlideControls(true);
    enableEditing(true);
    if (sliding) {
      $(document.body).removeClass('scroll');
      return showSlide(nthSlide(oldSlide));
    } else {
      oldSlide = $('.slide.showing').attr('slide');
      hideSlide($('.slide.showing'));
      $(document.body).addClass('scroll');
      return $('#slide-num').html('');
    }
  };

  bindSlider = function() {
    return document.body.addEventListener('keydown', slideKeyListener);
  };

  slideControls = [Q, ESC, LEFT_ARROW, RIGHT_ARROW, HOME, END, PAGE_UP, PAGE_DOWN];

  slideControlsEnabled = true;

  enableSlideControls = function(state) {
    return slideControlsEnabled = state;
  };

  presentSlide = function(s) {
    hideSlide($('.slide.showing'));
    return showSlide(s);
  };

  firstSlide = function() {
    return slides();
  };

  lastSlide = function() {
    return slides().last();
  };

  prevSlide = function() {
    var n;

    n = $('.slide.showing').prevAll('[slide]').not('[leisureSection="Leisure Controls"]').not('.hiddenPage').not('.secretPage');
    if (n.length) {
      return n;
    } else {
      return slides();
    }
  };

  nextSlide = function() {
    var n;

    n = $('.slide.showing').nextAll('[slide]').not('[leisureSection="Leisure Controls"]').not('.hiddenPage').not('.secretPage');
    if (n.length) {
      return n;
    } else {
      return $('.slide.showing');
    }
  };

  slideKeyListener = function(e) {
    var c;

    if (sliding) {
      window.evt = e;
      c = e.charCode || e.keyCode || e.which;
      if ((__indexOf.call(slideControls, c) >= 0) && !$(e.target).is('[leisurenode=code],[leisurenode=code] *') && slideControlsEnabled) {
        e.preventDefault();
        if (c === ESC) {
          return toggleSlideShow();
        } else if (c === Q) {
          return closeWindow();
        } else {
          return presentSlide(((function() {
            switch (c) {
              case HOME:
                return firstSlide();
              case END:
                return lastSlide();
              case LEFT_ARROW:
              case PAGE_UP:
                return prevSlide();
              case RIGHT_ARROW:
              case PAGE_DOWN:
                return nextSlide();
            }
          })()));
        }
      }
    }
  };

  slides = function() {
    return $('[slide]').not('[leisureSection="Leisure Controls"]').not('.hiddenPage').not('.secretPage');
  };

  nthSlide = function(n) {
    return slides().slice(n);
  };

  countSlide = function(el) {
    var count, n, slide, _i, _len, _ref1;

    n = -1;
    count = 0;
    _ref1 = slides();
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      slide = _ref1[_i];
      count++;
      if (slide === el) {
        n = count;
      }
    }
    return [n, count];
  };

  showSlide = function(el) {
    var count, n, _ref1;

    _ref1 = countSlide(el[0]), n = _ref1[0], count = _ref1[1];
    oldSlide = n;
    $('#slide-num').html("" + n + " / " + count);
    return $(el).first().removeClass('hidden').addClass('showing');
  };

  hideSlide = function(el) {
    return $(el).first().addClass('hidden').removeClass('showing');
  };

  markupElement = function(el, md) {
    var code, codePos, len, lex, markup, node, prev, prevCodePos, range, slide, _i, _len, _ref1, _ref2, _ref3;

    len = md.length;
    slide = (_ref1 = md.match(slidePat)) != null ? _ref1 : '';
    _ref2 = window.marked((slide ? md.slice(slide[0].length) : md), {
      saveLex: true,
      gfm: true
    }), markup = _ref2[0], lex = _ref2[1];
    el.innerHTML = markup.trim() || '<br>';
    prev = null;
    range = document.createRange();
    prevCodePos = -1;
    codePos = 0;
    _ref3 = el.querySelectorAll('code');
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      while (lex[codePos].type !== 'code') {
        codePos++;
      }
      if (node.parentNode.tagName !== 'PRE') {
        code = node;
      } else {
        code = node.parentNode;
        code.innerHTML = node.innerHTML;
      }
      code.setAttribute('noLeisureBar', '');
      code.setAttribute('leisureNode', 'code');
      code.md = lex[codePos].text;
      if (code.parentNode.firstChild !== code) {
        if (prev === null || prev.parentNode !== code.parentNode) {
          range.setStart(code.parentNode, 0);
        } else {
          range.setStartAfter(prev);
        }
        range.setEndBefore(code);
        makeMarkupDiv(range, md.substring((prevCodePos === -1 ? 0 : len - lex[prevCodePos].remain), len - lex[codePos].remain - lex[codePos].textLen));
      }
      prevCodePos = codePos;
      codePos++;
      prev = code;
    }
    if (prevCodePos > -1) {
      if (lex[prevCodePos].remain > 0) {
        range.selectNodeContents(prev.parentNode);
        range.setStartAfter(prev);
        makeMarkupDiv(range, md.substring(len - lex[prevCodePos].remain));
      }
    } else {
      range.selectNodeContents(el);
      makeMarkupDiv(range, md);
    }
    return prevCodePos > -1;
  };

  handleInternalSections = function(content) {
    var before, innerSections, marker, node, nodeContent, nodeTitle, prev, section, sectionHolder, title, _i, _j, _len, _len1, _ref1;

    section = content.parentNode;
    sectionHolder = section.parentNode;
    innerSections = section.querySelectorAll('[leisureSection]');
    if (innerSections.length === 0) {
      if (!((_ref1 = content.firstChild.md) != null ? _ref1.match(/^\*\*\*/) : void 0)) {
        if (!section.previousSibling) {
          return section.setAttribute('leisureSection', 'Main');
        } else {
          prev = section.previousSibling.querySelector('.pageContent');
          while (content.firstChild) {
            mergeUp(content.firstChild, prev);
          }
          return remove(section);
        }
      }
    } else {
      title = section.getAttribute('leisureSection');
      before = false;
      for (_i = 0, _len = innerSections.length; _i < _len; _i++) {
        node = innerSections[_i];
        if (node.getAttribute('leisureSection') === title) {
          before = true;
          break;
        }
      }
      before = before || (!innerSections[0].previousSibling);
      marker = section;
      for (_j = 0, _len1 = innerSections.length; _j < _len1; _j++) {
        node = innerSections[_j];
        nodeTitle = node.getAttribute('leisureSection');
        nodeContent = node.querySelector('.pageContent');
        if (nodeTitle === title || (node.previousSibling && nodeTitle === 'Main')) {
          if (nodeTitle === title) {
            before = false;
          }
          while (nodeContent.firstChild) {
            content.insertBefore(nodeContent.firstChild, node);
            mergeLeisureCode(node.previousSibling, node);
          }
          remove(node);
        } else {
          while (node.nextSibling && !node.nextSibling.getAttribute('leisureSection')) {
            mergeUp(node.nextSibling, nodeContent);
          }
          padSlide(nodeContent, "***" + nodeTitle + "\n");
          if (before) {
            section.parentNode.insertBefore(node, section);
          } else {
            section.parentNode.insertBefore(node, marker.nextSibling);
            marker = node;
          }
        }
      }
      if (!content.firstChild) {
        return remove(section);
      } else {
        return padSlide(content, "***" + title + "\n");
      }
    }
  };

  mergeUp = function(el, newParent) {
    newParent.appendChild(el);
    return mergeLeisureCode(newParent.lastChild.previousSibling, newParent.lastChild);
  };

  makeSection = function(title, node, next) {
    var div;

    div = createNode("<div leisureSection='" + title + "'></div>");
    node.parentNode.insertBefore(div, node);
    while (div.nextSibling && div.nextSibling !== next) {
      div.appendChild(div.nextSibling);
    }
    return div;
  };

  makeMarkupDiv = function(range, md) {
    var div;

    div = document.createElement('div');
    range.surroundContents(div);
    div.md = md;
    bindMarkupDiv(div);
    return div;
  };

  editingEnabled = true;

  enableEditing = function(state) {
    return editingEnabled = state;
  };

  bindMarkupDiv = function(div) {
    var editing;

    div.bound = true;
    div.setAttribute('leisureNode', 'markdown');
    div.setAttribute('contenteditable', 'false');
    editing = false;
    div.addEventListener('dblclick', function(e) {
      if (!editing && editingEnabled) {
        div.innerHTML = '';
        div.appendChild(textNode(div.md));
        div.style.whiteSpace = 'pre-wrap';
        div.setAttribute('contenteditable', 'true');
        editing = true;
        div.parentNode.setAttribute('editing', 'true');
        return div.focus();
      }
    });
    div.addEventListener('keypress', function(e) {
      var br, r, s;

      if (editing) {
        s = window.getSelection();
        r = s.getRangeAt(0);
        if ((e.charCode || e.keyCode || e.which) === ENTER) {
          br = textNode('\n');
          r.insertNode(br);
          r = document.createRange();
          r.setStart(br, 1);
          s.removeAllRanges();
          s.addRange(r);
          return e.preventDefault();
        }
      }
    });
    return div.addEventListener('blur', function(e) {
      var first, frag, last, node, parent, prevSection, r, scroll, _i, _len, _ref1, _ref2;

      if (editing) {
        scroll = document.body.scrollTop;
        div.style.whiteSpace = '';
        editing = false;
        div.parentNode.removeAttribute('editing');
        div.setAttribute('contenteditable', 'false');
        prevSection = (_ref1 = div.parentNode.parentNode.previousSibling) != null ? _ref1.getAttribute('leisureSection') : void 0;
        parent = div.parentNode;
        if (markupSlideContent(div, div.textContent, prevSection && prevSection !== 'Leisure Controls')) {
          _ref2 = div.querySelectorAll("[leisurenode='code']");
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            node = _ref2[_i];
            presentLeisureCode(node, true);
          }
        } else if (div.textContent.trim() === '') {
          cleanEmptyNodes(div);
        }
        r = document.createRange();
        r.selectNodeContents(div);
        frag = r.extractContents();
        first = frag.childNodes[0];
        last = frag.childNodes[frag.childNodes.length - 1];
        parent.replaceChild(frag, div);
        mergeLeisureCode(previousSibling(first), first);
        mergeLeisureCode(last, nextSibling(last));
        handleInternalSections(parent);
        return delay(function() {
          return document.body.scrollTop = scroll;
        });
      }
    });
  };

  Notebook.markupElement = markupElement;

  Notebook.enableSlideControls = enableSlideControls;

  Notebook.enableEditing = enableEditing;

  Notebook.presentSlide = presentSlide;

  Notebook.firstSlide = firstSlide;

  Notebook.lastSlide = lastSlide;

  Notebook.prevSlide = prevSlide;

  Notebook.nextSlide = nextSlide;

}).call(this);

/*
*/

},{"./notebook":9}],9:[function(require,module,exports){
(function(global){// Generated by CoffeeScript 1.6.2
/*
# use an element as a Leisure notebook
# Only runs in the context of a browser
*/


(function() {
  var $, BS, DEL, DOWN_ARROW, END, ENTER, ESC, HOME, LEFT_ARROW, Leisure_anno, Nil, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, TAB, UP_ARROW, URI, Xus, acceptCode, addBoxClasses, addDefControls, addsLine, allowEvents, arrows, autoRun, baseElements, baseStrokeWidth, basicCall, bindAll, bindNotebook, bootNotebook, box, boxClasses, buttonClasses, c, chainEvalNodes, changeTheme, changeView, checkDeleteExpr, checkHideSource, checkMutateFromModification, cleanEmptyNodes, cleanOutput, clearAst, clearOutputBox, clearUpdates, clickTest, closeWindow, codeBox, codeFocus, codeSpan, configureSaveLink, continueRangePosition, createFragment, createNode, createPeer, createSlider, debug, defaultEnv, define, delay, docFocus, envFor, errString, escapeHtml, evalBox, evalDoc, evalDocCode, evalNodes, evalOutput, evaluating, evaluationQueue, event, filename, findCurrentCodeHolder, findDefs, findUpdateSelector, focusBox, foldLeft, gen, getAnnoBody, getAnnoData, getAnnoName, getAst, getBox, getDefName, getElementCode, getElements, getExprSource, getHtml, getMDDocument, getMaxStrokeWidth, getParseErr, getRangePosition, getRangeText, getRanges, getRefName, getSvgElement, getType, grp, handleKey, hasFunc, hasMonadOutput, head, hiddenPat, hideControlSection, hideOutputSource, hideSlider, highlightNotebookFunction, highlightPosition, id, identity, ignoreDeleteOutputBox, init, initNotebook, insertControls, isDef, isLeisureCode, isMonad, isOutput, isSlider, lazy, leisureContextString, linePat, linkSource, loadProgram, loaded, lz, makeId, makeLabel, makeMonad, makeOption, makeOutputBox, makeOutputControls, makeRange, makeSyncMonad, makeTestBox, makeTestCase, markPartialApplies, markupButton, markupButtons, markupDefs, mergeLeisureCode, nameSub, nextId, nextSibling, nodeEnd, nodeFor, nonprintable, numberEnd, numberStart, oldBrackets, owner, patchFuncAst, peer, peerGetDocument, peerGetFunctions, peerNotifySelection, postLoadQueue, prepExpr, presentLeisureCode, presentValue, previousBoxRangeInternal, previousBoxRangeStart, previousSibling, primSvgMeasure, primconcatNodes, printable, printableControlCharacters, processLine, psgn, queueAfterLoad, remove, removeBoxClasses, removeOldDefs, replaceContents, replaceRange, replicate, req, resolve, root, runAuto, runMonad, runTest, runTests, rz, saveProgram, setAst, setFilename, setMinMax, setSnapper, setUpdate, showAst, showError, showFilename, showFilenames, showOutputSource, showResult, showSliderButton, showSource, skipLeftOverOutputBox, slider, snapshot, svgBetterMeasure, svgMeasure, svgMeasureText, tail, testPat, textNode, toDefBox, toExprBox, toggleEdit, transformStrokeWidth, transformedPoint, unwrap, update, updatePat, wrapRange, xusEnv, _, _ref, _ref1, _ref2,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  console.log("LOADING NOTEBOOK");

  _ref = root = module.exports = require('./base'), resolve = _ref.resolve, lazy = _ref.lazy;

  rz = resolve;

  lz = lazy;

  _ref1 = root = module.exports = require('./ast'), nameSub = _ref1.nameSub, getRefName = _ref1.getRefName, define = _ref1.define, foldLeft = _ref1.foldLeft, Nil = _ref1.Nil, getType = _ref1.getType, getAnnoName = _ref1.getAnnoName, getAnnoData = _ref1.getAnnoData, getAnnoBody = _ref1.getAnnoBody, Leisure_anno = _ref1.Leisure_anno;

  _ref2 = require('./runtime'), isMonad = _ref2.isMonad, runMonad = _ref2.runMonad, makeMonad = _ref2.makeMonad, makeSyncMonad = _ref2.makeSyncMonad, identity = _ref2.identity, defaultEnv = _ref2.defaultEnv, basicCall = _ref2.basicCall;

  gen = require('./gen').gen;

  URI = window.URI;

  Xus = window.Xus;

  $ = window.$;

  _ = require('./lodash.min');

  window.global = window;

  debug = false;

  BS = 8;

  TAB = 9;

  ENTER = 13;

  ESC = 27;

  PAGE_UP = 33;

  PAGE_DOWN = 34;

  END = 35;

  HOME = 36;

  LEFT_ARROW = 37;

  UP_ARROW = 38;

  RIGHT_ARROW = 39;

  DOWN_ARROW = 40;

  DEL = 46;

  arrows = [37, 38, 39, 40];

  updatePat = /(^|\n)(#@update )([^\n]+)(?:^|\n)/;

  peer = null;

  nextId = 0;

  filename = null;

  event = function() {
    var args, widget;

    widget = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return basicCall(args, envFor(widget), identity);
  };

  defaultEnv.readFile = function(fileName, cont) {
    var uri;

    uri = new URI(document.location.href, fileName);
    console.log("\n\n@@@@READ FILE: " + uri + "\n\n");
    return $.get(String(uri)).done(function(data) {
      return cont(null, data);
    }).fail(function(err) {
      return cont(err, null);
    });
  };

  defaultEnv.writeFile = function(fileName, data, cont) {};

  snapshot = function(el, pgm) {};

  setSnapper = function(snapFunc) {
    return snapshot = snapFunc;
  };

  delay = function(func) {
    return window.setTimeout(func, 1);
  };

  getParseErr = getHtml = function(x) {
    return x(lz(function(value) {
      return rz(value);
    }));
  };

  escapeHtml = function(str) {
    if (typeof str === 'string') {
      return str.replace(/[<>]/g, function(c) {
        switch (c) {
          case '<':
            return '&lt;';
          case '>':
            return '&gt;';
        }
      });
    } else {
      return str;
    }
  };

  presentValue = function(v) {
    var content;

    if ((getType(v)) === 'svgNode') {
      content = v(function() {
        return id;
      });
      return _svgPresent()(function() {
        return content;
      })(function() {
        return id;
      });
    } else if ((getType(v)) === 'html') {
      return getHtml(v);
    } else if ((getType(v)) === 'parseErr') {
      return "PARSE ERROR: " + (getParseErr(v));
    } else {
      return escapeHtml(String(v));
    }
  };

  bootNotebook = function(el) {
    if ((document.getElementById('channelList')) == null) {
      document.body.appendChild(createNode("<datalist id='channelList'>\n   <option value=''></option>\n   <option value='app'>app</option>\n   <option value='compile'>compile</option>\n   <option value='editorFocus'>editorFocus</option>\n</datalist>"));
    }
    return createPeer();
  };

  closeWindow = function() {
    console.log("CLOSING WINDOW");
    window.open('', '_self', '');
    return window.close();
  };

  createPeer = function() {
    var k, param, params, server, v, _i, _len, _ref3, _ref4;

    root.xusServer = server = new Xus.Server();
    server.exit = function() {
      return closeWindow();
    };
    peer = root.peer = Xus.createDirectPeer(server);
    peer.server = server;
    peer.listen('leisure/selection/contents', true, function(key, value) {
      var node, r, s;

      if (key === 'leisure/selection/contents') {
        s = window.getSelection();
        if (s.rangeCount && s.toString() !== value) {
          r = s.getRangeAt(0);
          r.deleteContents();
          node = textNode(value.toString());
          r.insertNode(node);
          s.removeAllRanges();
          r.selectNode(node);
          return s.addRange(r);
        }
      }
    });
    peer.set('leisure/evalExpr', null, 'transient');
    peer.listen('leisure/evalExpr', false, function(key, value) {
      var env, expr, result;

      if (key === 'leisure/evalExpr' && (value != null)) {
        expr = value[0], result = value[1];
        console.log("EVAL: " + expr + ", RESULT: " + result);
        env = xusEnv(result, expr);
        return processLine(expr, env, function() {
          return typeof env.cleanup === "function" ? env.cleanup() : void 0;
        });
      }
    });
    peer.set('leisure/document', peerGetDocument);
    peer.set('leisure/functions', peerGetFunctions);
    peer.set('leisure/storage', []);
    if (Boot.documentFragment) {
      params = {};
      _ref3 = Boot.documentFragment.substring(1).split('&');
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        param = _ref3[_i];
        _ref4 = param.split('='), k = _ref4[0], v = _ref4[1];
        params[k.toLowerCase()] = decodeURIComponent(v);
      }
      if (params.xusproxy != null) {
        return Xus.xusToProxy(server, params.xusproxy);
      }
    }
  };

  replaceContents = function(uri, contents) {
    if (!contents) {
      contents = uri;
      uri = null;
    }
    if (uri) {
      setFilename(uri.toString());
    }
    document.body.setAttribute('doc', '');
    window.leisureAutoRunAll = true;
    window.markup(contents);
    return bindAll();
  };

  bindAll = function() {
    var node, _i, _len, _ref3;

    _ref3 = document.querySelectorAll("[leisurenode='code']");
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      node.setAttribute('contentEditable', 'true');
      bindNotebook(node);
      changeTheme(node, 'thin');
      evalDoc(node);
    }
    return showFilenames();
  };

  xusEnv = function(resultVar, expr) {
    var env, result;

    result = '';
    env = {
      debug: debug,
      finishedEvent: function() {},
      owner: null,
      require: req,
      write: function(msg) {
        return result += "" + msg + "\n";
      },
      prompt: function(msg, cont) {
        return result += "Attempt to prompt with " + msg;
      },
      processResult: function(res, ast) {
        result += res;
        return peer.set(resultVar, JSON.stringify(result));
      },
      presentValue: function(x) {
        return x;
      },
      fileSettings: {
        uri: new URI(document.location.href)
      },
      err: function(err) {
        result += err.leisureContext ? "ERROR: " + err + ":\n" + (leisureContextString(err)) + "\n" + err.stack : "Couldn't parse: " + expr;
        return peer.set(resultVar, result);
      }
    };
    env.__proto__ = root.defaultEnv;
    return env;
  };

  peerGetDocument = function() {
    var nodes;

    nodes = document.querySelectorAll("[leisurenode='code']");
    if (nodes.length > 1 || Notebook.md) {
      return getMDDocument();
    } else {
      return getSimpleDocument();
    }
  };

  peerGetFunctions = function() {
    return (_.uniq(window.leisureFuncNames.toArray().sort(), true)).sort();
  };

  getMDDocument = function() {
    var md, node, _i, _len, _ref3, _ref4;

    md = '';
    _ref3 = document.querySelectorAll('[doc] [leisureNode]');
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      md += isLeisureCode(node) ? "```\n" + (getElementCode(node)) + "\n```\n" : (_ref4 = node.md) != null ? _ref4 : '';
    }
    return md;
  };

  makeId = function(el) {
    if (!el.id) {
      return el.id = "Leisure-" + (nextId++);
    }
  };

  allowEvents = true;

  init = false;

  bindNotebook = function(el) {
    if (!init) {
      init = true;
      defaultEnv.presentValue = presentValue;
      defaultEnv.write = function(msg) {
        return console.log(msg);
      };
      defaultEnv.owner = document.body;
      defaultEnv.finishedEvent = function(evt, channel) {
        return update(channel != null ? channel : 'app', defaultEnv);
      };
      defaultEnv.debug = debug;
    }
    if (el.bound == null) {
      makeId(el);
      el.bound = true;
      el.addEventListener('DOMCharacterDataModified', (function(evt) {
        if (allowEvents && !el.replacing) {
          return delay(function() {
            return checkMutateFromModification(evt);
          });
        }
      }), true);
      el.addEventListener('DOMSubtreeModified', (function(evt) {
        if (allowEvents && !el.replacing) {
          return delay(function() {
            return checkMutateFromModification(evt);
          });
        }
      }), true);
      el.addEventListener('mousedown', (function(e) {
        if (!isSlider(e.srcElement)) {
          return delay(function() {
            return highlightPosition(e);
          });
        }
      }), true);
      el.addEventListener('mousemove', (function(e) {
        if (!isSlider(e.srcElement)) {
          return delay(function() {
            return highlightPosition(e);
          });
        }
      }), true);
      el.addEventListener('mouseup', (function(e) {
        if (!isSlider(e.srcElement)) {
          return delay(function() {
            return highlightPosition(e);
          });
        }
      }), true);
      el.addEventListener('keydown', function(e) {
        var c, r, s;

        c = e.charCode || e.keyCode || e.which;
        if (c === DEL || c === BS) {
          s = window.getSelection();
          r = s.getRangeAt(0);
          if (c === BS) {
            checkDeleteExpr(getBox(r.startContainer));
            if (skipLeftOverOutputBox(el, r)) {
              return e.preventDefault();
            }
          } else if (c === DEL) {
            checkDeleteExpr(getBox(r.startContainer));
            if (ignoreDeleteOutputBox(el, r)) {
              return e.preventDefault();
            }
          }
        }
        if (printable(c)) {
          clearAst(getBox(window.getSelection().focusNode));
        }
        if ((__indexOf.call(arrows, c) >= 0) || printable(c)) {
          delay(function() {
            return highlightPosition(e);
          });
        }
        if (e.ctrlKey && c === ENTER) {
          return handleKey("C-ENTER");
        } else if (e.altKey && c === ENTER) {
          return handleKey("M-ENTER");
        } else if (c === TAB) {
          handleKey("TAB");
          return e.preventDefault();
        }
      });
      el.addEventListener('keypress', function(e) {
        var br, bx, r, s, sp;

        s = window.getSelection();
        r = s.getRangeAt(0);
        if ((e.charCode || e.keyCode || e.which) === ENTER) {
          br = textNode('\n');
          r.insertNode(br);
          r = document.createRange();
          r.setStart(br, 1);
          s.removeAllRanges();
          s.addRange(r);
          return e.preventDefault();
        } else if (r.startContainer.parentNode === el) {
          sp = codeSpan('\n', 'codeExpr');
          sp.setAttribute('generatedNL', '');
          bx = box(s.getRangeAt(0), 'codeMainExpr', true);
          bx.appendChild(sp);
          makeOutputBox(bx);
          r = document.createRange();
          r.setStart(sp, 0);
          s.removeAllRanges();
          return s.addRange(r);
        }
      });
      el.addEventListener('focus', (function() {
        if (allowEvents) {
          return findCurrentCodeHolder();
        }
      }), true);
      el.addEventListener('blur', (function() {
        if (allowEvents) {
          return findCurrentCodeHolder();
        }
      }), true);
      if (window.leisureAutoRunAll) {
        autoRun(el, true);
        return window.setTimeout((function() {
          return runTests(el);
        }), 1);
      } else {
        return el.autorunState = false;
      }
    }
  };

  checkDeleteExpr = function(node) {
    var out;

    if (isOutput(node && node.output)) {
      out = node.output;
      return window.setTimeout((function() {
        if (!node.textContent.trim()) {
          node.parentNode.removeChild(node);
        }
        if ((node.parentNode == null) && ((out != null ? out.parentNode : void 0) != null)) {
          return out.parentNode.removeChild(out);
        }
      }), 1);
    }
  };

  skipLeftOverOutputBox = function(el, r) {
    var box, s;

    el.normalize();
    box = previousBoxRangeInternal(r) || previousBoxRangeStart(r);
    if (isOutput(box)) {
      s = window.getSelection();
      r.selectNode(box);
      r.collapse(true);
      s.removeAllRanges();
      s.addRange(r);
      return true;
    } else {
      return false;
    }
  };

  previousBoxRangeInternal = function(r) {
    return r.startContainer.nodeType === 1 && r.startOffset > 0 && r.startContainer.childNodes[r.startOffset - 1];
  };

  previousBoxRangeStart = function(r) {
    return r.startContainer.nodeType === 3 && r.startOffset === 0 && previousSibling(r.startContainer);
  };

  ignoreDeleteOutputBox = function(el, r) {
    var n;

    el.normalize();
    if (r.startContainer.nodeType === 3 && r.startOffset === r.startContainer.length) {
      n = r.startContainer;
      while (n && n.nextSibling === null) {
        n = n.parentNode;
      }
      return isOutput(n != null ? n.nextSibling : void 0);
    } else {
      return false;
    }
  };

  isOutput = function(el) {
    return (el != null ? el.nodeType : void 0) === 1 && el.hasAttribute('LeisureOutput');
  };

  isLeisureCode = function(el) {
    return (el != null ? el.nodeType : void 0) === 1 && el.getAttribute('leisureNode') === 'code';
  };

  peerNotifySelection = function(el, str) {};

  printableControlCharacters = (function() {
    var _i, _len, _ref3, _results;

    _ref3 = "\r\i\n\b";
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      c = _ref3[_i];
      _results.push(c.charCodeAt(0));
    }
    return _results;
  })();

  printable = function(code) {
    return (code > 0xf && code < 37) || code > 40 || __indexOf.call(printableControlCharacters, code) >= 0;
  };

  nonprintable = null;

  (function() {
    var i, s, _i;

    s = '';
    for (i = _i = 0; 0 <= 0xf ? _i <= 0xf : _i >= 0xf; i = 0 <= 0xf ? ++_i : --_i) {
      s += String.fromCharCode(i);
    }
    s.replace(/[\i\r\f]/g, '');
    return nonprintable = new RegExp("[" + s + "]");
  })();

  handleKey = function(key) {
    var box;

    switch (key) {
      case "C-ENTER":
      case "TAB":
        box = getBox(window.getSelection().focusNode);
        if ((box.getAttribute('codeMainExpr')) != null) {
          return evalOutput(box.output);
        } else if ((box.getAttribute('codeMain')) != null) {
          return acceptCode(box);
        }
        break;
      case "M-ENTER":
        box = getBox(window.getSelection().focusNode);
        if ((box.getAttribute('codeMainExpr')) != null) {
          return clearOutputBox(box.output);
        }
    }
  };

  clearAst = function(box) {
    var cbox;

    cbox = getBox(box);
    return cbox != null ? cbox.ast = null : void 0;
  };

  oldBrackets = [null, Nil];

  cleanEmptyNodes = function(el) {
    var next, prev, _ref3;

    if (el.nodeType === 3 && (el.parentNode != null)) {
      return cleanEmptyNodes(el.parentNode);
    } else {
      prev = el.previousSibling;
      next = el.nextSibling;
      if (el.nodeType === 1 && el.textContent.trim() === '' && ((_ref3 = el.parentNode) != null ? _ref3.hasAttribute('doc') : void 0)) {
        el.parentNode.removeChild(el);
      }
      if (next === nextSibling(prev)) {
        return mergeLeisureCode(prev, next);
      }
    }
  };

  presentLeisureCode = function(node, doEval) {
    node.setAttribute('contentEditable', 'true');
    Notebook.bindNotebook(node);
    Notebook.changeTheme(node, 'thin');
    if (doEval) {
      return evalDoc(node);
    } else {
      return initNotebook(node);
    }
  };

  mergeLeisureCode = function(el1, el2) {
    var newCode, r;

    if (el1 && el2) {
      if (el1.nodeType === 1 && el2.nodeType === 3) {
        el1.appendChild(el2);
        return el1.normalize();
      } else if (el1.nodeType === 3 && el2.nodeType === 1) {
        el2.insertBefore(el1, el2.firstChild);
        return el2.normalize();
      } else if (el1.hasAttribute('leisureNode') && el1.getAttribute('leisureNode') === el2.getAttribute('leisureNode')) {
        newCode = textNode(el1.md = el1.getAttribute('leisureNode') === 'code' ? "" + (getElementCode(el1)) + "\n" + (getElementCode(el2)) : "" + el1.md + "\n" + el2.md);
        r = document.createRange();
        r.selectNodeContents(el2);
        el1.appendChild(textNode('\n'));
        el1.appendChild(r.extractContents());
        return el2.parentNode.removeChild(el2);
      }
    }
  };

  highlightPosition = function(e) {
    var ast, b, brackets, changed, i, node, parent, pos, r, ranges, s, span, _i, _j, _k, _len, _len1, _len2, _ref3, _ref4, _ref5;

    parent = null;
    s = window.getSelection();
    if (s.rangeCount) {
      if (cleanEmptyNodes(s.getRangeAt(0).startContainer)) {
        return;
      }
      focusBox(s.focusNode);
      parent = getBox(s.focusNode);
      if ((_ref3 = s.getRangeAt(0)) != null ? _ref3.collapsed : void 0) {
        if (!parent || isOutput(parent)) {
          return;
        }
        if (parent.parentNode && (ast = getAst(parent))) {
          r = s.getRangeAt(0);
          r.setStart(parent, 0);
          pos = getRangeText(r).length;
          changed = false;
          if (false) {
            brackets = Leisure.bracket(ast.leisureBase, pos);
            if (oldBrackets[0] !== parent || !oldBrackets[1].equals(brackets)) {
              oldBrackets = [parent, brackets];
              _ref4 = document.querySelectorAll("[LeisureBrackets]");
              for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                node = _ref4[_i];
                unwrap(node);
              }
              _ref5 = parent.querySelectorAll(".partialApply");
              for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
                node = _ref5[_j];
                unwrap(node);
              }
              parent.normalize();
              markPartialApplies(parent);
              b = brackets;
              ranges = [];
              while (b !== Nil) {
                ranges.push(makeRange(parent, b.head().head(), b.head().tail().head()));
                b = b.tail();
              }
              for (i = _k = 0, _len2 = ranges.length; _k < _len2; i = ++_k) {
                r = ranges[i];
                span = document.createElement('span');
                span.setAttribute('LeisureBrackets', '');
                span.setAttribute('class', i === 0 ? 'LeisureFunc' : 'LeisureArg');
                wrapRange(r, span);
              }
              changed = true;
            }
          }
          if (e instanceof KeyboardEvent) {
            if (hideSlider()) {
              pos += 1;
            }
          } else if (e instanceof MouseEvent && e.type === 'mousedown' && (e.target === parent || parent.contains(e.target)) && showSliderButton(parent, pos, e)) {
            changed = true;
            pos += 1;
          }
          if (changed) {
            window.EVT = e;
            s.removeAllRanges();
            s.addRange(makeRange(parent, pos));
          }
        }
      }
      return peerNotifySelection(parent, s.toString());
    }
  };

  numberEnd = /(?:^|.*[^0-9.])([0-9]+\.?[0-9]*|\.[0-9]*)$/;

  numberStart = /^([0-9]+\.[0-9]+|[0-9]+|\.[0-9]+)/;

  slider = [];

  showSliderButton = function(parent, pos, e) {
    var changed, len, m, oldPos, r, sParent, sPos, sValue, span, text;

    if (slider.length) {
      hideSlider();
      return false;
    } else {
      text = parent.textContent;
      oldPos = pos;
      changed = 0;
      if (m = text.substring(0, pos).match(numberEnd)) {
        pos -= m[1].length;
      }
      if (m = text.substring(pos).match(numberStart)) {
        len = m[1].length;
        if (oldPos <= pos + len) {
          sParent = slider[0], sPos = slider[1], sValue = slider[2];
          if (parent !== sParent || pos !== sPos || m[1] !== sValue) {
            hideSlider();
            r = makeRange(parent, pos, pos + m[1].length);
            span = createNode("<span class='leisureRangeNumber ui-widget-content'></span>");
            wrapRange(r, span);
            changed = 1;
            span.normalize();
            slider = [parent, pos, m[1], span];
            createSlider();
          }
        }
        return changed;
      } else {
        return hideSlider();
      }
    }
  };

  isSlider = function(el) {
    while (el !== document) {
      if (el.hasAttribute('slider')) {
        return true;
      }
      el = el.parentNode;
    }
    return false;
  };

  createSlider = function() {
    var d, div, inside, max, min, parent, pos, sl, sliding, span, value;

    parent = slider[0], pos = slider[1], value = slider[2], span = slider[3], div = slider[4];
    if (div) {
      return;
    }
    inside = false;
    sliding = false;
    d = createNode("<div style='z-index: 1; position: absolute; width: 200px; background: white; border: solid green 1px' slider contentEditable='false'></div>");
    slider.push(d);
    d.style.top = "" + (span.offsetTop + span.offsetHeight + 5) + "px";
    d.style.minTop = '0px';
    d.style.left = "" + (Math.max(0, (span.offsetLeft + span.offsetWidth) / 2 - 100)) + "px";
    d.addEventListener('mouseover', function(e) {
      if (!inside) {
        return inside = true;
      }
    });
    d.addEventListener('mouseout', function(e) {
      if (e.toElement !== d && !d.contains(e.toElement)) {
        inside = false;
        if (!sliding) {
          return hideSlider();
        }
      }
    });
    value = Number(value);
    min = value < 0 ? value * 2 : value / 2;
    max = value === 0 ? 10 : value * 2;
    sl = $(d).slider({
      animate: 'fast',
      start: function() {
        sliding = true;
        return delay(function() {
          return allowEvents = false;
        });
      },
      stop: function(event, ui) {
        setMinMax(sl);
        allowEvents = true;
        sliding = false;
        if (!inside) {
          return hideSlider();
        }
      },
      slide: function(event, ui) {
        var ast, _ref3;

        if (span.firstChild) {
          span.firstChild.nodeValue = String(ui.value);
        }
        if (isDef(parent)) {
          parent.ast = null;
          acceptCode(parent);
          ast = getAst(parent);
          if ((_ref3 = parent.ast) != null ? _ref3.leisureName : void 0) {
            return update("sel-" + parent.ast.leisureName);
          }
        } else {
          makeId(parent);
          if (!parent.getAttribute(parent.output, 'leisureUpdate')) {
            setUpdate(parent.output, "id-" + parent.id + " compile", true);
          }
          update("id-" + parent.id);
          return update("compile");
        }
      },
      value: value
    });
    setMinMax(sl, value);
    parent.insertBefore(d, parent.firstChild);
    return d.focus();
  };

  psgn = function(x) {
    if (x < 0) {
      return -1;
    } else {
      return 1;
    }
  };

  setMinMax = function(sl, value) {
    var max, min, step, _ref3;

    value = value || sl.slider("value");
    min = 0;
    max = (1 <= (_ref3 = Math.abs(value)) && _ref3 < 50) || value === 0 ? 100 * psgn(value) : value * 2;
    if (Math.round(value) === value) {
      step = Math.round((max - min) / 100);
      step = step - step % (max - min);
    } else {
      step = (max - min) / 100;
    }
    sl.slider("option", "min", min);
    sl.slider("option", "max", max);
    return sl.slider("option", "step", step);
  };

  hideSlider = function() {
    var div, parent, sPos, sValue, span;

    if (slider.length) {
      parent = slider[0], sPos = slider[1], sValue = slider[2], span = slider[3], div = slider[4];
      unwrap(span);
      if (div) {
        remove(div);
      }
      parent.normalize();
      slider = [];
      return 2;
    } else {
      return 0;
    }
  };

  wrapRange = function(range, node) {
    var contents, err;

    try {
      return range.surroundContents(node);
    } catch (_error) {
      err = _error;
      contents = range.cloneContents();
      replaceRange(range, node);
      return node.appendChild(contents);
    }
  };

  replaceRange = function(range, node) {
    range.deleteContents();
    return range.insertNode(node);
  };

  getRangeText = function(r) {
    return r.cloneContents().textContent;
  };

  getBox = function(node) {
    while ((node != null) && ((typeof node.getAttribute === "function" ? node.getAttribute('LeisureBox') : void 0) == null)) {
      node = node.parentElement;
    }
    return node;
  };

  checkMutateFromModification = function(evt) {
    var b, b2;

    b = getBox(evt.target);
    b2 = getBox(window.getSelection().focusNode);
    if (b && b === b2) {
      if ((isDef(b)) && b.classList.contains('codeMainExpr')) {
        toDefBox(b);
      } else if (!(isDef(b)) && b.classList.contains('codeMain')) {
        toExprBox(b);
      }
      return replicate(b);
    }
  };

  replicate = function(b) {
    if (b.replicator) {
      return delay(function() {
        return b.replicator.replicate(b);
      });
    }
  };

  buttonClasses = 'ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only'.split(' ');

  boxClasses = {
    codeMainExpr: ['codeMainExpr', 'ui-widget', 'ui-widget-content', 'ui-corner-all'],
    codeMain: ['codeMain', 'ui-widget', 'ui-widget-content', 'ui-corner-all'],
    codeMainTest: ['codeMainTest'],
    output: ['output', 'ui-corner-all']
  };

  addBoxClasses = function(box, type) {
    var cl, _i, _len, _ref3, _results;

    box.setAttribute(type, '');
    _ref3 = boxClasses[type];
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      cl = _ref3[_i];
      _results.push(box.classList.add(cl));
    }
    return _results;
  };

  removeBoxClasses = function(box, type) {
    var cl, _i, _len, _ref3, _results;

    box.removeAttribute(type);
    _ref3 = boxClasses[type];
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      cl = _ref3[_i];
      _results.push(box.classList.remove(cl));
    }
    return _results;
  };

  toExprBox = function(b) {
    var node, _i, _j, _len, _len1, _ref3, _ref4;

    removeBoxClasses(b, 'codeMain');
    addBoxClasses(b, 'codeMainExpr');
    _ref3 = b.querySelectorAll('[codename]');
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      unwrap(node);
    }
    _ref4 = b.querySelectorAll('.astbutton');
    for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
      node = _ref4[_j];
      remove(node);
    }
    return makeOutputBox(b);
  };

  toDefBox = function(b) {
    if (b.output) {
      remove(b.output);
    }
    removeBoxClasses(b, 'codeMainExpr');
    addBoxClasses(b, 'codeMain');
    return addDefControls(b);
  };

  addDefControls = function(box) {
    var btn;

    btn = createNode("<button onclick='Notebook.showAst(this.parentNode)' class='astbutton' title='Show AST'></button>");
    markupButton(btn);
    return box.appendChild(btn);
  };

  remove = function(node) {
    var _ref3;

    return (_ref3 = node.parentNode) != null ? _ref3.removeChild(node) : void 0;
  };

  showAst = function(box) {
    var name, node, output;

    name = (getAst(box)).leisureName;
    if (box.astOut != null) {
      remove(box.astOut.output);
      remove(box.astOut);
      return box.astOut = null;
    } else if (name != null) {
      node = codeBox('codeMainExpr');
      box.astOut = node;
      node.setAttribute('leisureOutput', '');
      box.parentNode.insertBefore(node, box.nextSibling);
      node.textContent = "#@update sel-" + name + "\ntreeForNotebook " + name;
      output = makeOutputBox(node);
      toggleEdit(output);
      return evalOutput(output, true);
    }
  };

  highlightNotebookFunction = function(funcName, start, stop) {
    var box, offset, sel;

    box = document.body.querySelector("[leisurefunc=" + funcName + "]");
    offset = 0;
    sel = window.getSelection();
    sel.removeAllRanges();
    return sel.addRange(makeRange(box, start + offset, stop + offset));
  };

  isDef = function(box) {
    var defType, leading, m, matched, name, txt;

    txt = box.textContent;
    if ((m = txt.match(L_defPat()))) {
      matched = m[0], leading = m[1], name = m[2], defType = m[3];
      return (defType != null ? defType.length : void 0) > 0;
    }
    return false;
  };

  initNotebook = function(el) {
    var pgm;

    el.replacing = true;
    removeOldDefs(el);
    pgm = markupDefs(el, findDefs(el));
    el.normalize();
    el.replacing = false;
    if (!el.hasAttribute('noLeisureBar')) {
      insertControls(el);
      el.testResults.innerHTML = pgm[2];
    }
    snapshot(el, pgm);
    return pgm;
  };

  makeLabel = function(text, c) {
    var node;

    node = document.createElement('SPAN');
    node.innerHTML = text;
    node.setAttribute('class', c);
    return node;
  };

  makeOption = function(name) {
    var opt;

    opt = document.createElement('OPTION');
    opt.text = name;
    return opt;
  };

  createNode = function(txt) {
    var scratch;

    scratch = document.createElement('DIV');
    scratch.innerHTML = txt;
    return scratch.firstChild;
  };

  createFragment = function(txt) {
    var frag, scratch;

    scratch = document.createElement('DIV');
    scratch.innerHTML = txt;
    frag = document.createDocumentFragment();
    while (scratch.firstChild) {
      frag.appendChild(scratch.firstChild);
    }
    return frag;
  };

  insertControls = function(el) {
    var controlDiv, saveButton, spacer, testButton, themeSelect, viewSelect, _ref3, _ref4;

    controlDiv = createNode("<div LeisureOutput contentEditable='false' class='leisure_bar'><div class=\"leisure_bar_contents\">\n  <button leisureId='saveButton' class=\"leisure_start\">Save</button>\n  <button leisureId='testButton'>Run Tests</button> <span leisureId='testResults' class=\"notrun\"></span>\n  <input type='checkbox' leisureId='autorunTests'><b>Auto</b></input>\n  <span class=\"leisure_theme\">Theme: </span>\n  <select leisureId='themeSelect'>\n    <option value=thin>Thin</option>\n    <option value=gaudy>Gaudy</option>\n    <option value=cthulhu>Cthulhu</option>\n  </select>\n  <span>View: </span>\n  <select leisureId='viewSelect'>\n    <option value=coding>Coding</option>\n    <option value=debugging>Debugging</option>\n    <option value=testing>Testing</option>\n    <option value=running>Running</option>\n  </select>\n</div>");
    spacer = createNode("<div LeisureOutput  contentEditable='false' class='leisure_space'></div>");
    el.insertBefore(spacer, el.firstChild);
    el.insertBefore(controlDiv, el.firstChild);
    _ref3 = getElements(el, ['downloadLink', 'viewLink', 'saveButton', 'testButton', 'testResults', 'autorunTests', 'themeSelect', 'viewSelect']), el.leisureDownloadLink = _ref3[0], el.leisureViewLink = _ref3[1], saveButton = _ref3[2], testButton = _ref3[3], el.testResults = _ref3[4], el.autorun = _ref3[5], themeSelect = _ref3[6], viewSelect = _ref3[7];
    controlDiv.addEventListener('click', function(evt) {
      if (document.body.classList.contains('hideControls')) {
        return document.body.classList.remove('hideControls');
      } else {
        return document.body.classList.add('hideControls');
      }
    });
    saveButton.addEventListener('click', function(evt) {
      return saveProgram(el);
    });
    testButton.addEventListener('click', function() {
      return runTests(el);
    });
    themeSelect.value = (_ref4 = el.leisureTheme) != null ? _ref4 : 'thin';
    themeSelect.addEventListener('change', function(evt) {
      return changeTheme(el, evt.target.value);
    });
    viewSelect.addEventListener('change', function(evt) {
      return changeView(el, evt.target.value);
    });
    el.autorun.checked = el.autorunState;
    el.autorun.addEventListener('change', function(evt) {
      el.autorunState = el.autorun.checked;
      if (el.autorunState) {
        return runTests(el);
      }
    });
    return markupButtons(controlDiv);
  };

  saveProgram = function() {
    return write(filename, getMDDocument(), (function() {
      return alert("Saving " + filename);
    }), function(err) {
      console.log(err);
      alert(err.stack);
      throw err;
    });
  };

  showFilename = function(el) {
    if (el && filename) {
      el.innerHTML = "Save: " + (filename.pathName());
      return el.title = filename.toString();
    }
  };

  showFilenames = function() {
    var node, _i, _len, _ref3, _results;

    _ref3 = document.body.querySelectorAll('[leisureId=saveButton]');
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      _results.push(showFilename(node));
    }
    return _results;
  };

  setFilename = function(newName) {
    console.log("SET FILENAME: " + newName);
    filename = newName instanceof URI ? newName : new URI(document.location.href, newName);
    return showFilenames();
  };

  markupButtons = function(el) {
    var btn, _i, _len, _ref3, _results;

    _ref3 = el.querySelectorAll('button');
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      btn = _ref3[_i];
      _results.push(markupButton(btn));
    }
    return _results;
  };

  markupButton = function(btn) {
    var cl, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = buttonClasses.length; _i < _len; _i++) {
      cl = buttonClasses[_i];
      _results.push(btn.classList.add(cl));
    }
    return _results;
  };

  getElements = function(el, ids) {
    var els, id, node, _i, _j, _len, _len1, _ref3, _results;

    els = {};
    _ref3 = el.querySelectorAll('[leisureId]');
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      els[node.getAttribute('leisureId')] = node;
    }
    _results = [];
    for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
      id = ids[_j];
      _results.push(els[id]);
    }
    return _results;
  };

  escapeHtml = function(str) {
    if (typeof str === 'string') {
      return str.replace(/[<>]/g, function(c) {
        switch (c) {
          case '<':
            return '&lt;';
          case '>':
            return '&gt;';
        }
      });
    } else {
      return str;
    }
  };

  loadProgram = function(el, files) {
    var fr;

    el = getBox;
    fr = new FileReader();
    fr.onloadend = function(evt) {
      el.innerHTML = escapeHtml(fr.result);
      return initNotebook(el);
    };
    return fr.readAsBinaryString(files.item(0));
  };

  configureSaveLink = function(el) {
    var blob, builder;

    window.URL = window.URL || window.webkitURL;
    builder = new WebKitBlobBuilder();
    builder.append(getElementCode(el));
    blob = builder.getBlob('text/plain');
    el.leisureDownloadLink.href = window.URL.createObjectURL(blob);
    return el.leisureViewLink.href = window.URL.createObjectURL(blob);
  };

  getElementCode = function(el) {
    var r;

    r = document.createRange();
    r.selectNode(el);
    c = r.cloneContents().firstChild;
    removeOldDefs(c);
    return c.textContent;
  };

  runTests = function(el) {
    var failed, passed, resultsClass, test, _i, _len, _ref3;

    passed = 0;
    failed = 0;
    _ref3 = el.querySelectorAll('.codeMainTest');
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      test = _ref3[_i];
      if (runTest(test)) {
        passed++;
      } else {
        failed++;
      }
    }
    if (el.testResults) {
      resultsClass = el.testResults.classList;
      resultsClass.remove('notrun');
      if (!failed) {
        resultsClass.remove('failed');
        resultsClass.add('passed');
        return el.testResults.innerHTML = passed;
      } else {
        resultsClass.remove('passed');
        resultsClass.add('failed');
        return el.testResults.innerHTML = "" + passed + "/" + failed;
      }
    }
  };

  changeTheme = function(el, value) {
    var theme;

    theme = value;
    el.leisureTheme = theme;
    return el.className = theme;
  };

  changeView = function(el, value) {
    debug = value === 'debugging';
    return alert('new view: ' + value + ", debug: " + debug);
  };

  unwrap = function(node) {
    var parent;

    parent = node.parentNode;
    if (parent) {
      while (node.firstChild != null) {
        parent.insertBefore(node.firstChild, node);
      }
      return parent.removeChild(node);
    }
  };

  removeOldDefs = function(el) {
    var extracted, m, node, txt, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref3, _ref4, _ref5;

    el.leisureDownloadLink = null;
    el.leisureViewLink = null;
    extracted = [];
    _ref3 = el.querySelectorAll("[LeisureOutput]");
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      remove(node);
    }
    _ref4 = el.querySelectorAll("[generatednl]");
    for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
      node = _ref4[_j];
      txt = node.lastChild;
      if (txt.nodeType === 3 && txt.data[txt.data.length - 1] === '\n') {
        txt.data = txt.data.substring(0, txt.data.length - 1);
      }
    }
    _ref5 = el.querySelectorAll("[Leisure]");
    for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
      node = _ref5[_k];
      if (addsLine(node) && (node.firstChild != null)) {
        extracted.push(node.firstChild);
      }
      unwrap(node);
    }
    for (_l = 0, _len3 = extracted.length; _l < _len3; _l++) {
      node = extracted[_l];
      if ((node.parentNode != null) && !addsLine(node) && (node.previousSibling != null) && !addsLine(node.previousSibling)) {
        node.parentNode.insertBefore(text('\n'), node);
      }
    }
    el.textContent = el.textContent.replace(/\uFEFF/g, '');
    txt = el.lastChild;
    if ((txt != null ? txt.nodeType : void 0) === 3 && (m = txt.data.match(/(^|[^\n])(\n+)$/))) {
      return txt.data = txt.data.substring(0, txt.data.length - m[2].length);
    }
  };

  markupDefs = function(el, defs) {
    var auto, bod, body, bx, def, i, main, name, notebookAutoNodes, pgm, s, test, tests, totalTests, _i, _j, _len, _len1, _ref3, _ref4;

    pgm = '';
    auto = '';
    totalTests = 0;
    notebookAutoNodes = [];
    for (_i = 0, _len = defs.length; _i < _len; _i++) {
      i = defs[_i];
      main = i.main, name = i.name, def = i.def, body = i.body, tests = i.tests;
      if (name) {
        bx = box(main, 'codeMain', true);
        bx.appendChild(codeSpan(name, 'codeName'));
        bx.appendChild(textNode(def));
        bod = codeSpan(textNode(body), 'codeBody');
        bod.appendChild(textNode('\n'));
        bod.setAttribute('generatedNL', '');
        bx.appendChild(bod);
        bx.addEventListener('blur', (function() {
          return evalDoc(el);
        }), true);
        markPartialApplies(bx);
        addDefControls(bx);
        pgm += "" + name + " " + def + " " + body + "\n";
      } else if (main != null) {
        bx = box(main, 'codeMainExpr', true);
        s = codeSpan(textNode(body), 'codeExpr');
        s.setAttribute('generatedNL', '');
        s.appendChild(textNode('\n'));
        bx.appendChild(s);
        markPartialApplies(bx);
        if (((_ref3 = main.leisureAuto) != null ? _ref3.mode : void 0) === 'silent') {
          auto += "" + body + "\n";
        } else {
          if (((_ref4 = main.leisureAuto) != null ? _ref4.mode : void 0) === 'notebook') {
            notebookAutoNodes.push(bx);
          }
          makeOutputBox(bx);
        }
      }
      for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
        test = tests[_j];
        replaceRange(test, makeTestBox(test.leisureTest));
        totalTests++;
      }
    }
    return [pgm, auto, totalTests, notebookAutoNodes];
  };

  getDefName = function(ast) {
    if (ast instanceof Leisure_anno && getAnnoName(ast) === 'definition') {
      return getAnnoData(ast);
    } else {
      return null;
    }
  };

  getAst = function(bx, def) {
    var defName, _ref3;

    if (bx.ast != null) {
      patchFuncAst(bx.ast);
      bx.setAttribute('leisureFunc', (_ref3 = bx.ast.leisureName) != null ? _ref3 : '');
      return bx.ast;
    } else {
      def = def || bx.textContent;
      defName = getDefName(runMonad(rz(L_newParseLine)(lz(Nil))(lz(def))));
      setAst(bx, (defName ? {
        leisureName: defName,
        leisureSource: def
      } : {}));
      return bx.ast;
    }
  };

  setAst = function(bx, ast) {
    bx.ast = ast;
    return patchFuncAst(ast);
  };

  patchFuncAst = function(ast) {
    var parent;

    if ((ast != null ? ast.leisureName : void 0) != null) {
      parent = window[nameSub(ast.leisureName)];
      if (parent != null) {
        parent.ast = ast;
        parent.src = ast.leisureSource;
        return update("ast-" + ast.leisureName);
      }
    }
  };

  markPartialApplies = function(bx, def) {};

  textNode = function(text) {
    return document.createTextNode(text);
  };

  nodeFor = function(text) {
    if (typeof text === 'string') {
      return textNode(text);
    } else {
      return text;
    }
  };

  evalOutput = function(exBox, nofocus, cont) {
    var selector, stopUpdates, updateSelector, _ref3;

    exBox = getBox(exBox);
    if (!nofocus) {
      focusBox(exBox);
    }
    cleanOutput(exBox, true);
    selector = findUpdateSelector(exBox.source);
    if (selector) {
      exBox.setAttribute('leisureUpdate', selector);
    }
    makeOutputControls(exBox);
    _ref3 = getElements(exBox.firstChild, ['chooseUpdate', 'stopUpdates']), updateSelector = _ref3[0], stopUpdates = _ref3[1];
    updateSelector.addEventListener('change', function(evt) {
      return setUpdate(exBox, evt.target.value, true);
    });
    updateSelector.addEventListener('keydown', function(e) {
      c = e.charCode || e.keyCode || e.which;
      if (c === ENTER) {
        e.preventDefault();
        return updateSelector.blur();
      }
    });
    updateSelector.value = (exBox.getAttribute('leisureUpdate')) || '';
    exBox.updateSelector = updateSelector;
    return evalBox(exBox.source, exBox, cont);
  };

  findUpdateSelector = function(box) {
    var def, defType, leading, matched, name, u;

    if (def = box.textContent.match(rz(L_defPat))) {
      matched = def[0], leading = def[1], name = def[2], defType = def[3];
      if (u = leading.match(updatePat)) {
        return u[3];
      }
    }
  };

  getExprSource = function(box) {
    var b, s;

    s = window.getSelection();
    b = getBox(s.focusNode);
    if (b !== box || !s.rangeCount || s.getRangeAt(0).collapsed) {
      return box.textContent;
    } else {
      return getRangeText(s.getRangeAt(0));
    }
  };

  setUpdate = function(el, channel, preserveSource) {
    var ast, def, defType, index, leading, matched, name, r, txt, u;

    el.setAttribute('leisureUpdate', channel);
    if (channel) {
      el.classList.add('ui-state-highlight');
    } else {
      el.classList.remove('ui-state-highlight');
    }
    ast = getAst(el.source);
    txt = el.source.textContent;
    if (!preserveSource && (def = txt.match(rz(L_defPat)))) {
      matched = def[0], leading = def[1], name = def[2], defType = def[3];
      index = def.index;
      if (u = leading.match(updatePat)) {
        index += u.index + u[1].length + u[2].length;
        r = makeRange(el.source, index, index + u[3].length);
        r.deleteContents();
      } else {
        r = makeRange(el.source, index + leading.length, index + leading.length);
      }
      r.insertNode(textNode(channel));
      return el.source.normalize();
    }
  };

  hasMonadOutput = function(box) {
    var _ref3, _ref4;

    return ((_ref3 = box.firstElementChild) != null ? (_ref4 = _ref3.nextElementSibling) != null ? _ref4.nextElementSibling : void 0 : void 0) != null;
  };

  checkHideSource = function(box) {
    var hs;

    if (!box.hideOutputSource && hasMonadOutput(box)) {
      box.hideOutputSource = true;
      hs = createNode("<button class='editToggle' style='float:right'></button>");
      markupButton(hs);
      hs.addEventListener('click', function() {
        return toggleEdit(hs);
      });
      return box.firstElementChild.appendChild(hs);
    }
  };

  makeOutputControls = function(exBox) {
    if (exBox.firstChild.firstChild === exBox.firstChild.lastChild) {
      exBox.firstChild.insertBefore(createFragment("<button onclick='Notebook.clearOutputBox(this)'>X</button>"), exBox.firstChild.firstChild);
      exBox.firstChild.appendChild(createFragment("<button onclick='Notebook.makeTestCase(this)' leisureId='makeTestCase'>Make test\ncase</button><b>Update: </b><input type='text'\nplaceholder='Click for updating' list='channelList' leisureId='chooseUpdate'></input><button\nonclick='Notebook.clearUpdates(this)' leisureId='stopUpdates'>Stop Updates</button>"));
      markupButtons(exBox);
      return exBox.classList.add('fatControls');
    }
  };

  showOutputSource = function(output) {
    output.classList.remove('hidingSource');
    return output.source.style.display = '';
  };

  hideOutputSource = function(output) {
    console.log("HIDE: " + output);
    output.classList.add('hidingSource');
    return output.source.style.display = 'none';
  };

  toggleEdit = function(toggleButton) {
    var output;

    output = getBox(toggleButton);
    if (output.classList.contains('hidingSource')) {
      return showOutputSource(output);
    } else {
      return hideOutputSource(output);
    }
  };

  clearUpdates = function(widget, preserveSource) {
    var exBox;

    exBox = getBox(widget);
    exBox.updateSelector.value = '';
    return setUpdate(exBox, '', preserveSource);
  };

  update = function(type, env) {
    var node, _i, _len, _ref3, _results;

    env = env != null ? env : defaultEnv;
    _ref3 = env.owner.querySelectorAll("[leisureUpdate~='" + type + "']");
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      node = _ref3[_i];
      _results.push(evalOutput(node, true));
    }
    return _results;
  };

  clearOutputBox = function(exBox) {
    clearUpdates(exBox, true);
    return cleanOutput(exBox);
  };

  cleanOutput = function(exBox, preserveControls) {
    var fc, _results;

    exBox = getBox(exBox);
    exBox.classList.remove('fatControls');
    if (!preserveControls) {
      exBox.hideOutputSource = null;
      fc = exBox.firstChild;
      fc.removeChild(fc.firstChild);
      while (fc.firstChild !== fc.lastChild) {
        fc.removeChild(fc.lastChild);
      }
    }
    _results = [];
    while (exBox.firstChild !== exBox.lastChild) {
      _results.push(exBox.removeChild(exBox.lastChild));
    }
    return _results;
  };

  makeTestCase = function(exBox) {
    var box, output, source, test;

    output = getBox(exBox);
    source = output.source;
    test = {
      expr: source.textContent.trim(),
      expected: escapeHtml(Parse.print(output.result))
    };
    box = makeTestBox(test, owner(exBox));
    source.parentNode.insertBefore(box, source);
    remove(source);
    remove(output);
    box.parentNode.insertBefore(textNode('\uFEFF'), box);
    box.parentNode.insertBefore(textNode('\uFEFF'), box.nextSibling);
    if (owner(box).autorunState) {
      return clickTest(box);
    }
  };

  makeTestBox = function(test, owner, src) {
    var bx, s;

    src = src != null ? src : "#@test " + (JSON.stringify(test.expr)) + "\n#@expected " + (JSON.stringify(test.expected));
    s = codeSpan(src, 'codeTest');
    s.appendChild(textNode('\n'));
    s.setAttribute('generatedNL', '');
    bx = codeBox('codeMainTest');
    bx.testSrc = s;
    bx.setAttribute('class', 'codeMainTest notrun');
    bx.setAttribute('contenteditable', 'false');
    bx.appendChild(s);
    bx.addEventListener('click', (function() {
      return clickTest(bx);
    }), true);
    bx.test = test;
    return bx;
  };

  clickTest = function(bx) {
    var exprBox, r, sp;

    if (bx.classList.contains('notrun')) {
      return runTest(bx);
    } else {
      r = document.createRange();
      r.setStartBefore(bx);
      r.setEndAfter(bx);
      r.deleteContents();
      sp = codeSpan(bx.test.expr, 'codeExpr');
      sp.setAttribute('generatedNL', '');
      exprBox = box(r, 'codeMainExpr', true);
      exprBox.appendChild(sp);
      return makeOutputBox(exprBox);
    }
  };

  runTest = function(bx) {
    var passed, test;

    test = bx.test;
    passed = true;
    processLine(prepExpr(test.expr), {
      values: {},
      require: req,
      write: function(str) {
        return console.log(str);
      },
      debug: debug,
      prompt: function(msg, cont) {
        return cont(null);
      },
      processResult: function(result, ast) {
        return passed = showResult(bx, escapeHtml(String(result)), escapeHtml(test.expected));
      },
      err: function() {
        return passed = false;
      },
      presentValue: function(x) {
        return x;
      }
    }, identity);
    return passed;
  };

  showResult = function(bx, actual, expected) {
    var cl;

    cl = bx.classList;
    cl.remove('notrun');
    if (actual === expected) {
      cl.remove('failed');
      cl.add('passed');
      bx.testSrc.innerHTML = "#@test " + (JSON.stringify(bx.test.expr)) + "\n#@expected " + (JSON.stringify(bx.test.expected));
    } else {
      cl.remove('passed');
      cl.add('failed');
      bx.testSrc.innerHTML = "#@test " + (JSON.stringify(bx.test.expr)) + "\n#@expected " + (JSON.stringify(bx.test.expected)) + "\n#@result " + (JSON.stringify(actual));
      console.log("expected <" + expected + "> but got <" + actual + ">");
    }
    return actual === expected;
  };

  prepExpr = function(txt) {
    return txt;
  };

  envFor = function(box) {
    var env, exBox, widget;

    exBox = getBox(box);
    widget = null;
    env = {
      fileSettings: {},
      debug: debug,
      finishedEvent: function(evt, channel) {
        return update(channel != null ? channel : 'app', this);
      },
      owner: owner(box),
      box: box,
      require: req,
      write: function(msg) {
        var div;

        div = document.createElement('div');
        div.classList.add('outputDiv');
        div.innerHTML = "" + msg + "\n";
        exBox.appendChild(div);
        checkHideSource(exBox);
        return markupButtons(exBox);
      },
      getWidget: function() {
        if (!widget) {
          widget = document.createElement("DIV");
          exBox.appendChild(widget);
        }
        return widget;
      },
      destroyWidget: function() {
        if (widget) {
          return remove(widget);
        }
      },
      prompt: function(msg, cont) {
        return cont(window.prompt(msg));
      },
      processResult: function(result, ast) {
        box.result = result;
        return setAst(box, ast);
      },
      presentValue: presentValue,
      err: function(err) {
        var btn, _ref3;

        btn = box.querySelector('[leisureId="makeTestCase"]');
        if (btn) {
          remove(btn);
        }
        return this.write("<div class='errorDiv'>" + escapeHtml("ERROR: " + (err.leisureContext ? "" + err + ":\n" + (leisureContextString(err)) + "\n" : '') + ((_ref3 = err.stack) != null ? _ref3 : err)) + "</div>");
      },
      cleanup: function() {
        this.destroyWidget();
        if (root.lastEnv === env) {
          return root.lastEnv = null;
        }
      }
    };
    env.__proto__ = defaultEnv;
    env.fileSettings.uri = new URI(document.location.href);
    root.lastEnv = env;
    return env;
  };

  leisureContextString = function(err) {
    var func, offset;

    return ((function() {
      var _i, _len, _ref3, _ref4, _results;

      _ref3 = err.leisureContext.toArray();
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        _ref4 = _ref3[_i], func = _ref4[0], offset = _ref4[1];
        _results.push(linkSource(func, offset));
      }
      return _results;
    })()).join('\n');
  };

  linkSource = function(funcName, offset) {};

  showSource = function(funcName, offset) {};

  makeOutputBox = function(source) {
    var cl, node, _i, _len, _ref3;

    node = document.createElement('div');
    node.setAttribute('LeisureOutput', '');
    node.setAttribute('Leisure', '');
    node.setAttribute('LeisureBox', '');
    _ref3 = boxClasses.output;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      cl = _ref3[_i];
      node.classList.add(cl);
    }
    node.setAttribute('contentEditable', 'false');
    node.source = source;
    source.output = node;
    node.innerHTML = "<div class='controls'><button onclick='Notebook.evalOutput(this)'>-&gt;</button></div>";
    markupButtons(node);
    source.parentNode.insertBefore(node, source.nextSibling);
    return node;
  };

  codeSpan = function(text, boxType) {
    var node;

    node = document.createElement('span');
    node.setAttribute(boxType, '');
    node.setAttribute('Leisure', '');
    node.setAttribute('class', boxType);
    if (text) {
      node.appendChild(nodeFor(text));
    }
    return node;
  };

  codeBox = function(boxType) {
    var node;

    node = document.createElement('div');
    addBoxClasses(node, boxType);
    node.setAttribute('LeisureBox', '');
    node.setAttribute('Leisure', '');
    node.addEventListener('compositionstart', function(e) {
      return checkMutateFromModification(e);
    });
    return node;
  };

  box = function(range, boxType, empty) {
    var node;

    node = codeBox(boxType);
    if (empty) {
      range.deleteContents();
    } else {
      node.appendChild(range.extractContents());
    }
    range.insertNode(node);
    return node;
  };

  linePat = new RegExp("(" + (rz(L_linePat).source) + ")");

  findDefs = function(el) {
    var def, ranges, rest, rng, txt;

    txt = el.textContent;
    rest = txt;
    ranges = [];
    while ((def = rest.match(rz(L_unanchoredDefPat))) && def[1].length !== rest.length) {
      rng = getRanges(el, txt, rest, def, txt.length - rest.length);
      if (rng) {
        rest = rng.next;
        if (rng) {
          ranges.push(rng);
        } else {
          break;
        }
      } else {
        break;
      }
    }
    return ranges;
  };

  testPat = /(#@test([^\n]*)\n#@expected([^\n]*))\n/m;

  getRanges = function(el, txt, rest, def, restOff) {
    var body, bodyStart, defType, endPat, ex, exEnd, leadOff, leading, leadingSpaces, lm, m, m2, mainEnd, mainStart, matchStart, matched, name, nameEnd, nameRaw, next, outerRange, r, rest1, t, tOff, tests, textStart, _ref3, _ref4, _ref5, _ref6;

    _ref3 = m = def, matched = _ref3[0], leading = _ref3[1], nameRaw = _ref3[2], defType = _ref3[3];
    if (!rest.trim()) {
      return null;
    } else if (m == null) {
      return [makeRange(el, restOff, txt.length), null, null, [], ''];
    } else {
      tests = [];
      matchStart = restOff + m.index;
      if (defType == null) {
        name = null;
      } else if (nameRaw[0] === ' ') {
        name = null;
        defType = null;
      } else {
        name = nameRaw.trim() || null;
      }
      rest1 = rest.substring((defType ? matched : leading).length);
      endPat = rest1.match(/\n+[^\s]|\n?$/);
      next = endPat ? rest1.substring(endPat.index) : rest1;
      mainEnd = txt.length - next.length;
      t = leading;
      leadOff = tOff = restOff;
      while (m2 = t.match(testPat)) {
        r = makeRange(el, tOff + m2.index, tOff + m2.index + m2[1].length);
        r.leisureTest = {
          expr: JSON.parse(m2[2]),
          expected: JSON.parse(m2[3])
        };
        tests.push(r);
        tOff += m2.index + m2[1].length;
        t = leading.substring(tOff - leadOff);
      }
      if (name) {
        mainStart = matchStart + ((_ref4 = leading != null ? leading.length : void 0) != null ? _ref4 : 0);
        nameEnd = mainStart + name.length;
        leadingSpaces = (rest1.match(/^\s*/))[0].length;
        bodyStart = txt.length - (rest1.length - leadingSpaces);
        outerRange = makeRange(el, mainStart, mainEnd);
        return {
          main: outerRange,
          name: txt.substring(mainStart, nameEnd),
          def: defType,
          body: txt.substring(bodyStart, mainEnd),
          tests: tests,
          next: next
        };
      } else {
        mainStart = defType === '=' ? restOff + m.index + m[0].length : matchStart + ((_ref5 = leading != null ? leading.length : void 0) != null ? _ref5 : 0);
        ex = txt.substring(mainStart, mainEnd).match(/^(.*[^ \n])[ \n]*$/);
        exEnd = ex ? mainStart + ex[1].length : mainEnd;
        body = txt.substring(mainStart, exEnd);
        if (body.trim()) {
          textStart = restOff + m.index + (t ? leading.length - t.length : 0);
          if ((t != null) && (lm = t.match(/^[ \n]+/))) {
            textStart += lm[0].length;
          }
          if (m = t.match(/(?:^|\n)#@auto( +[^\n]*)?(\n|$)/)) {
            outerRange = makeRange(el, textStart, exEnd);
            outerRange.leisureAuto = JSON.parse("{" + ((_ref6 = m[1]) != null ? _ref6 : '') + "}");
            if (outerRange.leisureAuto.mode === 'notebook') {
              outerRange.leisureNode = el;
              outerRange.leisureStart = textStart;
            }
            return {
              main: outerRange,
              name: null,
              def: null,
              body: txt.substring(textStart, exEnd),
              tests: tests,
              fullText: txt.substring(textStart, exEnd),
              next: next
            };
          } else {
            outerRange = makeRange(el, textStart, exEnd);
            return {
              main: outerRange,
              name: null,
              def: null,
              body: txt.substring(textStart, exEnd),
              tests: tests,
              next: next
            };
          }
        } else {
          return {
            main: null,
            name: null,
            def: null,
            body: null,
            tests: tests,
            next: next
          };
        }
      }
    }
  };

  makeRange = function(el, off1, off2) {
    var node, offset, range, _ref3, _ref4;

    range = document.createRange();
    _ref3 = grp(el, off1, false), node = _ref3[0], offset = _ref3[1];
    if ((offset != null) && offset > 0) {
      range.setStart(node, offset);
    } else {
      range.setStartBefore(node);
    }
    if (off2 != null) {
      _ref4 = grp(el, off2, true), node = _ref4[0], offset = _ref4[1];
      if (offset != null) {
        range.setEnd(node, offset);
      } else {
        range.setEndAfter(node);
      }
    }
    return range;
  };

  grp = function(node, charOffset, end) {
    var child, offset, ret, _ref3;

    _ref3 = ret = getRangePosition(node.firstChild, charOffset, end), child = _ref3[0], offset = _ref3[1];
    if (child) {
      return ret;
    } else if (node.lastChild) {
      return nodeEnd(node.lastChild);
    } else {
      return [node, end ? 1 : 0];
    }
  };

  getRangePosition = function(node, charOffset, end) {
    var newNode, newOff, ret, _ref3;

    if (!node) {
      return [null, charOffset];
    } else if (node.nodeType === 3) {
      if (node.length > (end ? charOffset - 1 : charOffset)) {
        return [node, charOffset];
      } else {
        ret = continueRangePosition(node, charOffset - node.length, end);
        return ret;
      }
    } else if (node.nodeName === 'BR') {
      if (charOffset === (end ? 1 : 0)) {
        return [node];
      } else {
        return continueRangePosition(node, charOffset, end);
      }
    } else if (node.firstChild != null) {
      _ref3 = getRangePosition(node.firstChild, charOffset, end), newNode = _ref3[0], newOff = _ref3[1];
      if (newNode != null) {
        return [newNode, newOff];
      } else {
        return continueRangePosition(node, newOff, end);
      }
    } else {
      return continueRangePosition(node, charOffset, end);
    }
  };

  continueRangePosition = function(node, charOffset, end) {
    var newOff;

    newOff = charOffset - ((addsLine(node)) || ((node.nextSibling != null) && (addsLine(node.nextSibling))) ? 1 : 0);
    if (end && (newOff === 1 || charOffset === 1)) {
      return nodeEnd(node);
    } else if (node.nextSibling != null) {
      return getRangePosition(node.nextSibling, newOff, end);
    } else {
      return continueRangePosition(node.parentNode, newOff, end);
    }
  };

  nodeEnd = function(node) {
    return [node, node.nodeType === 3 ? node.length : node.childNodes.length - 1];
  };

  addsLine = function(node) {
    return (node != null ? node.nodeType : void 0) === 1 && (node.nodeName === 'BR' || (getComputedStyle(node, null).display === 'block' && node.childNodes.length > 0));
  };

  req = function(file, cont) {
    var name, s;

    if (!(file.match(/\.js$/))) {
      file = "" + file + ".js";
    }
    name = file.substring(0, file.length - 3);
    s = document.createElement('script');
    s.setAttribute('src', file);
    s.addEventListener('load', function() {
      Leisure.processDefs(global[name], global);
      if (cont) {
        return cont(rz(L_false));
      }
    });
    return document.head.appendChild(s);
  };

  postLoadQueue = [];

  loaded = false;

  queueAfterLoad = function(func) {
    if (loaded) {
      return func();
    } else {
      return postLoadQueue.push(func);
    }
  };

  /*
  # handle focus manually, because grabbing focus and blur events doesn't seem to work for the parent
  */


  docFocus = null;

  codeFocus = null;

  findCurrentCodeHolder = function() {
    var _ref3;

    return focusBox((_ref3 = window.getSelection()) != null ? _ref3.focusNode : void 0);
  };

  focusBox = function(box) {
    var newCode, old, _ref3;

    newCode = null;
    while (box && (box.nodeType !== 1 || !isLeisureCode(box))) {
      if (box.nodeType === 1 && ((box.getAttribute('LeisureBox')) != null)) {
        newCode = box;
      }
      box = box.parentNode;
    }
    if (box !== docFocus) {
      if (docFocus != null) {
        docFocus.classList.remove('focused');
      }
      docFocus = box;
      if (box != null) {
        if ((_ref3 = box.classList) != null) {
          _ref3.add('focused');
        }
      }
    }
    if (newCode !== codeFocus) {
      old = codeFocus;
      codeFocus = newCode;
      if (old) {
        return acceptCode(old);
      }
    }
  };

  owner = function(box) {
    while (box && (box.nodeType !== 1 || !isLeisureCode(box))) {
      box = box.parentNode;
    }
    return box;
  };

  hiddenPat = /(^|\n)#@hidden *(\n|$)/;

  evalBox = function(box, envBox, cont) {
    var env;

    env = envBox != null ? envFor(envBox) : null;
    processLine(box.textContent, env, function(result) {
      if (env != null) {
        if (typeof env.cleanup === "function") {
          env.cleanup();
        }
      }
      return (cont != null ? cont : function(x) {
        return x;
      })(result);
    });
    getAst(box);
    if (box.output && hasMonadOutput(box.output) && box.textContent.match(hiddenPat)) {
      return hideOutputSource(box.output);
    } else if (box.textContent.match(hiddenPat)) {
      return console.log("NO MONAD, BUT MATCHES HIDDEN");
    }
  };

  acceptCode = function(box) {
    if ((box.getAttribute('codemain')) != null) {
      evalBox(box);
      update('compile');
      if (owner(box).autorunState) {
        return runTests(owner(box));
      }
    }
  };

  errString = function(err) {
    return err.stack;
  };

  evaluating = false;

  evaluationQueue = [];

  evalNodes = function(nodes) {
    if (evaluating) {
      return evaluationQueue.push(nodes);
    } else {
      return chainEvalNodes(nodes);
    }
  };

  chainEvalNodes = function(nodes) {
    evaluating = true;
    return runAuto(nodes, 0, function() {
      if (evaluationQueue.length) {
        return chainEvalNodes(evaluationQueue.shift());
      } else {
        return evaluating = false;
      }
    });
  };

  evalDoc = function(el) {
    var auto, autoNodes, e, err, pgm, x, _ref3;

    _ref3 = initNotebook(el), pgm = _ref3[0], auto = _ref3[1], x = _ref3[2], autoNodes = _ref3[3];
    try {
      if (auto || autoNodes) {
        auto = "do\n  " + ((auto != null ? auto : '#').trim().replace(/\n/g, '\n  ')) + "\n  delay\n  finishLoading";
        global.noredefs = false;
        Notebook.queueAfterLoad(function() {
          evalDocCode(el, pgm);
          if (el.autorunState) {
            runTests(el);
          }
          return evalNodes(autoNodes);
        });
        e = envFor(el);
        e.write = function() {};
        e.err = function(err) {
          return alert('bubba ' + errString(err));
        };
        return processLine(auto, e, identity);
      } else {
        return evalDocCode(el, pgm);
      }
    } catch (_error) {
      err = _error;
      return showError(err, "Error compiling " + pgm);
    }
  };

  runAuto = function(nodes, index, cont) {
    var node;

    if (index < nodes.length) {
      console.log("RUNNING AUTO: " + index);
      node = nodes[index];
      console.log("evalOutput", node, node.output);
      return evalOutput(node.output, false, function() {
        return runAuto(nodes, index + 1, cont);
      });
    } else {
      return (cont != null ? cont : function() {})();
    }
  };

  processLine = function(text, env, cont) {
    var err;

    if (text) {
      try {
        return runMonad(rz(L_newParseLine)(lz(Nil))(lz(text)), env, function(ast) {
          var err, result;

          try {
            if (getType(ast) === 'parseErr') {
              env.write(env.presentValue(ast));
              if (typeof env.processResult === "function") {
                env.processResult(ast);
              }
              return cont(ast);
            } else {
              result = eval("(" + (gen(ast)) + ")");
              env.write(env.presentValue(result));
              if (isMonad(result)) {
                return runMonad(result, env, function(result) {
                  env.processResult(result);
                  return cont(result);
                });
              } else {
                if (typeof env.processResult === "function") {
                  env.processResult(result);
                }
                return cont(result);
              }
            }
          } catch (_error) {
            err = _error;
            console.log("ERROR: " + err.stack);
            env.write(env.presentValue(err.stack));
            if (typeof env.processResult === "function") {
              env.processResult(err.stack);
            }
            return cont(err.stack);
          }
        });
      } catch (_error) {
        err = _error;
        console.log("ERROR: " + err.stack);
        env.write(env.presentValue(err.stack));
        if (typeof env.processResult === "function") {
          env.processResult(err.stack);
        }
        return cont(err.stack);
      }
    } else {
      return cont('');
    }
  };

  showError = function(e, msg) {
    console.log(msg);
    console.log(e);
    console.log(e.stack);
    return alert(e.stack);
  };

  evalDocCode = function(el, pgm) {
    return runMonad(rz(L_runFile)(lz(pgm)), defaultEnv, function(result) {
      var node, _i, _len, _ref3, _results;

      _ref3 = el.querySelectorAll('[codeMain]');
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        node = _ref3[_i];
        _results.push(getAst(node));
      }
      return _results;
    });
  };

  define('getDocument', lz(makeSyncMonad(function(env, cont) {
    return cont(peerGetDocument());
  })));

  define('getLink', function() {
    return 0;
  });

  define('replaceDocument', lz(function(str) {
    return makeSyncMonad(function(env, cont) {
      replaceContents(rz(str));
      return cont(rz(L_true));
    });
  }));

  define('gdriveOpen', lz(makeMonad(function(env, cont) {
    return GdriveStorage.runOpen(function(json) {
      var _ref3;

      if ((json != null ? json.action : void 0) === 'picked' && ((_ref3 = json.docs) != null ? _ref3.length : void 0) > 0) {
        return GdriveStorage.loadFile(json.docs[0].id, function() {
          return cont(rz(_some)(lz(json.docs[0].title)));
        });
      } else {
        return cont(rz(_none));
      }
    });
  })));

  define('getFilename', lz(makeSyncMonad(function(env, cont) {
    var _ref3;

    return cont((_ref3 = filename != null ? filename.pathName() : void 0) != null ? _ref3 : '');
  })));

  define('setURI', lz(function(uri) {
    return makeSyncMonad(function(env, cont) {
      setFilename(rz(uri));
      return cont(rz(L_true));
    });
  }));

  define('getURI', lz(makeSyncMonad(function(env, cont) {
    var _ref3;

    return cont((_ref3 = filename != null ? filename.toString() : void 0) != null ? _ref3 : '');
  })));

  define('finishLoading', lz(makeMonad(function(env, cont) {
    var i, _i, _len;

    loaded = true;
    for (_i = 0, _len = postLoadQueue.length; _i < _len; _i++) {
      i = postLoadQueue[_i];
      rz(i);
    }
    postLoadQueue = [];
    return cont(rz(L_false));
  })));

  define('markupButtons', lz(makeSyncMonad(function(env, cont) {
    if (env.box) {
      markupButtons(env.box);
    }
    return cont(rz(L_false));
  })));

  define('alert', lz(function(str) {
    return makeSyncMonad(function(env, cont) {
      window.alert(rz(str));
      return cont(rz(L_false));
    });
  }));

  define('bindEvent', lz(function(selector) {
    return function(eventName) {
      return function(func) {
        return makeSyncMonad(function(env, cont) {
          var node;

          node = env.box.querySelector(rz(selector));
          if (!node) {
            node = document.body.querySelector(rz(selector));
          }
          console.log("ADDING EVENT: " + (rz(selector)) + " " + (rz(eventName)) + " NODE: " + node);
          if (node) {
            node.addEventListener(eventName(), function(e) {
              console.log("EVENT: " + (rz(selector)) + " " + (rz(eventName)) + " " + (rz(func)));
              return runMonad(rz(func)(lz(e)), envFor(e.target), function() {});
            });
          }
          return cont(rz(L_false));
        });
      };
    };
  }));

  define('quit', lz(window.close()));

  define('config', lz(function(expr) {
    return makeSyncMonad(function(env, cont) {
      switch (rz(expr)) {
        case 'autoTest':
          autoRun(env.owner, true);
      }
      return cont(rz(L_false));
    });
  }));

  define('notebookSelection', lz(function(func) {
    return makeSyncMonad(function(env, cont) {
      var bx, offset, p1, p2, r, r2, sel;

      sel = window.getSelection();
      bx = getBox(sel.focusNode);
      if ((bx != null) && hasFunc(bx, func)) {
        offset = 0;
        r = sel.getRangeAt(0);
        window.r = r;
        r2 = document.createRange();
        r2.setStart(bx, 0);
        r2.setEnd(r.startContainer, r.startOffset);
        p1 = r2.cloneContents().textContent.length - offset;
        if (!r.collapsed) {
          r2.setEnd(r.endContainer, r.endOffset);
        }
        p2 = r2.cloneContents().textContent.length - offset;
        return cont(rz(_some2)(lz(p1))(lz(p2)));
      } else {
        return cont(rz(_none));
      }
    });
  }));

  hasFunc = function(bx, func) {
    var ast;

    ast = getAst(bx);
    return ast === func().ast || ast === func.ast;
  };

  define('notebookAst', lz(function(func) {
    return makeSyncMonad(function(env, cont) {
      var ast, node;

      if (func.leisureName != null) {
        node = document.querySelector("[LeisureFunc=" + func.leisureName + "]");
        if (node != null) {
          ast = getAst(node);
          return cont(rz(_some)(lz(ast)));
        }
      }
      return cont(rz(_none));
    });
  }));

  autoRun = function(el, state) {
    var _ref3;

    el.autorunState = state;
    return (_ref3 = el.autorun) != null ? _ref3.checked = state : void 0;
  };

  head = function(l) {
    return l(lz(function(hh) {
      return function(tt) {
        return rz(hh);
      };
    }));
  };

  tail = function(l) {
    return l(lz(function(hh) {
      return function(tt) {
        return rz(tt);
      };
    }));
  };

  id = function(v) {
    return rz(v);
  };

  getSvgElement = function(id) {
    var el, svg;

    if ((el = document.getElementById(id))) {
      return el;
    } else {
      svg = createNode("<svg id='HIDDEN_SVG' xmlns='http://www.w3.org/2000/svg' version='1.1' style='top: -100000; position: absolute'><text id='HIDDEN_TEXT'>bubba</text></svg>");
      document.body.appendChild(svg);
      return document.getElementById(id);
    }
  };

  svgMeasureText = function(text) {
    return function(style) {
      return function(f) {
        var bx, txt;

        txt = getSvgElement('HIDDEN_TEXT');
        if (rz(style)) {
          txt.setAttribute('style', rz(style));
        }
        txt.lastChild.textContent = rz(text);
        bx = txt.getBBox();
        return rz(f)(lz(bx.width))(lz(bx.height));
      };
    };
  };

  primconcatNodes = function(nodes) {
    if (nodes === rz(_nil)) {
      return "";
    } else {
      return (head(nodes))(id) + concatNodes(tail(nodes));
    }
  };

  transformedPoint = function(pt, x, y, ctm, ictm) {
    pt.x = x;
    pt.y = y;
    return pt.matrixTransform(ctm).matrixTransform(ictm);
  };

  svgMeasure = function(content) {
    return primSvgMeasure(content, baseStrokeWidth);
  };

  svgBetterMeasure = function(content) {
    return primSvgMeasure(content, transformStrokeWidth);
  };

  primSvgMeasure = function(content, transformFunc) {
    return function(f) {
      var bbox, g, pad, svg;

      svg = createNode("<svg xmlns='http://www.w3.org/2000/svg' version='1.1' style='top: -100000'><g>" + (content()) + "</g></svg>");
      document.body.appendChild(svg);
      g = svg.firstChild;
      bbox = g.getBBox();
      pad = getMaxStrokeWidth(g, g, svg, transformFunc);
      document.body.removeChild(svg);
      return rz(f)(lz(bbox.x - Math.ceil(pad / 2)))(lz(bbox.y - Math.ceil(pad / 2)))(lz(bbox.width + pad))(lz(bbox.height + pad));
    };
  };

  baseElements = ['path', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon'];

  getMaxStrokeWidth = function(el, base, svg, transformFunc) {
    var _ref3, _ref4;

    if (_ref3 = base.nodeName, __indexOf.call(baseElements, _ref3) >= 0) {
      svg.setAttribute('width', (_ref4 = getComputedStyle(base).strokeWidth) != null ? _ref4 : '0', svg);
      return transformFunc(el, svg.width.baseVal.value);
    } else if (base.nodeName === 'use') {
      return getMaxStrokeWidth(base, base.instanceRoot.correspondingElement, svg, transformFunc);
    } else if (base.nodeName === 'g') {
      return foldLeft((function(v, n) {
        return Math.max(v, getMaxStrokeWidth(n, n, svg, transformFunc));
      }), 0, el.childNodes);
    } else {
      return 0;
    }
  };

  baseStrokeWidth = function(el, w) {
    return w;
  };

  transformStrokeWidth = function(el, w) {
    var ctm, tp1, tp2, x, y;

    if (w === 0) {
      return 0;
    } else {
      ctm = el.getScreenCTM();
      tp1 = transformedPoint(pt, bx.x - Math.ceil(w), bx.y - Math.ceil(w), ctm, isctm);
      tp2 = transformedPoint(pt, bx.x + bx.width + Math.ceil(w), bx.y + bx.height + Math.ceil(w), ctm, isctm);
      x = tp2.x - tp1.x;
      y = tp2.y - tp1.y;
      return Math.sqrt(x * x + y * y);
    }
  };

  previousSibling = function(node) {
    while ((node != null ? node.parentNode : void 0) && !node.previousSibling) {
      node = node.parentNode;
    }
    return node != null ? node.previousSibling : void 0;
  };

  nextSibling = function(node) {
    while ((node != null ? node.parentNode : void 0) && !node.nextSibling) {
      node = node.parentNode;
    }
    return node != null ? node.nextSibling : void 0;
  };

  hideControlSection = function() {
    var controlSection;

    controlSection = document.body.querySelector('[leisureSection="Leisure Controls"]');
    if (!controlSection) {
      controlSection = document.createElement('DIV');
      document.body.insertBefore(controlSection, document.body.firstChild);
      root.markupElement(controlSection, "# Leisure Controls\n\n## File Save and Load\n```\nsaveFile\n\nsaveAs 'filename'\n\nsaveAs pickFile\n\nloadFile\n\nemptyFile\n```");
      unwrap(controlSection);
    }
    controlSection.classList.add(leisure_controls);
    return controlSection.classList.add(hidden);
  };

  define('printValue', lz(function(value) {
    return makeMonad(function(env, cont) {
      if (rz(value) !== rz(L_nil)) {
        env.write("" + (env.presentValue(rz(value))) + "\n");
      }
      return cont(L_false());
    });
  }));

  defaultEnv.require = req;

  root.svgMeasureText = svgMeasureText;

  root.svgMeasure = svgMeasure;

  root.initNotebook = initNotebook;

  root.bindNotebook = bindNotebook;

  root.bindAll = bindAll;

  root.evalOutput = evalOutput;

  root.makeTestCase = makeTestCase;

  root.cleanOutput = cleanOutput;

  root.clearOutputBox = clearOutputBox;

  root.envFor = envFor;

  root.queueAfterLoad = queueAfterLoad;

  root.evalDoc = evalDoc;

  root.getBox = getBox;

  root.makeRange = makeRange;

  root.grp = grp;

  root.changeTheme = changeTheme;

  root.setSnapper = setSnapper;

  root.update = update;

  root.clearUpdates = clearUpdates;

  root.showAst = showAst;

  root.toggleEdit = toggleEdit;

  root.showSource = showSource;

  root.bootNotebook = bootNotebook;

  root.createNode = createNode;

  root.ENTER = ENTER;

  root.textNode = textNode;

  root.cleanEmptyNodes = cleanEmptyNodes;

  root.isLeisureCode = isLeisureCode;

  root.getElementCode = getElementCode;

  root.runTests = runTests;

  root.previousSibling = previousSibling;

  root.nextSibling = nextSibling;

  root.presentLeisureCode = presentLeisureCode;

  root.mergeLeisureCode = mergeLeisureCode;

  root.highlightNotebookFunction = highlightNotebookFunction;

  root.ESC = ESC;

  root.HOME = HOME;

  root.END = END;

  root.PAGE_UP = PAGE_UP;

  root.PAGE_DOWN = PAGE_DOWN;

  root.LEFT_ARROW = LEFT_ARROW;

  root.UP_ARROW = UP_ARROW;

  root.RIGHT_ARROW = RIGHT_ARROW;

  root.DOWN_ARROW = DOWN_ARROW;

  root.arrows = arrows;

  root.closeWindow = closeWindow;

  root.markupButton = markupButton;

  root.markupButtons = markupButtons;

  root.getAst = getAst;

  root.insertControls = insertControls;

  root.delay = delay;

  root.setFilename = setFilename;

  root.unwrap = unwrap;

  root.remove = remove;

  root.wrapRange = wrapRange;

  root.replaceContents = replaceContents;

  root.event = event;

}).call(this);

/*
*/

})(self)
},{"./ast":1,"./base":2,"./gen":4,"./lodash.min":6,"./runtime":10}],10:[function(require,module,exports){
(function(process,global){// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var Monad, Nil, SimpyCons, actors, amt, ast2Json, asyncMonad, basicCall, booleanFor, call, callMonad, cons, consFrom, continueMonads, curry, defaultEnv, define, ensureLeisureClass, functionInfo, getDataType, getMonadSyncMode, getType, getValue, hamt, head, identity, isMonad, lazy, left, lz, makeHamt, makeMonad, makeSyncMonad, monadModeSync, nameSub, newRunMonad, nextMonad, nextNode, none, parensContent, parensEnd, parensStart, readDir, readFile, replaceErr, resolve, right, root, runMonad, rz, setDataType, setType, setValue, setWarnAsync, simpyCons, some, statFile, strCoord, strFromList, strToList, subcurry, tail, tokenPos, tokenString, trampCurry, values, warnAsync, withSyncModeDo, writeFile, _, _false, _identity, _ref, _ref1, _true,
    __slice = [].slice;

  _ref = root = module.exports = require('./base'), readFile = _ref.readFile, statFile = _ref.statFile, readDir = _ref.readDir, writeFile = _ref.writeFile, defaultEnv = _ref.defaultEnv, SimpyCons = _ref.SimpyCons, simpyCons = _ref.simpyCons, resolve = _ref.resolve, lazy = _ref.lazy;

  _ref1 = require('./ast'), define = _ref1.define, cons = _ref1.cons, Nil = _ref1.Nil, head = _ref1.head, tail = _ref1.tail, getType = _ref1.getType, getDataType = _ref1.getDataType, ast2Json = _ref1.ast2Json, ensureLeisureClass = _ref1.ensureLeisureClass, setType = _ref1.setType, setDataType = _ref1.setDataType, functionInfo = _ref1.functionInfo, nameSub = _ref1.nameSub;

  _ = require('./lodash.min');

  amt = require('persistent-hash-trie');

  rz = resolve;

  lz = lazy;

  call = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return basicCall(args, defaultEnv, identity);
  };

  callMonad = function() {
    var args, cont, env, _i;

    args = 3 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 2) : (_i = 0, []), env = arguments[_i++], cont = arguments[_i++];
    return basicCall(args, env, cont);
  };

  basicCall = function(args, env, cont) {
    var arg, res, _i, _len, _ref2;

    res = rz(global["L_" + args[0]]);
    _ref2 = args.slice(1);
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      arg = _ref2[_i];
      res = (function(arg) {
        return res(lz(arg));
      })(arg);
    }
    return runMonad(res, env, cont);
  };

  consFrom = function(array, i) {
    i = i || 0;
    if (i < array.length) {
      return cons(array[i], consFrom(array, i + 1));
    } else {
      return rz(L_nil);
    }
  };

  identity = function(x) {
    return x;
  };

  _identity = function(x) {
    return rz(x);
  };

  _true = setType((function(a) {
    return function(b) {
      return rz(a);
    };
  }), 'true');

  _false = setType((function(a) {
    return function(b) {
      return rz(b);
    };
  }), 'false');

  left = function(x) {
    return setType((function(lCase) {
      return function(rCase) {
        return rz(lCase)(lz(x));
      };
    }), 'left');
  };

  right = function(x) {
    return setType((function(lCase) {
      return function(rCase) {
        return rz(rCase)(lz(x));
      };
    }), 'right');
  };

  some = function(x) {
    return setType((function(someCase) {
      return function(noneCase) {
        return rz(someCase)(lz(x));
      };
    }), 'some');
  };

  none = setType((function(someCase) {
    return function(noneCase) {
      return rz(noneCase);
    };
  }), 'none');

  booleanFor = function(bool) {
    if (bool) {
      return rz(L_true);
    } else {
      return rz(L_false);
    }
  };

  define('eq', lz(function(a) {
    return function(b) {
      return booleanFor(rz(a) === rz(b));
    };
  }));

  define('==', lz(function(a) {
    return function(b) {
      return booleanFor(rz(a) === rz(b));
    };
  }));

  define('hasType', lz(function(data) {
    return function(func) {
      if (typeof rz(func) === 'string') {
        return booleanFor(getType(rz(data)) === rz(func));
      } else {
        return booleanFor(getType(rz(data)) === getDataType(rz(func)));
      }
    };
  }));

  define('getDataType', lz(function(func) {
    if (typeof rz(func) === 'string') {
      return rz(func);
    } else {
      return getDataType(rz(func));
    }
  }));

  define('assert', lz(function(bool) {
    return function(msg) {
      return function(expr) {
        return rz(bool)(expr)(function() {
          throw new Error(rz(msg));
        });
      };
    };
  }));

  define('assertLog', lz(function(bool) {
    return function(msg) {
      return function(expr) {
        return rz(bool)(expr)(function() {
          console.log(new Error(rz(msg)).stack);
          console.log("LOGGED ERROR -- RESUMING EXECUTION...");
          return rz(expr);
        });
      };
    };
  }));

  define('+', lz(function(x) {
    return function(y) {
      return rz(x) + rz(y);
    };
  }));

  define('-', lz(function(x) {
    return function(y) {
      return rz(x) - rz(y);
    };
  }));

  define('*', lz(function(x) {
    return function(y) {
      return rz(x) * rz(y);
    };
  }));

  define('/', lz(function(x) {
    return function(y) {
      return rz(x) / rz(y);
    };
  }));

  define('%', lz(function(x) {
    return function(y) {
      return rz(x) % rz(y);
    };
  }));

  define('<', lz(function(x) {
    return function(y) {
      return booleanFor(rz(x) < rz(y));
    };
  }));

  define('<=', lz(function(x) {
    return function(y) {
      return booleanFor(rz(x) <= rz(y));
    };
  }));

  define('>', lz(function(x) {
    return function(y) {
      return booleanFor(rz(x) > rz(y));
    };
  }));

  define('>=', lz(function(x) {
    return function(y) {
      return booleanFor(rz(x) >= rz(y));
    };
  }));

  define('floor', lz(function(x) {
    return Math.floor(rz(x));
  }));

  define('ceil', lz(function(x) {
    return Math.ceil(rz(x));
  }));

  define('min', lz(function(x) {
    return function(y) {
      return Math.min(rz(x), rz(y));
    };
  }));

  define('max', lz(function(x) {
    return function(y) {
      return Math.max(rz(x), rz(y));
    };
  }));

  define('round', lz(function(x) {
    return Math.round(rz(x));
  }));

  define('abs', lz(function(x) {
    return Math.abs(rz(x));
  }));

  define('sqrt', lz(function(x) {
    return Math.sqrt(rz(x));
  }));

  define('acos', lz(function(x) {
    return Math.acos(rz(x));
  }));

  define('asin', lz(function(x) {
    return Math.asin(rz(x));
  }));

  define('atan', lz(function(x) {
    return Math.atan(rz(x));
  }));

  define('atan2', lz(function(x) {
    return function(y) {
      return Math.atan2(rz(x), rz(y));
    };
  }));

  define('cos', lz(function(x) {
    return Math.cos(rz(x));
  }));

  define('log', lz(function(x) {
    return Math.log(rz(x));
  }));

  define('sin', lz(function(x) {
    return Math.sin(rz(x));
  }));

  define('tan', lz(function(x) {
    return Math.tan(rz(x));
  }));

  define('rand', function() {
    return makeSyncMonad(function(env, cont) {
      return cont(Math.random());
    });
  });

  define('randInt', lz(function(low) {
    return function(high) {
      return makeSyncMonad(function(env, cont) {
        return cont(Math.floor(rz(low) + Math.random() * rz(high)));
      });
    };
  }));

  define('^', lz(function(x) {
    return function(y) {
      return Math.pow(rz(x), rz(y));
    };
  }));

  define('_show', lz(function(data) {
    var _ref2;

    if ((_ref2 = typeof rz(data)) === 'string' || _ref2 === 'number' || _ref2 === 'boolean') {
      return JSON.stringify(rz(data));
    } else {
      return String(rz(data));
    }
  }));

  define('strString', lz(function(data) {
    return String(rz(data));
  }));

  define('_strAsc', lz(function(str) {
    return rz(str).charCodeAt(0);
  }));

  define('_strChr', lz(function(i) {
    return String.fromCharCode(rz(i));
  }));

  define('_strAt', lz(function(str) {
    return function(index) {
      return rz(str)[strCoord(rz(str), rz(index))];
    };
  }));

  define('_strStartsWith', lz(function(str) {
    return function(prefix) {
      return booleanFor(rz(str).substring(0, rz(prefix).length) === rz(prefix));
    };
  }));

  define('_strLen', lz(function(str) {
    return rz(str).length;
  }));

  define('_strToLowerCase', lz(function(str) {
    return rz(str).toLowerCase();
  }));

  define('_strToUpperCase', lz(function(str) {
    return rz(str).toUpperCase();
  }));

  define('_strReplace', lz(function(str) {
    return function(pat) {
      return function(repl) {
        return rz(str).replace(rz(pat), rz(repl));
      };
    };
  }));

  strCoord = function(str, coord) {
    if (coord < 0) {
      return str.length + coord;
    } else {
      return coord;
    }
  };

  define('_strSubstring', lz(function(str) {
    return function(start) {
      return function(end) {
        var a, b;

        a = strCoord(rz(str), rz(start));
        b = strCoord(rz(str), rz(end));
        if (b < a && rz(end) === 0) {
          b = rz(str).length;
        }
        return rz(str).substring(a, b);
      };
    };
  }));

  define('_strSplit', lz(function(str) {
    return function(pat) {
      return consFrom(rz(str).split(rz(pat) instanceof RegExp ? rz(pat) : new RegExp(rz(pat))));
    };
  }));

  define('_strCat', lz(function(list) {
    return _.map(rz(list).toArray(), function(el) {
      if (typeof el === 'string') {
        return el;
      } else {
        return rz(L_show)(lz(el));
      }
    }).join('');
  }));

  define('_strAdd', lz(function(s1) {
    return function(s2) {
      return rz(s1) + rz(s2);
    };
  }));

  define('_strMatch', lz(function(str) {
    return function(pat) {
      var groups, m, pos;

      m = rz(str).match((rz(pat) instanceof RegExp ? rz(pat) : new RegExp(rz(pat))));
      if (m) {
        groups = [];
        pos = 1;
        while (m[pos]) {
          groups.push(m[pos++]);
        }
        if (typeof m.index !== 'undefined') {
          return consFrom([m[0], consFrom(groups), m.index, m.input]);
        } else {
          return consFrom([m[0], consFrom(groups)]);
        }
      } else if (L_nil) {
        return rz(L_nil);
      } else {
        return Nil;
      }
    };
  }));

  define('_strToList', lz(function(str) {
    return strToList(rz(str));
  }));

  strToList = function(str) {
    if (str === '') {
      return Nil;
    } else {
      return cons(str[0], strToList(str.substring(1)));
    }
  };

  define('_strFromList', lz(function(list) {
    return strFromList(rz(list));
  }));

  strFromList = function(list) {
    if (list instanceof Leisure_nil) {
      return '';
    } else {
      return head(list) + strFromList(tail(list));
    }
  };

  define('_regexp', lz(function(str) {
    return new RegExp(rz(str));
  }));

  define('_regexpFlags', lz(function(str) {
    return function(flags) {
      return new RegExp(rz(str), rz(flags));
    };
  }));

  define('_jsonParse', lz(function(str) {
    return function(failCont) {
      return function(successCont) {
        var err, p;

        try {
          p = JSON.parse(rz(str));
          return rz(successCont)(lz(p));
        } catch (_error) {
          err = _error;
          return rz(failCont)(lz(err));
        }
      };
    };
  }));

  define('jsonStringify', lz(function(obj) {
    return function(failCont) {
      return function(successCont) {
        var err, s;

        try {
          s = JSON.stringify(rz(obj));
          return rz(successCont)(lz(s));
        } catch (_error) {
          err = _error;
          return rz(failCont)(lz(err));
        }
      };
    };
  }));

  define('getProperties', lz(function(func) {
    var _ref2;

    if ((_ref2 = rz(func)) != null ? _ref2.properties : void 0) {
      return rz(L_some)(lz(rz(func).properties));
    } else {
      return rz(L_none);
    }
  }));

  define('log', lz(function(str) {
    return function(res) {
      console.log(String(rz(str)));
      return rz(res);
    };
  }));

  makeMonad = function(guts) {
    var m;

    m = function() {};
    m.__proto__ = Monad.prototype;
    m.cmd = guts;
    m.type = 'monad';
    return m;
  };

  makeSyncMonad = function(guts) {
    var m;

    m = makeMonad(guts);
    m.sync = true;
    return m;
  };

  nextMonad = function(cont) {
    return cont;
  };

  replaceErr = function(err, msg) {
    err.message = msg;
    return err;
  };

  defaultEnv.write = function(str) {
    return process.stdout.write(str);
  };

  defaultEnv.err = function(err) {
    var _ref2;

    return this.write("ENV Error: " + ((_ref2 = err.stack) != null ? _ref2 : err));
  };

  defaultEnv.prompt = function() {
    throw new Error("Environment does not support prompting!");
  };

  monadModeSync = false;

  getMonadSyncMode = function() {
    return monadModeSync;
  };

  withSyncModeDo = function(newMode, block) {
    var err, oldMode, _ref2;

    oldMode = monadModeSync;
    monadModeSync = newMode;
    try {
      return block();
    } catch (_error) {
      err = _error;
      return console.log("ERR: " + ((_ref2 = err.stack) != null ? _ref2 : err));
    } finally {

    }
  };

  runMonad = function(monad, env, cont) {
    env = env != null ? env : root.defaultEnv;
    return withSyncModeDo(true, function() {
      return newRunMonad(monad, env, cont, []);
    });
  };

  isMonad = function(m) {
    return typeof m === 'function' && (m.cmd != null);
  };

  continueMonads = function(contStack, env) {
    return function(result) {
      return withSyncModeDo(false, function() {
        return newRunMonad(result, env, null, contStack);
      });
    };
  };

  asyncMonad = {
    toString: function() {
      return "<asyncMonadResult>";
    }
  };

  warnAsync = false;

  setWarnAsync = function(state) {
    return warnAsync = state;
  };

  newRunMonad = function(monad, env, cont, contStack) {
    var err, result, _ref2;

    if (cont) {
      contStack.push(cont);
    }
    try {
      while (true) {
        if (isMonad(monad)) {
          if (monad.binding) {
            contStack.push((function(bnd) {
              return function(x) {
                return bnd(lz(x));
              };
            })(rz(monad.binding)));
            monad = rz(monad.monad);
            continue;
          } else if (!monad.sync) {
            monadModeSync = false;
            if (warnAsync) {
              console.log("async monad");
            }
            monad.cmd(env, continueMonads(contStack, env));
            return asyncMonad;
          }
          result = monad.cmd(env, identity);
        } else {
          monadModeSync = true;
          result = monad;
        }
        if (!contStack.length) {
          return result;
        }
        monad = contStack.pop()(result);
      }
    } catch (_error) {
      err = _error;
      err = replaceErr(err, "\nERROR RUNNING MONAD, MONAD: " + monad + ", ENV: " + env + "...\n" + err.message);
      console.log((_ref2 = err.stack) != null ? _ref2 : err);
      if (env.errorHandlers.length) {
        return env.errorHandlers.pop()(err);
      }
    }
  };

  Monad = (function() {
    function Monad() {}

    Monad.prototype.toString = function() {
      return "Monad: " + (this.cmd.toString());
    };

    return Monad;

  })();

  global.L_runMonads = function(monadArray) {
    monadArray.reverse();
    return newRunMonad(0, defaultEnv, null, monadArray);
  };

  define('define', lz(function(name) {
    return function(arity) {
      return function(src) {
        return function(def) {
          return makeSyncMonad(function(env, cont) {
            define(rz(name), def, rz(arity), rz(src));
            return cont((typeof L_true !== "undefined" && L_true !== null ? rz(L_true) : _true));
          });
        };
      };
    };
  }));

  define('bind', lz(function(m) {
    return function(binding) {
      var bindMonad;

      bindMonad = makeMonad(function(env, cont) {});
      bindMonad.monad = m;
      bindMonad.binding = binding;
      return bindMonad;
    };
  }));

  values = {};

  define('protect', lz(function(value) {
    return makeMonad(function(env, cont) {
      var hnd;

      hnd = function(err) {
        var _ref2, _ref3;

        console.log("PROTECTED ERROR: " + ((_ref2 = err.stack) != null ? _ref2 : err));
        return cont(left((_ref3 = err.stack) != null ? _ref3 : err));
      };
      env.errorHandlers.push(hnd);
      return runMonad(rz(value), env, (function(result) {
        if (env.errorHandlers.length) {
          if (env.errorHandlers[env.errorHandlers.length - 1] === hnd) {
            env.errorHandlers.pop();
          } else if (_.contains(env.errorHandlers, hnd)) {
            while (env.errorHandlers[env.errorHandlers.length - 1] !== hnd) {
              env.errorHandlers.pop();
            }
          }
        }
        return cont(right(result));
      }), []);
    });
  }));

  actors = {};

  define('actor', lz(function(name) {
    return function(func) {
      actors[name] = func;
      func.env = {
        values: {}
      };
      return func.env.__proto__ = defaultEnv;
    };
  }));

  define('send', lz(function(name) {
    return function(msg) {
      return setTimeout((function() {
        return runMonad(rz(actors[name])(msg), rz(actors[name]).env);
      }), 1);
    };
  }));

  define('hasValue', lz(function(name) {
    return makeSyncMonad(function(env, cont) {
      return cont(booleanFor(values[rz(name)] != null));
    });
  }));

  define('getValueOr', lz(function(name) {
    return function(defaultValue) {
      return makeSyncMonad(function(env, cont) {
        var _ref2;

        return cont((_ref2 = values[rz(name)]) != null ? _ref2 : rz(defaultValue));
      });
    };
  }));

  define('getValue', lz(function(name) {
    return makeSyncMonad(function(env, cont) {
      if (!(rz(name) in values)) {
        throw new Error("No value named '" + (rz(name)) + "'");
      }
      return cont(values[rz(name)]);
    });
  }));

  define('setValue', lz(function(name) {
    return function(value) {
      return makeSyncMonad(function(env, cont) {
        values[rz(name)] = rz(value);
        return cont(_true);
      });
    };
  }));

  define('deleteValue', lz(function(name) {
    return makeSyncMonad(function(env, cont) {
      delete values[rz(name)];
      return cont(_true);
    });
  }));

  setValue = function(key, value) {
    return values[key] = value;
  };

  getValue = function(key) {
    return values[key];
  };

  define('envHas', lz(function(name) {
    return makeSyncMonad(function(env, cont) {
      return cont(booleanFor(env.values[rz(name)] != null));
    });
  }));

  define('envGetOr', lz(function(name) {
    return function(defaultValue) {
      return makeSyncMonad(function(env, cont) {
        var _ref2;

        return cont((_ref2 = env.values[rz(name)]) != null ? _ref2 : rz(defaultValue));
      });
    };
  }));

  define('envGet', lz(function(name) {
    return makeSyncMonad(function(env, cont) {
      if (!(rz(name) in env.values)) {
        throw new Error("No value named '" + (rz(name)) + "'");
      }
      return cont(env.values[rz(name)]);
    });
  }));

  define('envSet', lz(function(name) {
    return function(value) {
      return makeSyncMonad(function(env, cont) {
        env.values[rz(name)] = rz(value);
        return cont(_true);
      });
    };
  }));

  define('envDelete', lz(function(name) {
    return makeSyncMonad(function(env, cont) {
      delete env.values[rz(name)];
      return cont(_true);
    });
  }));

  setValue('macros', Nil);

  define('defMacro', lz(function(name) {
    return function(def) {
      return makeSyncMonad(function(env, cont) {
        values.macros = cons(cons(rz(name), rz(def)), values.macros);
        return cont(_true);
      });
    };
  }));

  define('funcs', lz(makeSyncMonad(function(env, cont) {
    console.log("Leisure functions:\n" + (_(global.leisureFuncNames.toArray()).sort().join('\n')));
    return cont(_true);
  })));

  define('funcSrc', lz(function(func) {
    if (typeof rz(func) === 'function' && rz(func).src) {
      return some(rz(func).src);
    } else {
      return none;
    }
  }));

  define('ast2Json', lz(function(ast) {
    return JSON.stringify(ast2Json(rz(ast)));
  }));

  define('override', lz(function(name) {
    return function(newFunc) {
      return makeSyncMonad(function(env, cont) {
        var n, oldDef;

        n = "L_" + (nameSub(rz(name)));
        oldDef = global[n];
        if (!oldDef) {
          throw new Error("No definition for " + (rz(name)));
        }
        global[n] = function() {
          return rz(newFunc)(oldDef);
        };
        return cont(_true);
      });
    };
  }));

  define('print', lz(function(msg) {
    return makeSyncMonad(function(env, cont) {
      var m;

      m = rz(msg);
      env.write("" + (env.presentValue(m)) + "\n");
      return cont(_true);
    });
  }));

  define('write', lz(function(msg) {
    return makeSyncMonad(function(env, cont) {
      env.write(env.presentValue(rz(msg)));
      return cont(_true);
    });
  }));

  define('readFile', lz(function(name) {
    return makeMonad(function(env, cont) {
      return readFile(rz(name), function(err, contents) {
        var _ref2;

        return cont((err ? left((_ref2 = err.stack) != null ? _ref2 : err) : right(contents)));
      });
    });
  }));

  define('readDir', lz(function(dir) {
    return makeMonad(function(env, cont) {
      return readDir(rz(dir), function(err, files) {
        var _ref2;

        return cont((err ? left((_ref2 = err.stack) != null ? _ref2 : err) : right(files)));
      });
    });
  }));

  define('writeFile', lz(function(name) {
    return function(data) {
      return makeMonad(function(env, cont) {
        return writeFile(rz(name), rz(data), function(err, contents) {
          var _ref2;

          return cont((err ? left((_ref2 = err.stack) != null ? _ref2 : err) : right(contents)));
        });
      });
    };
  }));

  define('statFile', lz(function(file) {
    return makeMonad(function(env, cont) {
      return statFile(rz(file), function(err, stats) {
        var _ref2;

        return cont((err ? left((_ref2 = err.stack) != null ? _ref2 : err) : right(stats)));
      });
    });
  }));

  define('prompt', lz(function(msg) {
    return makeMonad(function(env, cont) {
      return env.prompt(String(rz(msg)), function(input) {
        return cont(input);
      });
    });
  }));

  define('rand', lz(makeSyncMonad(function(env, cont) {
    return cont(Math.random());
  })));

  define('js', lz(function(str) {
    return makeSyncMonad(function(env, cont) {
      var err, result;

      try {
        result = eval(rz(str));
        return cont(right(result));
      } catch (_error) {
        err = _error;
        return cont(left(err));
      }
    });
  }));

  define('delay', lz(function(timeout) {
    return makeMonad(function(env, cont) {
      return setTimeout((function() {
        return cont(_true);
      }), rz(timeout));
    });
  }));

  define('altDef', lz(function(name) {
    return function(alt) {
      return function(arity) {
        return function(def) {
          return makeMonad(function(env, cont) {
            var alts, i, info, newDef, nm;

            info = functionInfo[rz(name)];
            if (!info) {
              info = functionInfo[rz(name)] = {
                src: '',
                arity: -1,
                alts: {},
                altList: []
              };
            }
            if (!info.alts[rz(alt)]) {
              info.altList.push(rz(alt));
            }
            info.alts[rz(alt)] = rz(def);
            alts = (function() {
              var _i, _len, _ref2, _results;

              _ref2 = info.altList;
              _results = [];
              for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                i = _ref2[_i];
                _results.push(info.alts[i]);
              }
              return _results;
            })();
            newDef = curry(rz(arity), function(args) {
              var arg, opt, res, _i, _j, _k, _len, _len1, _len2;

              for (_i = 0, _len = alts.length; _i < _len; _i++) {
                alt = alts[_i];
                opt = alt;
                for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
                  arg = args[_j];
                  opt = opt(arg);
                }
                if (getType(opt) === 'some') {
                  return opt(lz(function(x) {
                    return rz(x);
                  }))(lz(_false));
                }
              }
              if (info.mainDef) {
                res = rz(info.mainDef);
                for (_k = 0, _len2 = args.length; _k < _len2; _k++) {
                  arg = args[_k];
                  res = res(arg);
                }
                return res;
              }
              throw new Error("No default definition for " + (rz(name)));
            });
            nm = "L_" + (nameSub(rz(name)));
            global[nm] = global.leisureFuncNames[nm] = newDef;
            return cont(def);
          });
        };
      };
    };
  }));

  curry = function(arity, func) {
    return function() {
      return function(arg) {
        return (subcurry(arity, func, []))(arg);
      };
    };
  };

  subcurry = function(arity, func, args) {
    return function(arg) {
      args = args != null ? args : [];
      args.push(arg);
      if (arity === 1) {
        return func(args);
      } else {
        return subcurry(arity - 1, func, args);
      }
    };
  };

  makeHamt = function(hamt) {
    var t;

    t = setDataType((function() {}), 'hamt');
    t.hamt = hamt;
    t.type = 'hamt';
    return t;
  };

  hamt = makeHamt(amt.Trie());

  define('hamt', lz(hamt));

  define('hamtWith', lz(function(key) {
    return function(value) {
      return function(hamt) {
        return makeHamt(amt.assoc(rz(hamt).hamt, rz(key), rz(value)));
      };
    };
  }));

  define('hamtFetch', lz(function(key) {
    return function(hamt) {
      return amt.get(rz(hamt).hamt, rz(key));
    };
  }));

  define('hamtGet', lz(function(key) {
    return function(hamt) {
      var v;

      v = amt.get(rz(hamt).hamt, rz(key));
      if (v !== void 0) {
        return some(v);
      } else {
        return none;
      }
    };
  }));

  define('hamtWithout', lz(function(key) {
    return function(hamt) {
      return makeHamt(amt.dissoc(rz(hamt).hamt, rz(key)));
    };
  }));

  define('hamtPairs', lz(function(hamt) {
    return nextNode(simpyCons(rz(hamt).hamt, null));
  }));

  nextNode = function(stack) {
    var child, k, key, node, value, _ref2, _ref3;

    if (stack === null) {
      return rz(L_nil);
    }
    node = stack.head;
    stack = stack.tail;
    switch (node.type) {
      case 'trie':
        _ref2 = node.children;
        for (k in _ref2) {
          child = _ref2[k];
          stack = simpyCons(child, stack);
        }
        return nextNode(stack);
      case 'value':
        return rz(L_acons)(lz(node.key))(lz(node.value))(function() {
          return nextNode(stack);
        });
      case 'hashmap':
        _ref3 = node.values;
        for (key in _ref3) {
          value = _ref3[key];
          stack = simpyCons(value, stack);
        }
        return nextNode(stack);
      default:
        return console.log("UNKNOWN HAMT NODE TYPE: " + node.type);
    }
  };

  define('trampolineCall', lz(function(func) {
    var ret;

    ret = rz(func);
    while (true) {
      if (typeof ret === 'function' && ret.trampoline) {
        ret = ret();
      } else {
        return ret;
      }
    }
  }));

  define('trampoline', lz(function(func) {
    var arity, f;

    f = rz(func);
    arity = functionInfo[f.leisureName].arity;
    return trampCurry(f, arity);
  }));

  trampCurry = function(func, arity) {
    return function(arg) {
      var a, result;

      a = rz(arg);
      if (arity > 1) {
        return trampCurry(func(function() {
          return a;
        }), arity - 1);
      } else {
        result = function() {
          return func(function() {
            return a;
          });
        };
        result.trampoline = true;
        return result;
      }
    };
  };

  ensureLeisureClass('token');

  Leisure_token.prototype.toString = function() {
    return "Token(" + (JSON.stringify(tokenString(this))) + ", " + (tokenPos(this)) + ")";
  };

  tokenString = function(t) {
    return t(lz(function(txt) {
      return function(pos) {
        return rz(txt);
      };
    }));
  };

  tokenPos = function(t) {
    return t(lz(function(txt) {
      return function(pos) {
        return rz(pos);
      };
    }));
  };

  ensureLeisureClass('parens');

  Leisure_parens.prototype.toString = function() {
    return "Parens(" + (parensStart(this)) + ", " + (parensEnd(this)) + ", " + (parensContent(this)) + ")";
  };

  parensStart = function(p) {
    return p(lz(function(s) {
      return function(e) {
        return function(l) {
          return rz(s);
        };
      };
    }));
  };

  parensEnd = function(p) {
    return p(lz(function(s) {
      return function(e) {
        return function(l) {
          return rz(e);
        };
      };
    }));
  };

  parensContent = function(p) {
    return p(lz(function(s) {
      return function(e) {
        return function(l) {
          return rz(l);
        };
      };
    }));
  };

  ensureLeisureClass('true');

  Leisure_true.prototype.toString = function() {
    return "true";
  };

  ensureLeisureClass('false');

  Leisure_false.prototype.toString = function() {
    return "false";
  };

  ensureLeisureClass('left');

  Leisure_left.prototype.toString = function() {
    return "Left(" + (this(lz(_identity))(lz(_identity))) + ")";
  };

  ensureLeisureClass('right');

  Leisure_right.prototype.toString = function() {
    return "Right(" + (this(lz(_identity))(lz(_identity))) + ")";
  };

  root._true = _true;

  root._false = _false;

  root.stateValues = values;

  root.runMonad = runMonad;

  root.newRunMonad = newRunMonad;

  root.isMonad = isMonad;

  root.identity = identity;

  root.setValue = setValue;

  root.getValue = getValue;

  root.makeMonad = makeMonad;

  root.makeSyncMonad = makeSyncMonad;

  root.replaceErr = replaceErr;

  root.left = left;

  root.right = right;

  root.getMonadSyncMode = getMonadSyncMode;

  root.asyncMonad = asyncMonad;

  root.setWarnAsync = setWarnAsync;

  root.call = call;

  root.callMonad = callMonad;

  root.basicCall = basicCall;

  root.booleanFor = booleanFor;

  root.newConsFrom = consFrom;

  if (typeof window !== "undefined" && window !== null) {
    window.runMonad = runMonad;
    window.setType = setType;
    window.setDataType = setDataType;
    window.defaultEnv = defaultEnv;
    window.identity = identity;
  }

}).call(this);

/*
*/

})(require("__browserify_process"),self)
},{"./ast":1,"./base":2,"./lodash.min":6,"__browserify_process":12,"persistent-hash-trie":15}],11:[function(require,module,exports){
L_runMonads([
  function(){return resolve(L_define)("if")(0)("if = id")(L_id)},
  function(){return resolve(L_define)("afetch")(2)("afetch k alist  = alist (\\h t D . h \\key value . eq key k value (afetch k t)) nil")(lazy(function(L_k){return function(L_alist){return resolve(L_alist)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_h)(lazy(function(L_key){return function(L_value){return resolve(L_eq)(L_key)(L_k)(L_value)(function(){return resolve(L_afetch)(L_k)(L_t)})}}))}}}))(L_nil)}}))},
  function(){return resolve(L_define)("aconsf")(3)("aconsf key value list = acons key value (aremove key list)")(lazy(function(L_key){return function(L_value){return function(L_list){return resolve(L_acons)(L_key)(L_value)(function(){return resolve(L_aremove)(L_key)(L_list)})}}}))},
  function(){return resolve(L_define)("aremove")(2)("aremove key list = isNil list\n  nil\n  eq (head (head list)) key\n    aremove key (tail list)\n    aconsPair (head list) (aremove key (tail list))")(lazy(function(L_key){return function(L_list){return resolve(L_isNil)(L_list)(L_nil)(function(){return resolve(L_eq)(function(){return resolve(L_head)(function(){return resolve(L_head)(L_list)})})(L_key)(function(){return resolve(L_aremove)(L_key)(function(){return resolve(L_tail)(L_list)})})(function(){return resolve(L_aconsPair)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_aremove)(L_key)(function(){return resolve(L_tail)(L_list)})})})})}}))},
  function(){return resolve(L_defMacro)("when")(lazy(function(L_line){return resolve(L_line)(lazy(function(L_cond){return function(L_rest){return resolve(L_cons)(L_cond)(function(){return resolve(L_cons)(function(){return resolve(L_cons)("do")(L_rest)})(function(){return resolve(L_cons)("nil")(L_nil)})})}}))}))},
  function(){return resolve(L_addTokenGroup)("js[")("]")},
  function(){return resolve(L_defMacro)("js[")(lazy(function(L_list){return resolve(L_cons)("js")(function(){return resolve(L_cons)(function(){return resolve(L_cons)("strCat")(function(){return resolve(L_cons)(function(){return resolve(L_cons)("flatten")(function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_listify)(function(){return resolve(L_head)(L_list)})})(L_nil)})(L_nil)})})(L_nil)})})(L_nil)})}))},
  function(){return resolve(L_define)("html")(1)("html x = \\f . f x")(lazy(setDataType(function(L_x){return setType(function(L_f){return resolve(L_f)(L_x)}, 'html')}, 'html')))},
  function(){return resolve(L_define)("iszero")(0)("iszero = eq 0")(function(){return resolve(L_eq)(0)})},
  function(){return resolve(L_define)("positive")(0)("positive = 0 <")(function(){return resolve(L_$y)(0)})},
  function(){return resolve(L_addToken)("--")},
  function(){return resolve(L_addToken)("++")},
  function(){return resolve(L_define)("--")(0)("-- = (flip (-)) 1")(function(){return resolve(L_flip)(L_$_)(1)})},
  function(){return resolve(L_define)("++")(0)("++ = (1 +)")(function(){return resolve(L_$o)(1)})},
  function(){return resolve(L_define)("intercalate")(2)("intercalate x l = concat (intersperse x l)")(lazy(function(L_x){return function(L_l){return resolve(L_concat)(function(){return resolve(L_intersperse)(L_x)(L_l)})}}))},
  function(){return resolve(L_define)("visit")(2)("visit func l = \\\\\n  result = func func l\n  .\n  isCons result\n    result \\h t . cons (visit func h) (visit func t)\n    result")(lazy(function(L_func){return function(L_l){return (function(){

var L_result;

L_result = function(){return resolve(L_func)(L_func)(L_l)};
return resolve(L_isCons)(L_result)(function(){return resolve(L_result)(lazy(function(L_h){return function(L_t){return resolve(L_cons)(function(){return resolve(L_visit)(L_func)(L_h)})(function(){return resolve(L_visit)(L_func)(L_t)})}}))})(L_result)})()}}))},
  function(){return resolve(L_define)("simplify")(1)("simplify exprString = do\n  list <- scanLineM exprString\n  visit (\\func x . isToken x (tokenString x) ((isParens x) (visit func (parensContent x)) x)) list")(lazy(function(L_exprString){return resolve(L_bind)(function(){return resolve(L_scanLineM)(L_exprString)})(lazy(function(L_list){return resolve(L_visit)(lazy(function(L_func){return function(L_x){return resolve(L_isToken)(L_x)(function(){return resolve(L_tokenString)(L_x)})(function(){return resolve(L_isParens)(L_x)(function(){return resolve(L_visit)(L_func)(function(){return resolve(L_parensContent)(L_x)})})(L_x)})}}))(L_list)}))}))},
  function(){return resolve(L_define)("doall")(0)("doall = foldr1 (\\el res . bind el \\_ . res)")(function(){return resolve(L_foldr1)(lazy(function(L_el){return function(L_res){return resolve(L_bind)(L_el)(lazy(function(L__){return resolve(L_res)}))}}))})},
  function(){return resolve(L_define)("requireJS")(1)("requireJS file = bind (getValue 'requiredFiles')\n  \\files . contains files file\n    false\n    bind (loadJS file)\n      \\result . result\n        \\x . left x\n        \\_ . bind (setValue 'requiredFiles' (cons file files))\n          \\_ . right true")(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_getValue)("requiredFiles")})(lazy(function(L_files){return resolve(L_contains)(L_files)(L_file)(L_false)(function(){return resolve(L_bind)(function(){return resolve(L_loadJS)(L_file)})(lazy(function(L_result){return resolve(L_result)(lazy(function(L_x){return resolve(L_left)(L_x)}))(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_setValue)("requiredFiles")(function(){return resolve(L_cons)(L_file)(L_files)})})(lazy(function(L___0){return resolve(L_right)(L_true)}))}))}))})}))}))},
  function(){return resolve(L_define)("loadJS")(1)("loadJS file = bind (readFile file)\n  \\result . result\n    \\err . err\n    \\contents . js contents")(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_readFile)(L_file)})(lazy(function(L_result){return resolve(L_result)(lazy(function(L_err){return resolve(L_err)}))(lazy(function(L_contents){return resolve(L_js)(L_contents)}))}))}))},
  function(){return resolve(L_define)("findOption")(2)("findOption func list = do\n  result = func (head list)\n  isNil list\n    none\n    isNone result\n      findOption func (tail list)\n      result")(lazy(function(L_func){return function(L_list){return (function(){

var L_result;

L_result = function(){return resolve(L_func)(function(){return resolve(L_head)(L_list)})};
return resolve(L_isNil)(L_list)(L_none)(function(){return resolve(L_isNone)(L_result)(function(){return resolve(L_findOption)(L_func)(function(){return resolve(L_tail)(L_list)})})(L_result)})})()}}))},
  function(){return resolve(L_define)("dlempty")(0)("dlempty = id")(L_id)},
  function(){return resolve(L_define)("dl")(1)("dl item = \\rest . item:rest")(lazy(setDataType(function(L_item){return setType(function(L_rest){return resolve(L_cons)(L_item)(L_rest)}, 'dl')}, 'dl')))},
  function(){return resolve(L_define)("dlPush")(2)("dlPush list item = dlAppend list (dl item)")(lazy(function(L_list){return function(L_item){return resolve(L_dlAppend)(L_list)(function(){return resolve(L_dl)(L_item)})}}))},
  function(){return resolve(L_define)("dlAppend")(2)("dlAppend a b = \\rest . a (b rest)")(lazy(setDataType(function(L_a){return function(L_b){return setType(function(L_rest){return resolve(L_a)(function(){return resolve(L_b)(L_rest)})}, 'dlAppend')}}, 'dlAppend')))},
  function(){return resolve(L_define)("remove")(2)("remove x l = removeIf (eq x) l")(lazy(function(L_x){return function(L_l){return resolve(L_removeIf)(function(){return resolve(L_eq)(L_x)})(L_l)}}))},
  function(){return resolve(L_define)("removeIf")(2)("removeIf f l = filter (compose not f) l")(lazy(function(L_f){return function(L_l){return resolve(L_filter)(function(){return resolve(L_compose)(L_not)(L_f)})(L_l)}}))},
  function(){return resolve(L_define)("any")(2)("any f l = find f l (\\el . true) false")(lazy(function(L_f){return function(L_l){return resolve(L_find)(L_f)(L_l)(lazy(function(L_el){return resolve(L_true)}))(L_false)}}))},
  function(){return resolve(L_define)("all")(2)("all f l = not any (compose not f) l")(lazy(function(L_f){return function(L_l){return resolve(L_not)(L_any)(function(){return resolve(L_compose)(L_not)(L_f)})(L_l)}}))},
  function(){return resolve(L_define)("take")(2)("take n list = positive n\n  list\n    \\h t D . cons h (take (-- n) t)\n    nil\n  nil")(lazy(function(L_n){return function(L_list){return resolve(L_positive)(L_n)(function(){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_cons)(L_h)(function(){return resolve(L_take)(function(){return resolve(L_$_$_)(L_n)})(L_t)})}}}))(L_nil)})(L_nil)}}))},
  function(){return resolve(L_define)("takeWhile")(2)("takeWhile predicate list = list\n  \\h t D . predicate (head list)\n    cons h (takeWhile predicate t)\n    nil\n  nil")(lazy(function(L_predicate){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_predicate)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_takeWhile)(L_predicate)(L_t)})})(L_nil)}}}))(L_nil)}}))},
  function(){return resolve(L_define)("drop")(2)("drop x list = positive x\n  list\n    \\h t D . drop (-- x) t\n    nil\n  list")(lazy(function(L_x){return function(L_list){return resolve(L_positive)(L_x)(function(){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_drop)(function(){return resolve(L_$_$_)(L_x)})(L_t)}}}))(L_nil)})(L_list)}}))},
  function(){return resolve(L_define)("dropWhile")(2)("dropWhile predicate list = list\n  \\h t D . predicate h\n    dropWhile predicate t\n    list\n  nil")(lazy(function(L_predicate){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_predicate)(L_h)(function(){return resolve(L_dropWhile)(L_predicate)(L_t)})(L_list)}}}))(L_nil)}}))},
  function(){return resolve(L_define)("dropLast")(2)("dropLast n list = reverse (drop n (reverse list))")(lazy(function(L_n){return function(L_list){return resolve(L_reverse)(function(){return resolve(L_drop)(L_n)(function(){return resolve(L_reverse)(L_list)})})}}))},
  function(){return resolve(L_define)("box")(2)("box n list = list == nil\n  nil\n  [(take n list) | box n (drop n list)]")(lazy(function(L_n){return function(L_list){return resolve(L_$p$p)(L_list)(L_nil)(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_take)(L_n)(L_list)})(function(){return resolve(L_box)(L_n)(function(){return resolve(L_drop)(L_n)(L_list)})})})}}))},
  function(){return resolve(L_define)("at")(2)("at l x = (x == 0) (head l) (at (tail l) (-- (x) ) )")(lazy(function(L_l){return function(L_x){return resolve(L_$p$p)(L_x)(0)(function(){return resolve(L_head)(L_l)})(function(){return resolve(L_at)(function(){return resolve(L_tail)(L_l)})(function(){return resolve(L_$_$_)(L_x)})})}}))},
  function(){return resolve(L_define)("series")(2)("series func n = n:(series func (func n))")(lazy(function(L_func){return function(L_n){return resolve(L_cons)(L_n)(function(){return resolve(L_series)(L_func)(function(){return resolve(L_func)(L_n)})})}}))},
  function(){return resolve(L_define)("from")(1)("from n = series ++ n")(lazy(function(L_n){return resolve(L_series)(L_$o$o)(L_n)}))},
  function(){return resolve(L_define)("fromBy")(2)("fromBy n inc = series ((+) inc) n")(lazy(function(L_n){return function(L_inc){return resolve(L_series)(function(){return resolve(L_$o)(L_inc)})(L_n)}}))},
  function(){return resolve(L_define)("fromTo")(2)("fromTo n m = takeWhile ((>) m) (from n)")(lazy(function(L_n){return function(L_m){return resolve(L_takeWhile)(function(){return resolve(L_$z)(L_m)})(function(){return resolve(L_from)(L_n)})}}))},
  function(){return resolve(L_define)("fromToBy")(3)("fromToBy n m inc = takeWhile ((>) m) (fromBy n inc)")(lazy(function(L_n){return function(L_m){return function(L_inc){return resolve(L_takeWhile)(function(){return resolve(L_$z)(L_m)})(function(){return resolve(L_fromBy)(L_n)(L_inc)})}}}))},
  function(){return resolve(L_define)("count")(2)("count x l = countIf (eq x) l")(lazy(function(L_x){return function(L_l){return resolve(L_countIf)(function(){return resolve(L_eq)(L_x)})(L_l)}}))},
  function(){return resolve(L_define)("countIf")(2)("countIf f l = (eq l nil) 0\n  + (f (head l) 1 0) (countIf f (tail l))")(lazy(function(L_f){return function(L_l){return resolve(L_eq)(L_l)(L_nil)(0)(function(){return resolve(L_$o)(function(){return resolve(L_f)(function(){return resolve(L_head)(L_l)})(1)(0)})(function(){return resolve(L_countIf)(L_f)(function(){return resolve(L_tail)(L_l)})})})}}))},
  function(){return resolve(L_define)("countIfNot")(2)("countIfNot f l = countIf (\\x. not (f x)) l")(lazy(function(L_f){return function(L_l){return resolve(L_countIf)(lazy(function(L_x){return resolve(L_not)(function(){return resolve(L_f)(L_x)})}))(L_l)}}))},
  function(){return resolve(L_define)("odds")(1)("odds l = l\n  \\h t D . [h | evens t]\n  nil")(lazy(function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_cons)(L_h)(function(){return resolve(L_evens)(L_t)})}}}))(L_nil)}))},
  function(){return resolve(L_define)("evens")(1)("evens l = l\n  \\h t D . odds t\n  nil")(lazy(function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_odds)(L_t)}}}))(L_nil)}))},
  function(){return resolve(L_define)("cleave")(1)("cleave l = [(evens l) | (odds l)]")(lazy(function(L_l){return resolve(L_cons)(function(){return resolve(L_evens)(L_l)})(function(){return resolve(L_odds)(L_l)})}))},
  function(){return resolve(L_define)("merge")(3)("merge cmp a b = a\n  \\ah at D . b\n    \\bh bt D . cmp ah bh\n      [ah | (merge cmp at b)]\n      [bh | (merge cmp a bt)]\n    a\n  b")(lazy(function(L_cmp){return function(L_a){return function(L_b){return resolve(L_a)(lazy(function(L_ah){return function(L_at){return function(L_D){return resolve(L_b)(lazy(function(L_bh){return function(L_bt){return function(L_D_0){return resolve(L_cmp)(L_ah)(L_bh)(function(){return resolve(L_cons)(L_ah)(function(){return resolve(L_merge)(L_cmp)(L_at)(L_b)})})(function(){return resolve(L_cons)(L_bh)(function(){return resolve(L_merge)(L_cmp)(L_a)(L_bt)})})}}}))(L_a)}}}))(L_b)}}}))},
  function(){return resolve(L_define)("mergeSort")(2)("mergeSort cmp l = l\n  \\h t D . eq (tail l) nil\n    l\n    do\n      cl = cleave l\n      e = head cl\n      o = tail cl\n      merge cmp (mergeSort cmp e) (mergeSort cmp o)\n  nil")(lazy(function(L_cmp){return function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_eq)(function(){return resolve(L_tail)(L_l)})(L_nil)(L_l)(function(){
var L_o, L_e, L_cl;

L_cl = function(){return resolve(L_cleave)(L_l)};

L_e = function(){return resolve(L_head)(L_cl)};

L_o = function(){return resolve(L_tail)(L_cl)};
return resolve(L_merge)(L_cmp)(function(){return resolve(L_mergeSort)(L_cmp)(L_e)})(function(){return resolve(L_mergeSort)(L_cmp)(L_o)})})}}}))(L_nil)}}))},
  function(){return resolve(L_define)("sort")(1)("sort l = sortBy (<=) l")(lazy(function(L_l){return resolve(L_sortBy)(L_$y$p)(L_l)}))},
  function(){return resolve(L_define)("sortBy")(2)("sortBy cmp l = mergeSort cmp l")(lazy(function(L_cmp){return function(L_l){return resolve(L_mergeSort)(L_cmp)(L_l)}}))},
  function(){return resolve(L_addToken)("->")},
  function(){return resolve(L_define)("mkStr")(1)("mkStr tok = concat['\"' (tokenString tok) '\"']")(lazy(function(L_tok){return resolve(L_strCat)(function(){return resolve(L_cons)("\"")(function(){return resolve(L_cons)(function(){return resolve(L_tokenString)(L_tok)})(function(){return resolve(L_cons)("\"")(L_nil)})})})}))},
  function(){return resolve(L_defMacro)("defCase")(lazy(function(L_list){return (function(){

var L_t3, L_h3, L_t2, L_h2, L_t1, L_h1;

L_h1 = function(){return resolve(L_head)(L_list)};

L_t1 = function(){return resolve(L_tail)(L_list)};

L_h2 = function(){return resolve(L_head)(L_t1)};

L_t2 = function(){return resolve(L_tail)(L_t1)};

L_h3 = function(){return resolve(L_head)(L_t2)};

L_t3 = function(){return resolve(L_tail)(L_t2)};
return resolve(L_and)(function(){return resolve(L_isCons)(L_list)})(function(){return resolve(L_and)(function(){return resolve(L_isCons)(L_t1)})(function(){return resolve(L_and)(function(){return resolve(L_isCons)(L_t2)})(function(){return resolve(L_and)(function(){return resolve(L_isTokenString)(L_h2)(".")})(L_true)})})})(function(){return resolve(L_makeCaseArgs)(L_list)(function(){return resolve(L_mkStr)(L_h1)})(function(){return resolve(L_mkStr)(L_h3)})(L_t3)(L_id)})(function(){return resolve(L_parseErr)("Error in case definition -- expected func.name args | condition -> action, but got ")(L_list)})})()}))},
  function(){return resolve(L_define)("makeCaseArgs")(5)("makeCaseArgs orig funcName altName rest args = rest\n  \\h t D . isTokenString h '|'\n    makeCaseCondition orig funcName altName (args nil) t id\n    makeCaseArgs orig funcName altName t (dlPush args h)\n  parseErr \"Error in case definition -- expected func.name args | condition -> action, but got \" orig")(lazy(function(L_orig){return function(L_funcName){return function(L_altName){return function(L_rest){return function(L_args){return resolve(L_rest)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)("|")(function(){return resolve(L_makeCaseCondition)(L_orig)(L_funcName)(L_altName)(function(){return resolve(L_args)(L_nil)})(L_t)(L_id)})(function(){return resolve(L_makeCaseArgs)(L_orig)(L_funcName)(L_altName)(L_t)(function(){return resolve(L_dlPush)(L_args)(L_h)})})}}}))(function(){return resolve(L_parseErr)("Error in case definition -- expected func.name args | condition -> action, but got ")(L_orig)})}}}}}))},
  function(){return resolve(L_define)("makeCaseCondition")(6)("makeCaseCondition orig funcName altName args rest cond = rest\n  \\h t D . isTokenString h '->'\n    foldr1 append [['altDef' funcName altName (length args) '\\\\'] args ['.' (cond nil) ['some' t] 'none']]\n    makeCaseCondition orig funcName altName args t (dlPush cond h)\n parseErr \"Error in case definition -- expected func.name args | condition -> action, but got \" orig")(lazy(function(L_orig){return function(L_funcName){return function(L_altName){return function(L_args){return function(L_rest){return function(L_cond){return resolve(L_rest)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)("->")(function(){return resolve(L_foldr1)(L_append)(function(){return resolve(L_cons)(function(){return resolve(L_cons)("altDef")(function(){return resolve(L_cons)(L_funcName)(function(){return resolve(L_cons)(L_altName)(function(){return resolve(L_cons)(function(){return resolve(L_length)(L_args)})(function(){return resolve(L_cons)("\\")(L_nil)})})})})})(function(){return resolve(L_cons)(L_args)(function(){return resolve(L_cons)(function(){return resolve(L_cons)(".")(function(){return resolve(L_cons)(function(){return resolve(L_cond)(L_nil)})(function(){return resolve(L_cons)(function(){return resolve(L_cons)("some")(function(){return resolve(L_cons)(L_t)(L_nil)})})(function(){return resolve(L_cons)("none")(L_nil)})})})})(L_nil)})})})})(function(){return resolve(L_makeCaseCondition)(L_orig)(L_funcName)(L_altName)(L_args)(L_t)(function(){return resolve(L_dlPush)(L_cond)(L_h)})})}}}))(function(){return resolve(L_parseErr)("Error in case definition -- expected func.name args | condition -> action, but got ")(L_orig)})}}}}}}))},
  function(){return resolve(L_altDef)("show")("some")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_some)(function(){return resolve(L_some)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("Some(")(function(){return resolve(L_cons)(function(){return resolve(L_obj)(L_id)(L_false)})(function(){return resolve(L_cons)(")")(L_nil)})})})})})(L_none)}))},
  function(){return resolve(L_altDef)("show")("some2")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_some2)(function(){return resolve(L_some)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("Some2(")(function(){return resolve(L_cons)(function(){return resolve(L_obj)(lazy(function(L_a){return function(L_b){return resolve(L_cons)(L_a)(function(){return resolve(L_cons)(", ")(function(){return resolve(L_cons)(L_b)(L_nil)})})}}))(L_false)})(function(){return resolve(L_cons)(")")(L_nil)})})})})})(L_none)}))},
  function(){return resolve(L_altDef)("show")("none")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_none)(function(){return resolve(L_some)("None")})(L_none)}))},
  function(){return resolve(L_altDef)("show")("left")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_left)(function(){return resolve(L_some)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("Left(")(function(){return resolve(L_cons)(function(){return resolve(L_obj)(L_id)(L_id)})(function(){return resolve(L_cons)(")")(L_nil)})})})})})(L_none)}))},
  function(){return resolve(L_altDef)("show")("right")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_right)(function(){return resolve(L_some)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("Right(")(function(){return resolve(L_cons)(function(){return resolve(L_obj)(L_id)(L_id)})(function(){return resolve(L_cons)(")")(L_nil)})})})})})(L_none)}))},
  function(){return resolve(L_altDef)("show")("nil")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_nil)(function(){return resolve(L_some)("nil")})(L_none)}))},
  function(){return resolve(L_altDef)("show")("assoc")(1)(lazy(function(L_obj){return resolve(L_isAlist)(L_obj)(function(){return resolve(L_some)(function(){return resolve(L_strCat)(function(){return resolve(L_flatten)(function(){return resolve(L_cons)("{")(function(){return resolve(L_cons)(function(){return resolve(L_intersperse)(function(){return resolve(L_map)(lazy(function(L_item){return resolve(L_cons)(function(){return resolve(L_show)(function(){return resolve(L_head)(L_item)})})(function(){return resolve(L_cons)(":")(function(){return resolve(L_cons)(function(){return resolve(L_show)(function(){return resolve(L_tail)(L_item)})})(L_nil)})})}))(L_obj)})(" ")})(function(){return resolve(L_cons)("}")(L_nil)})})})})})})(L_none)}))},
  function(){return resolve(L_altDef)("show")("hamt")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_hamt)(function(){return resolve(L_some)(function(){return resolve(L_strCat)(function(){return resolve(L_flatten)(function(){return resolve(L_cons)("hamt{")(function(){return resolve(L_cons)(function(){return resolve(L_intersperse)(function(){return resolve(L_map)(lazy(function(L_item){return resolve(L_cons)(function(){return resolve(L_show)(function(){return resolve(L_head)(L_item)})})(function(){return resolve(L_cons)(":")(function(){return resolve(L_cons)(function(){return resolve(L_show)(function(){return resolve(L_tail)(L_item)})})(L_nil)})})}))(function(){return resolve(L_hamtPairs)(L_obj)})})(" ")})(function(){return resolve(L_cons)("}")(L_nil)})})})})})})(L_none)}))},
  function(){return resolve(L_altDef)("show")("cons")(1)(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_cons)(function(){return resolve(L_some)(function(){return resolve(L_strCat)(function(){return resolve(L_flatten)(function(){return resolve(L_cons)("[")(function(){return resolve(L_cons)(function(){return resolve(L_show)(function(){return resolve(L_head)(L_obj)})})(function(){return resolve(L_cons)(function(){return resolve(L_showConsElements)(function(){return resolve(L_tail)(L_obj)})})(function(){return resolve(L_cons)("]")(L_nil)})})})})})})})(L_none)}))},
  function(){return resolve(L_define)("showConsElements")(1)("showConsElements list = isCons list\n  [' ' (show (head list)) (showConsElements (tail list))]\n  isNil list\n    ''\n    [' | ' (show list)]")(lazy(function(L_list){return resolve(L_isCons)(L_list)(function(){return resolve(L_cons)(" ")(function(){return resolve(L_cons)(function(){return resolve(L_show)(function(){return resolve(L_head)(L_list)})})(function(){return resolve(L_cons)(function(){return resolve(L_showConsElements)(function(){return resolve(L_tail)(L_list)})})(L_nil)})})})(function(){return resolve(L_isNil)(L_list)("")(function(){return resolve(L_cons)(" | ")(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_list)})(L_nil)})})})}))},
  function(){return resolve(L_altDef)("bind")("option")(2)(lazy(function(L_opt){return function(L_cont){return resolve(L_or)(function(){return resolve(L_hasType)(L_opt)(L_some)})(function(){return resolve(L_hasType)(L_opt)(L_none)})(function(){return resolve(L_some)(function(){return resolve(L_opt)(lazy(function(L_value){return resolve(L_cont)(L_value)}))(L_none)})})(L_none)}}))},
  function(){return resolve(L_altDef)("bind")("either")(2)(lazy(function(L_either){return function(L_cont){return resolve(L_or)(function(){return resolve(L_hasType)(L_either)(L_left)})(function(){return resolve(L_hasType)(L_either)(L_right)})(function(){return resolve(L_some)(function(){return resolve(L_either)(lazy(function(L__){return resolve(L_either)}))(lazy(function(L_value){return resolve(L_cont)(L_value)}))})})(L_none)}}))},
  function(){return resolve(L_defMacro)("defWrapper")(lazy(function(L_list){return resolve(L_grabLeftOfArrow)(L_list)(L_nil)(lazy(function(L_left){return function(L_right){return resolve(L_cons)("override")(function(){return resolve(L_cons)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)("'")(function(){return resolve(L_cons)(function(){return resolve(L_strTokenString)(function(){return resolve(L_head)(L_left)})})(function(){return resolve(L_cons)("'")(L_nil)})})})})(function(){return resolve(L_cons)(function(){return resolve(L_append)(function(){return resolve(L_cons)("\\")(function(){return resolve(L_tail)(L_left)})})(function(){return resolve(L_cons)(".")(L_right)})})(L_nil)})})}}))}))},
  function(){return resolve(L_define)("grabLeftOfArrow")(3)("grabLeftOfArrow list left cont = isTokenString (head list) '->'\n  cont (reverse left) (tail list)\n  grabLeftOfArrow (tail list) (head list) : left cont")(lazy(function(L_list){return function(L_left){return function(L_cont){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_list)})("->")(function(){return resolve(L_cont)(function(){return resolve(L_reverse)(L_left)})(function(){return resolve(L_tail)(L_list)})})(function(){return resolve(L_grabLeftOfArrow)(function(){return resolve(L_tail)(L_list)})(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_list)})(L_left)})(L_cont)})}}}))},
  function(){return resolve(L_override)("head")(lazy(function(L_oldHead){return function(L_list){return resolve(L_assertType)("head argument")(L_cons)(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_h)}}))}}))},
  function(){return resolve(L_override)("tail")(lazy(function(L_oldTail){return function(L_list){return resolve(L_assertType)("tail argument")(L_cons)(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_t)}}))}}))},
  function(){return resolve(L_override)("hamtWith")(lazy(function(L_oldHamtWith){return function(L_key){return function(L_value){return function(L_hamt){return resolve(L_oldHamtWith)(function(){return resolve(L_assertType)("hamtWith key")("*string")(L_key)})(L_value)(L_hamt)}}}}))},
  function(){return resolve(L_define)("html")(1)("html x = \\f . f x")(lazy(setDataType(function(L_x){return setType(function(L_f){return resolve(L_f)(L_x)}, 'html')}, 'html')))},
  function(){return resolve(L_defTokenPack)("util")(function(){return resolve(L_cons)(function(){return resolve(L_cons)("->")(function(){return resolve(L_cons)("--")(function(){return resolve(L_cons)("++")(L_nil)})})})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_cons)("js[")("]")})(L_nil)})(function(){return resolve(L_cons)(L_nil)(L_nil)})})})},
  function(){return resolve(L_addStdTokenPacks)(function(){return resolve(L_cons)("util")(L_nil)})}]);

},{}],12:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],13:[function(require,module,exports){
module.exports = function(str) {
  var hash = 5381,
      i    = str.length

  while(i)
    hash = (hash * 33) ^ str.charCodeAt(--i)

  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
   * integers. Since we want the results to be always positive, if the high bit
   * is set, unset it and add it back in through (64-bit IEEE) addition. */
  return hash >= 0 ? hash : (hash & 0x7FFFFFFF) + 0x80000000
}

},{}],14:[function(require,module,exports){
//# Hashing functions

// Int, Int -> Int
// gets a <= 5 bit section of a hash, shifted from the left position
// in practice, a 32 bit splits into 7 chunks - 6 of 5 bits, one of 2
var mask = function(hash, from){ return (hash >>> from) & 0x01f }

// String, Int, Function -> Int
// gets a chunk of a hash, given a string and a hashing function
// the hashing function should return a 32 bit hash.
var hashMask = function(str, from, hash){
    return mask(hash(str), from)
}

module.exports = {
	hash: require('string-hash'),
	mask: hashMask
}

},{"string-hash":13}],15:[function(require,module,exports){
'use strict';

var util = require('./util')
var hash = require('./hash')
var lib = module.exports

//# persistent Hash Trie

// A Trie is a specialised version of a Tree, in which nodes can be found by navigating a 'path'.
// For instance, a dictionary Trie may start with a root node, have A-Z as the child nodes.
// Those child nodes may also be Tries (commonly referred to as sub-Tries).  Therefore, if
// you want to look up 'ANT', you can see if it's in the Trie by navigating to node A, then to
// node A's child node N, then to that node's child node T.  i.e. the path for ANT is A->N->T

// A Hash Trie forms its path by taking a hash of the string that is being looked up, and
// splitting that into parts:
// ANT = 01101101101110111010111011000011 = 01101->10110->11101->11010->11101->10000->11
// In this scheme, a 32-bit hash is taken, and split into path parts that are maximally
// 5 bits long.  Each Trie therefore has children from 00000-11111 (or 0-31 in decimal).

// Hash Tries allow us to store nodes at a shallow depth.  For instance, if there is only
// one member of the Trie whose key's first path part is 01101, then we can store the value
// directly as the root Trie's 01101 child node.  Why go deeper?  It just costs more to retrieve.

// It also allows us to keep the Trie fairly balanced; since a hash function should be
// have an even distribution of hashes, even if the inputs share common prefixes.
// If we used the first 2 letters of a word, for instance, we'd end up with lots of
// nodes in the 'un' and 'th' paths, and not many in the 'tx' path.

// An persistent Hash Trie is a Hash Trie in which any commonly updating actions - removing,
// setting or adding values - produce an entirely new Hash Trie, and *don't* affect the
// original in any way.  This means that the Hash Tries can be shared safely; without fear
// that updating them will result in a value changing in multiple places in a program.

// To make this distinction clearer, the verbs 'set' and 'remove/delete' have been replaced
// with assoc (associate a new value with an persistent Hash Trie), and dissoc (dissociate
// an existing value with an persistent Hash Trie).



// to allow hooks for other implementations/tests to override the default
// hash and equality functions (which are the necessary ones for creating
// hash-table-like behaviour, as the hash-trie has), they can be passed in
// as opts to assoc/dissoc/get/has.

// These defaults cover the ~80% use case of unordered string:val pairs.
var defaultOpts = {
    eq   : function(a, b){ return a === b },
    hash : hash.hash
}

//# Node Types

// Object -> Trie
// a Trie is a store of children values; the most basic type of non-leaf node.
var Trie = lib.Trie = function(children){
    return { type: 'trie', children: children || {} }
}

// String, JSValue -> Value
// Node that represents a specific value
var Value = lib.Value = function(key, value){
    return { type: 'value', key: key, value: value }
}

// { JSValue } -> Hashmap
// a Trie will have a max depth of 7 (6, if 0 indexed).  After that, additional
// values will just slung into a hashmap node
var Hashmap = lib.Hashmap = function(values){
    return { type: 'hashmap', values: values }
}


//# Basic manipulation functions - has/get/assoc/dissoc

// Object, String, JSValue -> Object

// creates a shallow clone of an object, adding or replacing a key:val pair
// with the one provided

// necessary for updating nodes in `assoc`
var copyAdd = function(obj, key, val){
    obj = util.clone(obj)
    obj[key] = val
    return obj
}


//  Node, String, JSValue, (Int) -> Trie

// assoc 'associates' a new value with a Trie.  It does so by finding the
// appropriate place for the new node, then creating a copy of the parent
// nodes, adding in a reference to the newly created child node each time.

// This is called path-copying, since the path from the root node to the new
// node is copied form one datastructure to the other.  Since the vast majority
// of data will lie in nodes beneathe these in sizable datastructures, this sharing
// of data allows for persistent values to be updated relatively effeciently at large
// size.

// The algorithm is also aware of 'specificity'; i.e. that a value need only be stored
// at a depth where it can be distinguished uniquely from other values by virtue of its
// path.  If both 'foo' and 'bar's first 5 bits are 011011, and both are present in the
// Trie, then they most be stored in a sub-Trie, and use the following 5 bits to differenciate
// themselves.  If the Trie gets deeper than there are bits in the hash (i.e. a total hash collision)
// then it simply stores the objects in a Hashmap node.
lib.assoc = function(node, key, val, opts){
    return assoc(node, key, val, opts || defaultOpts, 0)
}

var assoc = function(node, key, val, opts, depth){
    return assocFns[node.type](node, key, val, opts, depth)
}

var assocFns = {
    trie: function(node, key, val, opts, depth){
        var path = hash.mask(key, depth, opts.hash)
        var child = node.children[path]

        if ( child === undefined  ) return Trie(copyAdd(node.children, path, Value(key, val)))
        else                        return Trie(copyAdd(node.children, path, assoc(child, key, val, opts, depth + 1)))
    },
    value: function(node, key, val, opts, depth){
        var nodePath = hash.mask(node.key, depth, opts.hash)
        var keyPath  = hash.mask(key, depth, opts.hash)

        var makeHashmap = function(){
            var children = {}
            children[key] = Value(key, val)
            children[node.key] = node
            return Hashmap(children)
        }

        var resolveShallowConflict = function(){
            var children = {}
            children[nodePath] = node
            children[keyPath]  = Value(key, val)

            return Trie(children)
        }

        var resolveDeepConflict = function(){
            var children = {}
            children[keyPath] = assoc(node, key, val, opts, depth + 1)
            return Trie(children)
        }

        var makeTrie = function(){
            if ( nodePath !== keyPath ) return resolveShallowConflict()
            else                        return resolveDeepConflict()
        }

        if ( opts.eq(node.key, key) ) return Value(key, val)
        else if ( depth > 6 )         return makeHashmap()
        else                          return makeTrie()
    },
    hashmap: function(node, key, val, opts, depth){
        var v = copyAdd(node.values, key, Value(key, val))
        return Hashmap(v)
    }
}

// Object, String -> Object

// creates a new object, but without a key.
// Used in `dissoc`
var copyDissoc = function(obj, key){
    obj = util.clone(obj)
    delete obj[key]
    return obj
}


// Node, String, (Int) -> Trie

// dissoc (disassociate) returns a new Trie, but without a specified key

// As with assoc, it recurses down the Trie.  If it fails to find a key, then
// it returns the original Trie, since that is conceptually the same as removing
// a non-existant key from an object.

// If it finds a Value associated with a key, however, it will create
// a parent node to that Value that copies all *other* values, but omits
// the value with the key in question.  As with assoc, it will also produce a
// copy of *its* parent.  This occurs recursively, and is exactly the same concept
// as the 'path copying' technique used in assoc.

// If removing a value removes a hash collision, then the Trie node that contained
// those values can be replaced with just a Value node, which results in a shallower
// Trie.
lib.dissoc = function(node, key, opts){
    return dissoc(node, key, opts || defaultOpts, 0)
}

var dissoc = function(node, key, opts, depth){
    return dissocFns[node.type](node, key, opts, depth)
}

var dissocFns = {
    trie: function(node, key, opts, depth){
        var path = hash.mask(key, depth, opts.hash)
        var child = node.children[path]

        // handle the 'present key' cases.  If it's a Value, remove it.  If it's a sub-Trie or Hashmap
        // recurse to prevent other values from being lost
        var dissocKey = function(){
            if ( child.type === 'value' && opts.eq(child.key, key) )
                return Trie(copyDissoc(node.children, path))
            else
                return Trie(copyDissoc(node.children, path, dissoc(child, key, opts, depth + 1)))
        }

        // if there's only a single value in a Trie node left, then it can be replaced by its value,
        // allowing us to make the Trie more shallow, and therefore more effecient.
        var collapseTrie = function(trie){
            var names = util.keys(trie.children)
            var child = trie.children[names[0]]

            // don't collapse an empty root trie
            if ( depth === 0 )                                       return trie
            else if ( child === undefined )                          return trie
            else if ( names.length === 1 && child.type === 'value' ) return Value(child.key, child.value)
            else                                                     return trie
        }

        var handleTrie = function(){
            return collapseTrie(dissocKey(node))
        }

        // if there's no child, return the node
        if ( child === undefined )  return node;
        else                        return handleTrie();
    },
    value: function(){},
    hashmap: function(node, key, opts, depth){
        var ret = copyDissoc(node.values, key)
        var names = util.keys(ret)
        var child = ret[names[0]]

        if ( names.length === 1 ) return Value(child.key, child.value)
        else                      return Hashmap(ret)
    }
}


// Node, String, (Int), (Object)-> Bool

// Trie-equivalent of the 'in' operator.

// Has recurses down a node, using hash.mask to navigate a 'path' down branches.
// If a value node is found, if its key is equal to the key provided, then the
// Trie contains the key, and true is returned.

// Hashmaps store values in the outermost leaves when necessary.  If they contain
// a key, it also means that the key is in the trie,.
lib.has = function(trie, key, opts){
    return has(trie, key, opts || defaultOpts, 0)
}

var has = function(trie, key, opts, depth){
    return hasFns[trie.type](trie, key, opts, depth)
}

var hasFns = {
    trie: function(node, key, opts, depth){
        var child = node.children[hash.mask(key, depth, opts.hash)]
        if ( child === undefined )    return false
        else                          return has(child, key, opts, depth + 1)
    },
    value: function(node, key, opts){
        return opts.eq(node.key, key)
    },
    hashmap: function(node, key, opts){
        return key in node.values
    }
}

// Node, String, (Int), (Object) -> Value

// Trie-equivalent of dot or bracket syntax - retrieves a value assocaited with a key
// or undefined.

// get recurses down the Trie, similarly to has.  If it finds a matching key, instead
// of returning true or false, however, it unpacks the value associated with the key
// and returns that instead.
lib.get = function(trie, key, opts){
    return get(trie, key, opts || defaultOpts, 0)
}

var get = function(trie, key, opts, depth){
    return getFns[trie.type](trie, key, opts, depth)
}

var getFns = {
    trie: function(node, key, opts, depth){
        var child = node.children[hash.mask(key, depth, opts.hash)]
        if ( child === undefined )    return undefined
        else                          return get(child, key, opts, depth + 1)
    },
    value: function(node, key, opts, depth){
        if ( opts.eq(node.key, key) ) return node.value
    },
    hashmap: function(node, key, opts, depth){
        var value = node.values[key]
        return  value ? value.value : undefined

    }
}



// Node, (Any, Any, String), Any -> Any

// given a node, function and seed, reduce to produce results.
lib.reduce = function(node, callback, initial){
    var state = reduce(node, callback, initial)
    return state instanceof Break ? state.value : state
}

var reduce = function(node, callback, initial) {
    return reduceFns[node.type](node, callback, initial)
}

var reduceFns = {
    trie: function(node, callback, state) {
        for ( var path in node.children ) {
            if ( node.children.hasOwnProperty(path) ) {
                state = reduce(node.children[path], callback, state)
            }
            if (state instanceof Break) break
        }
        return state
    },
    value: function(node, callback, state){
        return callback(state, node.value, node.key)
    },
    hashmap: function(node, callback, state){
        for ( var key in node.values ) {
            if ( node.values.hasOwnProperty(key) ) {
                state = reduce(node.values[key], callback, state)
            }
            if (state instanceof Break) break
        }
        return state
    }
}


var Break = lib.reduce.Break = function(v) {
    if (!(this instanceof Break)) return new Break(v)
    this.value = v
}



// Node -> Object

// mutable returns a mutable version of a Trie.

// It achieves this by recursing down the Trie, finding all the Value nodes
// (whether stored in a Trie directly, or in a Hashmap node), and adding
// the values to a return value.

//  (yay abusing mutability in small pieces, but keeping the function
// pure from an API perspective)
lib.mutable = function(node){
    return lib.reduce(node, addKeyVal, {})
}

var addKeyVal = function(o, val, key){
    o[key] = val
    return o
}

// Node -> [String]

// keys returns the keys stored in the array, like Object.keys
lib.keys = function(node){
    return lib.reduce(node, addKey, [])
}

var addKey = function(arr, val, key){
    arr.push(key)
    return arr
}

},{"./hash":14,"./util":16}],16:[function(require,module,exports){
'use strict'

// Internal
var extend   = function(t, f) { for ( var p in f ) t[p] = f[p]; return t }
var clone    = function(o){ return extend({}, o) }
var slice    = function(a, f, n){ return [].slice.call(a, f, n) }

var mapObj = function(o, fn){
    var r = {}
    for ( var p in o ) r[p] = fn(o[p], p, o)
    return r
}

var map = function(arr, fn){
    var a = []
    for ( var i = 0, l = arr.length; i < l; i += 1 ) a.push(fn(arr[i], i, arr))
    return a
}

var reduce = function(arr, fn){
    var seed = arr[0]
    arr = arr.slice(1)
    for ( var i = 0, l = arr.length; i < l; i += 1) seed = fn(seed, arr[i])
    return seed
}

var pick = function(o){
    var names = slice(arguments, 1),
        r     = {}

    for ( var i = 0, l = names.length; i < l; i += 1 )
        r[names[i]] = o[names[i]]
    return r
}

// Object -> [String]

// get the keys of an object
var keys = Object.keys || function(o){
    var a = []
    for ( var key in o ) a.push(key)
    return a
}


module.exports = {
    extend    : extend,
    clone     : clone,
    slice     : slice,
    mapObj    : mapObj,
    pick      : pick,
    map       : map,
    reduce    : reduce,
    keys      : keys
}

},{}]},{},[3])
//@ sourceMappingURL=data:application/json;base64,
;
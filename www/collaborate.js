// Generated by CoffeeScript 1.6.3
(function() {
  var checkAncestor, commonAncestor, diff, hash, listener, parents, receiveDiff, root, sendDiff, setListener, setText, sha, storeText, text, texts, trunk, _;

  root = module.exports = require('./base');

  _ = require('./lazy');

  sha = require('./sha256');

  diff = require('./diff');

  text = '';

  hash = '';

  trunk = '';

  texts = {};

  parents = {};

  listener = function() {};

  storeText = function(txt) {
    var textHash;
    textHash = sha.hash(txt);
    texts[textHash] = txt;
    return textHash;
  };

  setText = function(txt) {
    var ancestor, merge, oldHash, oldText, trunkText;
    oldHash = hash;
    oldText = text;
    if (txt !== text) {
      text = txt;
      hash = storeText(txt);
      merge = null;
      if (oldHash) {
        parents[hash] = oldHash;
        if (trunk !== oldHash) {
          sendDiff(oldHash, oldText, hash, txt, true);
          trunkText = texts[trunk];
          ancestor = commonAncestor(oldHash, trunk);
          storeText(_(diff.diff3_merge(txt, texts[ancestor], texts[trunk], true)).reduce((function(str, result) {
            if (result.ok) {
              return result.ok.join('');
            } else {
              return result.conflict.a + result.conflict.b;
            }
          }), ''));
          merge = oldHash;
          oldHash = trunk;
          oldText = texts[trunk];
        }
        return sendDiff(oldHash, oldText, hash, txt, false, merge);
      }
    }
  };

  commonAncestor = function(h1, h2) {
    var anc, r;
    anc = {};
    while (h1 || h2) {
      if (r = checkAncestor(h1, anc)) {
        return r;
      }
      if (r = checkAncestor(h2, anc)) {
        return r;
      }
      h1 = h1 && parents[h1];
      h2 = h2 && parents[h2];
    }
    return null;
  };

  checkAncestor = function(ancestor, set) {
    if (ancestor && set[ancestor]) {
      return set[ancestor];
    } else {
      set[ancestor] = true;
      return null;
    }
  };

  sendDiff = function(parentHash, parentText, hash, txt, keepPrivate, merge) {
    var d;
    d = diff.diff_patch(parentText, txt);
    return console.log("Hash: " + hash + ", Parent: " + parentHash + ", Patch: " + (JSON.stringify(d)));
  };

  receiveDiff = function(hash, diff) {
    storeText(d.patch(texts[hash], diff));
    trunk = hash;
    return listener();
  };

  setListener = function(l) {
    return listener = l;
  };

  root.setText = setText;

  root.receiveDiff = receiveDiff;

  root.setCollaborationListener = setListener;

}).call(this);

/*
//@ sourceMappingURL=collaborate.map
*/

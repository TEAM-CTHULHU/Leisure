require 'std.lsr'

gassoc k alist  = find (\el . eq k (head el)) alist (\cell . tail cell) nil

############
# Assoc List Lenses
############

alensNew key list = (gassoc key list) : (\value . alensNew key (aconsf key value list)) : list
alensDrill key alens = \\
  parentList = alensList alens
  .
  (gassoc key parentList) : (\value . alensSet alens (aconsf key value (alensGet alens))) : parentList
alensGet alens = head alens
alensSet alens value = (head (tail alens)) value
alensList alens = tail (tail alens)

#
# Paths use lenses, but they can apply to any assoc list
# Path setters return the new assoc list
#
apathNew keys = foldl (\parent key .
  isNil parent
    alensNew key
    apathDrill key parent) nil keys
apathDrill key path = compose (alensDrill key) path
apathGet path = compose alensGet path
apathSet path value = \list . alensList (alensSet (path list) value)

getApath keys list = apathGet keys list
setApath keys value list = apathSet keys value list

world = ['nextId':0]

############
# TESTING
############

makeThing properties world = do
  nextId = gassoc 'nextId' world
  thingId = concat['thing' nextId]
  lens = alensNew thingId (aconsf 'nextId' nextId + 1 world)
  alensSet lens ['id' : thingId | properties]

############
# TESTING
############

do
  thing1 = makeThing 'name':'bob' world
  thing2 = makeThing 'name':'fred' (alensList thing1)
  thing3 = makeThing 'name':'joe' (alensList thing2)
  print (alensList thing3)
  l1 = alensSet (alensNew 'a' ['a':0]) []
  print (alensList l1)
  l2 = alensSet (alensDrill 'b' l1) 1
  print (alensList l2)
  path1 = apathNew ['a']
  path2 = apathNew ['a' 'b']
  l1 = apathSet path1 [] []
  print l1
  l2 = apathSet path2 '3' l1
  print l2

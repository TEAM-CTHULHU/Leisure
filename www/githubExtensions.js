// Generated by CoffeeScript 1.6.3
(function() {
  var Base64, Ext, Github, connect, root;

  root = module.exports = require('./base');

  Base64 = require('./base64');

  Github = require('./github');

  Ext = {};

  connect = function(options) {
    var con, k, oldIssue, oldRepository, v;
    con = new Github(options);
    for (k in Ext) {
      v = Ext[k];
      con[k] = v;
    }
    oldIssue = Github.Issue;
    Github.Issue = function(options) {
      oldIssue.call(this, options);
      return this.path = "/repos/" + options.user + "/" + options.repo + "/issues";
    };
    Github.Issue.prototype = oldIssue.prototype;
    Github.Issue.prototype = {
      getComments: function(number, options, cb) {
        return Github._request("GET", "" + this.path + "/" + number + "/comments" + ((options != null ? options.page : void 0) ? '?page=' + options.page : ''), options, cb);
      }
    };
    oldRepository = Github.Repository;
    Github.Repository = function(options) {
      oldRepository.call(this, options);
      this.path = "/repos/" + options.user + "/" + options.name;
      this.contents = Github.Repository.prototype.contents;
      return this;
    };
    Github.Repository.prototype = oldRepository.prototype;
    Github.Repository.prototype = {
      contents: function(branch, file, cb, sync) {
        var url, xhr;
        url = "https://api.github.com" + this.path + "/contents/" + file + "?ref=" + branch;
        xhr = new XMLHttpRequest();
        xhr.dataType = "json";
        xhr.open("GET", url, !sync);
        if (!sync) {
          xhr.onreadystatechange = function() {
            console.log("CHANGE: " + this.readyState);
            if (this.readyState === 4) {
              console.log("RESPONSE: " + this.responseText);
              if (this.status >= 200 && this.status < 300 || this.status === 304) {
                return cb(null, this.responseText, this);
              } else {
                return cb({
                  path: path,
                  request: this,
                  error: this.status
                });
              }
            }
          };
        }
        xhr.setRequestHeader('Accept', 'application/vnd.github.raw+json');
        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
        if (options.token || (options.username && options.password)) {
          xhr.setRequestHeader('Authorization', (options.token ? 'token ' + options.token : 'Basic ' + Base64.encode(options.username + ':' + options.password)));
        }
        xhr.send();
        if (sync) {
          return xhr.response;
        }
      },
      getEvents: function(options, cb) {
        return Github._request("GET", "" + this.path + "/events" + ((options != null ? options.page : void 0) ? '?page=' + options.page : ''), options, cb);
      }
    };
    return con;
  };

  root.githubConnect = connect;

}).call(this);

/*
//@ sourceMappingURL=githubExtensions.map
*/

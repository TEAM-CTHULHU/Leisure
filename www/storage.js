// Generated by CoffeeScript 1.6.3
(function() {
  var Github, connectStorage, connection, defaultEnv, getAllIssuesAndComentsThen, initStorage, lazy, repo, resolve, root, storageListener, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = root = module.exports = require('./base'), resolve = _ref.resolve, lazy = _ref.lazy, defaultEnv = _ref.defaultEnv;

  Github = require('./github');

  connection = null;

  repo = null;

  initStorage = function() {
    $('#login').css('display', '');
    $('#panel').css('display', 'none');
    $('#name').val(localStorage.getItem('githubName'));
    $('#password').val(localStorage.getItem('githubPassword'));
    $('#repository').val(localStorage.getItem('githubRepository'));
    return $('#file').val(localStorage.getItem('githubFile'));
  };

  connectStorage = function() {
    var file, name, password, repository;
    localStorage.setItem('githubName', name = $('#name').val());
    localStorage.setItem('githubPassword', password = $('#password').val());
    localStorage.setItem('githubRepository', repository = $('#repository').val());
    localStorage.setItem('githubFile', file = $('#file').val());
    connection = new Github({
      username: name,
      passwd: password
    });
    repo = connection.getRepo(name, repository);
    return getAllIssuesAndComentsThen(connection, repo, function() {
      var contents;
      if (!(__indexOf.call(root.reparseListeners, storageListener) >= 0)) {
        root.reparseListeners.push(storageListener);
      }
      return contents = repo.contents('master', file, function(err, data) {
        if (!err) {
          root.reparse($('[maindoc]')[0], data);
        } else {
          alert("ERROR: " + err);
        }
        $('#panel').css('display', '');
        return $('#login').css('display', 'none');
      });
    });
  };

  getAllIssuesAndComentsThen = function(con, repo, block) {
    return block();
  };

  storageListener = function(element, orgNode, orgText) {};

  root.initStorage = initStorage;

  root.connectStorage = connectStorage;

}).call(this);

/*
//@ sourceMappingURL=storage.map
*/

##########################
# sum basic list functions
##########################

make_list e c = if (eq c 0) nil (cons e (make_list e (-- c) ) )
count_down c = if (eq c -1) nil (cons c (count_down (-- c)))
count_up c = reverse (count_down c)

# digits handling
digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ]

##########################
# connect four 'variables'
##########################

player1 = 'R'
player2 = 'B'
empty = ' '
NUM_COLS = 7
NUM_ROWS = 6
ALL_COLS_UP = count_up (-- NUM_COLS)
ALL_ROWS_UP = count_up (-- NUM_ROWS)

####################
# connect four funcs
####################

rc2spot r c = + r (* NUM_ROWS c)
spot b r c = at b (rc2spot r c)

fill_spot p b spot = (append (take spot b) (append [ p ] (drop (++ spot) b) ) )
base_find_empty_spot b c r = if (or (lt r 0) (gte r NUM_ROWS))
  nil
  if (eq empty (spot b r c))
    rc2spot r c
    base_find_empty_spot b c (-- r)

find_empty_spot b c = base_find_empty_spot b c (-- NUM_ROWS)
playMove p b c = fill_spot p b (find_empty_spot b c)

playMoves p b l = if (eq l nil)
  b
  let
    new_b = playMove p b (head l)
    playMoves p new_b (tail l)


#map func list = list (\h t D . cons (func h) (map func t)) nil
#flip f a b = f b a

##################################
# draw the board out on the screen
##################################

div = "+---+---+---+---+---+---+---+"
ending = "| 0 | 1 | 2 | 3 | 4 | 5 | 6 |\n"

showR b r l = if (eq l nil) ''
  concat [ "| ", (spot b r (head l)), " ", (showR b r (tail l)) ]

showRow b r = + (showR b r ALL_COLS_UP) "|"
showRows b l = if (eq l nil) (print div)
  do
    print (showRow b (head l))
    showRows b (tail l)
        
showBoard b = do
  print (concat [ "\n", div ])
  showRows b ALL_ROWS_UP
  print ending

#############################################################
# brute force check for win conditions. this is so not pretty
#############################################################


# the board is a series of vertical rows, here is an example of 3 columns and 4 rows, with the 'spot' given for each position
#
#         columns
#         0   1   2   3   4   5   6  
#       +---+---+---+---+---+---+---+
# row 0 | 0 | 6 |12 |18 |24 |30 |36 |
# row 1 | 1 | 7 |13 |19 |25 |31 |37 |
# row 2 | 2 | 8 |14 |20 |26 |32 |38 |
# row 3 | 3 | 9 |15 |21 |27 |33 |39 |
# row 4 | 4 |10 |16 |22 |28 |34 |40 |
# row 5 | 5 |11 |17 |23 |29 |35 |41 |
#       +---+---+---+---+---+---+---+
#        | 0 | 1 | 2 | 3 | 4 | 5 | 6 |

#barf r cols = if (eq cols nil) nil
#  cons (+ (head cols) r) (barf r (tail cols))
#foopy r cols = if (eq cols nil) nil
#  cons (barf r (head cols)) (foopy r (tail cols))
#add_groups rows cols = if (eq rows nil) nil
#  append (foopy (head rows) cols) (add_groups (tail rows) cols)
#horzWinSpots = add_groups ALL_ROWS_UP [ [0, 6, 12, 18], [6, 12, 18, 24], [12, 18, 24, 30], [18, 24, 30, 36] ]

horzWinSpots = [[0, 6, 12, 18], [6, 12, 18, 24], [12, 18, 24, 30], [18, 24, 30, 36], [1, 7, 13, 19], [7, 13, 19, 25], [13, 19, 25, 31], [19, 25, 31, 37], [2, 8, 14, 20],  [8, 14, 20, 26], [14, 20, 26, 32], [20, 26, 32, 38], [3, 9, 15, 21], [9, 15, 21, 27], [15, 21, 27, 33], [21, 27, 33, 39], [4, 10, 16, 22], [10, 16, 22, 28], [16, 22, 28, 34], [22, 28, 34, 40], [5, 11, 17, 23], [11, 17, 23, 29], [17, 23, 29, 35], [23, 29, 35, 41]]
vertWinSpots = [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [6, 7, 8, 9], [7, 8, 9, 10], [8, 9, 10, 11], [12, 13, 14, 15], [13, 14, 15, 16], [14, 15, 16, 17], [18, 19, 20, 21], [19, 20, 21, 22], [20, 21, 22, 23], [24, 25, 26, 27], [25, 26, 27, 28], [26, 27, 28, 29], [30, 31, 32, 33], [31, 32, 33, 34], [32, 33, 34, 35], [36, 37, 38, 39], [37, 38, 39, 40], [38, 39, 40, 41] ]
lDiagWinSpots = [[2, 9, 16, 23], [1, 8, 15, 22], [8, 15, 22, 29], [0, 7, 14, 21], [7, 14, 21, 28], [14, 21, 28, 35], [6, 13, 20, 27], [13, 20, 27, 34], [20, 27, 34, 41], [12, 19, 26, 33], [19, 26, 33, 40], [18, 25, 32, 39] ]
rDiagWinSpots = [[3, 8, 13, 18], [4, 9, 14, 19], [9, 14, 19, 24], [5, 10, 15, 20], [10, 15, 20, 25], [15, 20, 25, 30], [11, 16, 21, 26], [16, 21, 26, 31], [21, 26, 31, 36], [17, 22, 27, 32], [22, 27, 32, 37], [23, 28, 33, 38] ]


###########################################################
# print out the win condition arrays for visual verfication
###########################################################

testMoves p b l = if (eq l nil) b
  let
    new_b = fill_spot p b (head l)
    testMoves p new_b (tail l)
testWins2 b grp = showBoard (testMoves 'W' b grp)
testWins b spots = if (eq spots nil) nil
  do
    testWins2 b (head spots)
    testWins b (tail spots)

testHorz = testWins startBoard horzWinSpots
testVert = testWins startBoard vertWinSpots

###############################################
# check for a winner using the predefined spots
###############################################

# check the four spots in this list to see if they all match one player
check_group b l = let
  check = concat [ (at b (at l 0)), (at b (at l 1)), (at b (at l 2)), (at b (at l 3)) ]
  if (eq check player1Win) player1
    if (eq check player2Win) player2
      empty

# loop over all the groups looking for a winning group
loop_spots b spots = if (eq spots nil)
  empty
  let
    grp = check_group b (head spots)
    if (neq grp empty) grp (loop_spots b (tail spots))

# see if any of the precomputed list of winning groups are all owned by the same player
win? b =
  let
    spot1 = loop_spots b horzWinSpots
    spot2 = loop_spots b vertWinSpots
    spot3 = loop_spots b lDiagWinSpots
    spot4 = loop_spots b rDiagWinSpots
    if (neq spot1 empty) spot1
      if (neq spot2 empty) spot2
        if (neq spot3 empty) spot3
          if (neq spot4 empty) spot4 empty


########################################
# last of the variables we need to setup
########################################

CONNECT = 4
player1Win = concat (make_list player1 CONNECT)
player2Win = concat (make_list player2 CONNECT)
startBoard = make_list empty (* NUM_ROWS NUM_COLS)
win1Board = playMoves player1 startBoard (make_list 0 CONNECT) 
win2Board = playMoves player2 startBoard (count_up (-- CONNECT) ) 
testFullBoard = make_list '-' (* NUM_ROWS NUM_COLS)


#################################
# process moves and play the game
#################################

# tie? : return true if the game was a tie
tie? b = not ( any (eq empty) b )

# nextPlayer : returns the opposite player from what was passed in
nextPlayer p = if (eq p player1) player2 player1

isColumnLegal b c = eq empty (spot b 0 c)
# isLegalMove : return true if the move passed in is legal. NOTE: move is a character '0' thru '9'
isLegalMove b m = (\i . (and (not (eq i nil)) (isColumnLegal b i))) (indexof digits m)

# checkMove : if the move is legal, apply it to the board and let the next player take their turn. otherwise same player must try again
checkMove p b move = if (isLegalMove b move)
  playGame (nextPlayer p) (playMove p b (indexof digits move))
  promptOrEnd p b

#gameOver : return a string if the game is over with the results or return empty if we should continue
gameOver b winner = if (eq winner empty)
  if (tie? b) "WE HAVE A TIE!!!" empty
  concat [ "WINNER: Player ", winner, "!!!" ]

convertMove p b move = eq move 'c'
  checkMove p b (minmax p b)
  checkMove p b move

#winner : if the game is not over, prompt current player for a move. otherwise print result of game
winner w p b = if (eq empty w)
  do
    move <- prompt (concat ["Your move player ", p, ">" ])
    convertMove p b move
  print w

#promptOrEnd : either announce the results of the game or prompt the current player for a move
promptOrEnd p b = winner (gameOver b (win? b)) p b

#playGame : recursively take turns playing
playGame p b = do
  showBoard b
  promptOrEnd p b

#main : start the game with the initial parameters
main = playGame player1 startBoard


####
# AI
####

minmax p b = at digits (head (legalMoves b))

all_moves = ALL_COLS_UP
base_legalMoves b all = if (eq all nil)
  nil
  if (eq (at b (head all)) empty)
    cons (head all) (base_legalMoves b (tail all))
    base_legalMoves b (tail all)

legalMoves b = base_legalMoves b all_moves



##################
# GUI Interactions
##################

promptPlayer p = print (concat ["Your move player ", p, " [0-6] or c or q>" ])

newGame e = do
  setValue 'board' startBoard
  setValue 'player' player1
  showBoard startBoard
  browser [ "showBoard('", (concat startBoard), "')" ]
  promptPlayer player1

click move = do
  b <- getValue 'board'
  p <- getValue 'player'
  if (eq 'c' move)
    click (minmax p b)
    if (isLegalMove b move)
      do
        new_b = playMove p b (indexof digits move)
        win_msg = gameOver new_b (win? new_b)
        next_p = nextPlayer p
        showBoard new_b
	  browser [ "showBoard('", (concat new_b), "')" ]
        if (neq win_msg empty) (print win_msg) (promptPlayer next_p)
        setValue 'board' new_b
        setValue 'player' next_p
      print "Illegal move, please try again"

click0 e = click '0'
click1 e = click '1'
click2 e = click '2'
click3 e = click '3'
click4 e = click '4'
click5 e = click '5'
click6 e = click '6'


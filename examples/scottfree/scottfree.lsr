require '../../newCode/std.lsr'

GH_MAGIC = 0
GH_NUM_ITEMS = 1
GM_NUM_ACTIONS = 2
GH_NUM_WORDS = 3   # shorter list of nouns and verbs is padded
GH_NUM_ROOMS = 4
GH_MAX_CARRY = 5
GH_PLAYER_ROOM = 6
GH_NUM_TREASURES = 7
GH_WORD_LENGTH = 8
GH_LIGH_TTIME = 9
GH_NUM_MESSAGES = 10
GH_TREASURE_ROOM = 11
GH_SIZEOF = 12

GameHeader = [ ]

Verbs = [ ]
Nouns = [ ]
Rooms = [ ]
Items = [ ]
Messages = [ ]
Comments = [ ]
Actions = [ ]
LightRefill = 0

GameTail = [ 'Version':0 'AdventureNumber':0 'Magic':0 ]

conditions = [ '' 'HAS' 'IS_in_AR' 'IS_AVAIL' 'PLAYER_IN' 'IS_NOT_in_AR' 'HAS_NOT' 'PLAYER_NOT_IN' 'SET_BIT' 'CLEARED_BIT' 'HAS_SOMETHING' 'HAS_NOTHING' 'IS_NOT_AVAIL' 'IS_NOT_in_ROOM0' 'IS_in_ROOM0' 'COUNTER <=' 'COUNTER >' 'IS_in_OrigROOM' 'IS_NOT_in_OrigROOM' 'COUNTER ==' ]

NONE = 1
ACTION = 2
ITEM = 3
ROOM = 4
NUMBER = 5
BITFLAG = 6

conddata = [  ACTION ITEM ITEM ITEM ROOM ITEM ITEM ROOM BITFLAG BITFLAG NONE NONE ITEM ITEM ITEM NUMBER NUMBER ITEM ITEM NUMBER ]

acts = flatten [
  ['GET' 'MOVE_INTO_AR' 'GOTO' 'REMOVE' 'SET_NIGHT']
  ['SET_DAY' 'SET_BIT' 'REMOVE' 'CLEAR_BIT' 'KILL_PLAYER']
  ['MOVE_X_INTO_Y' 'QUIT' 'LOOK' 'SCORE' 'INVENTORY']
  ['SET_BIT (0)' 'CLEAR_BIT (0)' 'FILL_LAMP' 'CLS' 'SAVE']
  ['SWAP_ITEMS' 'CONTINUE:' 'GET_ALWAYS' 'PUT_X_WITH_Y' 'LOOK']
  ['COUNTER -= 1' 'PRINT_COUNTER' 'COUNTER =' 'SWAP_LOC_RV' 'SWAP_COUNTER']
  ['COUNTER +=' 'COUNTER -=' 'ECHO_NOUN' 'ECHO_NOUN_CR' 'CR']
  ['SELECT_RV' 'DELAY' 'SHOW_PIC' 'COMM90' 'COMM91']
  ['COMM92' 'COMM93' 'COMM94' 'COMM95' 'COMM96']
  ['COMM97' 'COMM98' 'COMM99' 'COMM100' 'COMM101'] ]

NOT = 0
IT = 1
RO = 2
FL = 3
IT_RO = 4
IT_IT = 5
NUM = 6

actdata = flatten [
  [IT IT RO IT NOT NOT FL IT FL NOT]
  [IT_RO NOT NOT NOT NOT NOT NOT NOT NOT NOT]
  [IT_IT NOT IT IT_IT NOT NOT NOT NUM NOT FL]
  [NUM NUM NOT NOT NOT FL NOT FL NOT NOT]
  [NOT NOT NOT NOT NOT NOT NOT NOT NOT NOT] ]

direct = [ 'north' 'south' 'east' 'west' 'up' 'down' ]

loadGame filename = do
  result <- readFile filename
  result
	\err . print concat[ 'Error: ' err ]
	\contents . processFile (everyLinesForFile contents)

everyLinesForFile text =  collapseStrings strSplit (strReplace text lineScrub '\n') '\\r?\\n'

# TODO: for every string that starts with " and doesn't end, combine following strings into a single string element 
collapseStrings list = isNil list
   list
   isPartialString (head list)
     collapseStrings (cons ((head list) + (head (tail list))) (tail (tail list)))
     cons (head list) (collapseStrings (tail list))

# return true if the string starts with " but doesn't end in one	 
isPartialString string = strMatches string '^".*[^"]$'
	 
processFile contents = do
  #print contents
  #print (at contents 0)
  GameHeader <- (take GH_SIZEOF contents)
  setValue 'GameHeader' GameHeader
  after_header <- (drop GH_SIZEOF contents)
  num_actions <- (at GameHeader GM_NUM_ACTIONS)
  max_actions <- (num_actions * 1 + 1) * 8
  print concat[ 'num actions: ' num_actions ' max actions: ' max_actions]
  Actions <- box 8 (take max_actions after_header)
  setValue 'Actions' Actions
  after_actions <- drop max_actions after_header
  num_words <- at GameHeader GH_NUM_WORDS
  max_words <- (num_words * 1 + 1) * 2
  Words <- take max_words after_actions
  setValue 'Nouns' (evens Words)
  setValue 'Verbs' (odds Words)
  after_words <- drop max_words after_actions
  num_rooms <- at GameHeader GH_NUM_ROOMS
  max_rooms <- (num_rooms * 1 + 1) * 7
  Rooms <- box 7 (take max_rooms after_words)
  setValue 'Rooms' Rooms
  after_rooms <- drop max_rooms after_words
  "Data File Loaded."

merge list1 list2 = isNil list1
  nil
  isNil list2
	nil
	append [ (head list1) (head list2) ] (merge (tail list1) (tail list2))
  
debugGame = do
  GameHeader <- getValue 'GameHeader'
  print (merge [ '\nmagic: ' '\nnum items: ' '\nnum actions: ' '\nnum words: ' '\nnum rooms: ' '\nmax carry: ' '\nplayer room: ' '\ntreasures: ' '\nword len: ' '\nlight time: ' '\nnum msgs: ' '\ntreasure room: '] GameHeader)
  #print (length GameHeader)
  #print (at GameHeader 1)
  Actions <- getValue 'Actions'
  print concat[ "Num Actions: " (length Actions) "\nFirst Action: " (at Actions 0) "\nLast Action: " (last Actions) ]
  Nouns <- getValue 'Nouns'
  print concat[ "Num Nouns: " (length Nouns) " Nouns: " Nouns]
  Verbs <- getValue 'Verbs'
  print concat[ "Num Verbs: " (length Verbs) " Verbs: " Verbs]
  Rooms <- getValue 'Rooms'
  print concat[ "Num Rooms: " (length Rooms) '\nFirst Room: ' (at Rooms 0) '\nLast Room: ' (last Rooms)]
  print concat[ "All Rooms: " Rooms ]
  "Debug finished."
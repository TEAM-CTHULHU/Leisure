require 'maps'

insert-fields map = if (null? map) ''
  concat [ (field (first-pair map)), (insert-fields (rest-pairs map)) ]

svg-template attrs contents = html (concat [ '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" ', attrs, '>', contents, '</svg>'])

svg o map = svg-template (concat ['style="width: ', (get-value-default 'width' 100 map), '; height: ' , (get-value-default 'height' 100 map), '"']) (o id)

svg-file map = html (concat [ '<object xmlns="http://www.w3.org/2000/svg" version="1.1" ', (insert-fields map), '</object>' ] )

field cell = concat [ (key cell), '="', (value cell), '" ' ]

default-circle-map = hash-from-list [ 'cx', 50, 'cy', 50, 'r', 40, 'stroke', 'black', 'stroke-width', 2, 'fill', 'red' ]
default-rect-map = hash-from-list [ 'x', 1, 'y', 1, 'width', 50, 'height', 50, 'stroke', 'black', 'stroke-width', 2, 'fill', 'green' ]
default-line-map = hash-from-list [ 'x1', 0, 'y1', 0, 'x2', 50, 'y2', 50, 'stroke', 'black', 'stroke-width', 2 ]
default-ellipse-map = hash-from-list [ 'cx', 50, 'cy', 50, 'rx', 40, 'ry', 40, 'stroke', 'black', 'stroke-width', 2, 'fill', 'blue' ]
default-text-map = hash-from-list [ 'x', 0, 'y', 10, 'stroke', 'black', 'stroke-width', 2, 'fill', 'black' ]
default-polygon-map = hash-from-list [ 'points', '350,75  379,161 469,161 397,215 423,301 350,250 277,301 303,215 231,161 321,161', 'stroke', 'black', 'stroke-width', 2, 'fill', 'yellow' ]

svg-node contents = \f . f contents

svg-nodes nodeList = nodeList (\h t D . cons (h id) (svg-nodes t)) nil

svg-concat nodeList = svg-node (concat (svg-nodes nodeList))

svg-element name map = svg-node (concat [ '<', name, ' ', (insert-fields map), '/>' ])

svg-measure content = prim-svg-measure content

svg-present content = svg-measure content \x y w h .
  svg-template (concat ["width='", w, "' height='", h, "' viewbox='", x, ' ', y, ' ', w, ' ', h, "'"]) content

circle map = svg-element 'circle' (if (null? map) default-circle-map map)
rect map = svg-element 'rect' (if (null? map) default-rect-map map)
ellipse map = svg-element 'ellipse' (if (null? map) default-ellipse-map map)
line map = svg-element 'line' (if (null? map) default-line-map map)
text t map = svg-node (concat [ '<text ', (insert-fields (if (null? map) default-text-map map)), '>', (if (null? t) 'undefined' t), '</text>' ])
polygon map = svg-element 'polygon' (if (null? map) default-polygon-map map)

group elem = svg-node (concat [ '<g>', (elem id), '</g>' ])
translate elem x y = svg-node (concat ['<g transform="translate(', x, ', ', y, ')">', (elem id), '</g>' ])
rotate elem r = svg-node (concat ['<g transform="rotate(', r, ')">', (elem id), '</g>' ])

#flatten-tree-base t map d c = if (null? t) map
#  do
#    id = concat [ '(', d, ',', c, ')' ]
#    add-hash id [ id, d, c] (merge-hash (flatten-tree-base (first-child t) (++ d) 0) (flatten-tree-base (next-sibling t) 0 (++ c) ) )

#flatten-tree t = flatten-tree-base t nil 0 0
  
#svg-build-tree t = traverse t (\c. add-child c r)

#foopy = 1


# bad compile doesnt delete old .js file
# can you print out html as plain text in the console

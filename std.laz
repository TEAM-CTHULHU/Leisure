# primitives
#
# eq a b -> true if they are equal or false otherwise
#
# getType value -> an option containing the type
# 
# is value type -> true if the value has type type, false otherwise
#
# eval ast -> evaluates ast and returns the result
#
#    MONAD-constructors
#
# parse string -> an Either with ast or error msg (give it two functions)
#
# bind m binding -> transform a monad with a lambda
#
# print string binding -> print a string, continue binding with false (or end)
#
# prompt string binding -> ask user for input, contine binding with input string (or end)
#
# return value binding -> continue binding with value
#
# js string binding -> run JS code and continue with value
#
# createS binding -> create a new state variable and continue binding with it
#
# getS var binding -> get the value from the state variable var and continue binding with it
#
# setS var val binding -> set the state variable var to val and continue binding with false
#
# end -- the string 'end' -- ends a monad chain
#
#    STRING functions
#
# concat list -> string
#
#    AST-constructors
#
# lit value -> a lit AST node, containing value
#
# ref var-name -> a ref AST node, containing var-name
#
# lambda var-name body-ast -> a lambda AST node, with var-name and the body AST
#
# apply func-ast body-ast -> an apply AST node, with func and body ASTs
#
# prim arg rest-ast -> a prim AST node, rest-ast should either be a ref or a prim
# 

id x = x

# booleans
true = \a b . a
false = \a b . b
and a b = a b false
or a = a true
not a = a false true
neq a b = not (eq a b)

# choices
left v = \l r . l v
right v = \l r . r v
some x = \yes no . yes x
some2 a b = \yes no . yes a b
none = \yes no . no

# The Y combinator, for reference
#
# Y = \g  .  (\x  .  g (x x)) \x  .  g (x x)
# rec = \f . f (Y f)

# lists
cons a b =
  \f . f
    a
    b

nil = \a b . b
append l1 l2 = l1 (\h t D . cons h (append t l2)) l2

# some basic list functions

head l = l \h t . h
tail l = l \h t . t
isempty l = (eq (l) nil)
null l = l (\h t D . false) true
reverse l = (eq (tail l) nil) l (append (reverse (tail l)) (cons (head l) nil))
addstr a b = concat [a, b]
if p = p
iszero = eq 0
length l = (eq l nil) 0 (++ (length (tail l) ) )

-- x = - x 1
++ x = + x 1
at l x = (iszero (x)) (head l) (at (tail l) (-- (x) ) )
take x l = (iszero x) nil (append [ (head l) ] (take (-- x) (tail l) ) )
drop x l = (iszero x) l (drop (-- x) (tail l) )

any f l = (eq (l) nil) false ((f (head l)) true (any f (tail l)))

index_combine x y = (or (eq x nil) (eq y nil)) (nil) (+ x y)
# return nil if not found, or 0 based index of the first match
indexof l x = if (eq l nil) (nil) (if (eq x (head l)) (0) (index_combine 1 (indexof (tail l) x ) ) )


# simple list constructor syntax
[ =(]= \item c . c \rest . cons item rest
, =.= \f item c . c \rest . f (cons item rest)
] =)= \f . f nil
| =.= \f rest g . f rest

# difference lists
dl list = append list
dlAppend da db list = da (db list)
dlList dl = dl nil

# do
identMacro apl =M= apl \f a . (is f ref) a (apply (identMacro f) a)
    
do apl =M= apl \f a . m_subdo a f

m_subdo a f = or (is f ref) (is f lit)
  a
  f \f2 a2 . m_subdo
    m_extractVar a2 '<-'
      \v ast . apply (apply (ref 'bind') ast) (lambda v a)
      m_extractVar a2 '='
        \v ast . apply (lambda v a) ast
        apply (apply (ref 'bind') a2) (lambda '_' a)
    f2

let apl =M= apl \f a . m_sublet f a

m_sublet f a = or (is f ref) (is f lit)
  a
  f \f2 a2 . m_extractVar a2 '='
    \v ast . m_sublet f2 (apply (lambda v a) ast)
    apply a a2

# m_extractVar ast '<-'
#
# given (var <- .....), it returns (some2 var ast)
# otherwise, it returns none
#
m_extractVar ast token = is ast apply
  ast \f a .m_varFromTuple f token
    \v . some2 v a
    m_extractVar f token
      \var ast . some2 var (apply ast a)
      none
  none

# m_extractVar ast '<-'
#
# given (var <-), it returns (some var), otherwise it returns none
m_varFromTuple ast token = is ast apply
  ast \f arg . or (is f ref) (is f lit)
    or (is arg ref) (is arg lit)
      arg \arrow . eq arrow token
        f \v . some v
        none
      none
    none
  none

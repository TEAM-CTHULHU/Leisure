###################
# trees !
###################

empty-tree = nil

make-tree t = cons (cons t nil) nil

add-child t c = if (null? t)
  c
  cons (append (head t) c) nil

first-child t = tail (head t)

next-sibling t = tail t

data t = head (head t)

traverse-prefix t f = if (null? t) (f nil)
  do
    ch = first-child t
    f (data t)
    traverse-prefix ch f
    traverse-prefix (next-sibling ch) f


traverse-infix t f = if (null? t) (f nil)
  do
    ch = first-child t
    append (traverse-infix ch f) (cons (f t) ( traverse-infix (next-sibling ch) f ) )



# private-inner function for finding the children
inner-children c = if (eq c nil) nil
  cons (head c) (inner-children (next-sibling c))

# children - make a list of the children we can map over
children t = if (eq t nil) nil
  inner-children (first-child t)

###########################
# silly testing funcs
###########################


#          1
#  2     3   4     5 
#6 7 8       9   10  11
#           12
# trees are stored as a list with root node value, then first-child, then siblings, all recursively

test-tree = [[1, [2, [6], [7], [8] ], [3], [4, [9, [12] ]], [5, [10], [11] ]]]
test-small-tree = [[1, [2, [6], [7], [8] ] ]]
tiny-tree = [[1, [2]]]

t1 = make-tree 1
t2 = make-tree 2
t6 = make-tree 6
t7 = make-tree 7
t8 = make-tree 8

test-build2 = (add-child (add-child (add-child t2 t6) t7) t8)

test-build = (add-child t1 (test-build2))


tmt4 = add-child (make-tree 4) (add-child (add-child (make-tree 4) (make-tree 12)) (make-tree 7)) 
tmt5 = add-child (make-tree 5) (add-child (add-child (make-tree 10) (make-tree 5)) (make-tree 6)) 
tmt1 = add-child (make-tree 1) (add-child (add-child (make-tree 1) (make-tree 2)) (make-tree 3)) 
test-minimax-tree = add-child (add-child (add-child (make-tree 5) tmt4) tmt5) tmt1

#burp = traverse-infix test-minimax-tree (\n. if (null? n) print '' (print (data n) ) )


######################################################
# messing around with basic minimax alpha/beta pruning
######################################################

#alpha-beta t = alpha-beta-tree t 4 -999999 999999

#alpha-beta-eval t = data t

#alpha-beta-tree t d alpha beta = if (null? t) alpha
#  if (or (null? (first-child t)) (lte d 0)) (alpha-beta-eval t)
#    alpha-beta-inside (first-child t) (-- d) alpha beta


#alpha-beta-inside t d alpha beta = if (null? t) alpha
#  do
#    val = (* -1 (alpha-beta-tree t d (- 0 beta) (- 0 alpha) ) )
#    if (gte val beta) val
#      if (gt val alpha)
#        alpha-beta-tree (next-sibling t) d val beta
#        alpha-beta-tree (next-sibling t) d alpha beta  

#test = alpha-beta test-minimax-tree


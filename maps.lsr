
###########
# hashmaps!
###########

add-hash k v hashmap = cons (cons k v) (remove-hash k hashmap)

hash-from-list l = if (null? l) nil
  add-hash (head l) (head (tail l)) (hash-from-list (tail (tail l)))

key cons = head cons
value cons = tail cons

get-pair k hashmap = find-if (\x . eq (head x) k) hashmap
get-value k hashmap = (\pair. if (eq pair nil) nil (value pair)) (get-pair k hashmap)
get-value-default k default hashmap = do
  val = get-value k hashmap
  if (neq val nil) val default


get-keys hashmap = map (\cell . (key cell)) hashmap
num-keys hashmap = length (get-keys hashmap)

merge-hash-keys hm1 hm2 keys = if (null? keys) hm1
  if (null? (get-pair (head keys) hm1) )
    cons (get-pair (head keys) hm2) (merge-hash-keys hm1 hm2 (tail keys))
    merge-hash-keys hm1 hm2 (tail keys)

# keys in hm2 take precedence over keys in hm1
merge-hash hm1 hm2 = merge-hash-keys hm1 hm2 (get-keys hm2)

remove-hash k hashmap = remove-if (\x . eq (key x) k) hashmap


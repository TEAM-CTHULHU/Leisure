#vararg macros
#@auto
do
  defGroup 'concat[' ']'
  defGroup 'or[' ']'
  defGroup 'and[' ']'

concat[ list =M= ['concat' (cons '[' (tail list))]

or[ list =M= do
  args = (dropLast 1 (tail list))
  eq args nil
    ['true']
    eq (tail args) nil
      args
      foldr1 (\v el . ['or' v el]) args

# for debugging macros
lexAsCons l = eq l nil
  nil
  is l lexCons
    cons (lexAsCons (head l)) (lexAsCons (tail l))
    is l token
      tokenName l
      l

# defInfixToken tokenName precedence = do
#   defToken tokenName
#   defs <- getValue 'parseFilter.defs'
#   setValue 'parseFilter.defs' (assocSet 'infix' (assocSet tokenName precedence (assocGet 'infix' defs)) defs)
#
# parseInfix parseDefs list = parseInfixList (assocGet 'infix' parseDefs) list
#
# parseInfixList tokens list = is list lexCons
#   rearrange tokens (lexMap (parseInfix tokens) list)
#   list
#
# rearrange tokens list =

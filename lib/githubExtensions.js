// Generated by CoffeeScript 1.7.1
(function() {
  var Base64, Ext, Github, connect, contents, getRepo, root, setContents;

  root = module.exports = require('./base');

  Base64 = require('./base64');

  Github = require('./github');

  Ext = {};

  connect = function(options) {
    var con, k, oldIssue, oldRepository, v;
    con = new Github(options);
    for (k in Ext) {
      v = Ext[k];
      con[k] = v;
    }
    oldIssue = Github.Issue;
    Github.Issue = function(options) {
      oldIssue.call(this, options);
      return this.path = "/repos/" + options.user + "/" + options.repo + "/issues";
    };
    Github.Issue.prototype = oldIssue.prototype;
    Github.Issue.prototype = {
      getComments: function(number, options, cb) {
        return Github._request("GET", "" + this.path + "/" + number + "/comments" + ((options != null ? options.page : void 0) ? '?page=' + options.page : ''), options, cb);
      }
    };
    oldRepository = Github.Repository;
    Github.Repository = function(options) {
      oldRepository.call(this, options);
      this.path = "/repos/" + options.user + "/" + options.name;
      this.contents = contents(options);
      this.setContents = setContents(options);
      return this;
    };
    Github.Repository.prototype.getEvents = function(options, cb) {
      return Github._request("GET", "" + this.path + "/events" + ((options != null ? options.page : void 0) ? '?page=' + options.page : ''), options, cb);
    };
    return con;
  };

  getRepo = function(params) {
    return new Github.Repository(params);
  };

  contents = function(options) {
    return function(branch, file, cb, sync) {
      var url, xhr;
      url = "https://api.github.com" + this.path + "/contents/" + file + "?ref=" + branch;
      xhr = new XMLHttpRequest();
      xhr.open("GET", url, !sync);
      xhr.setRequestHeader("Accept", "application/json");
      if (!sync) {
        xhr.onreadystatechange = function() {
          var json;
          console.log("CHANGE: " + this.readyState);
          if (this.readyState === 4) {
            console.log("RESPONSE: " + this.responseText);
            if (this.status >= 200 && this.status < 300 || this.status === 304) {
              json = JSON.parse(this.responseText);
              options.sha = json.sha;
              return cb(null, atob(json.content.replace(/\n/g, '')), this);
            } else {
              return cb({
                path: file,
                request: this,
                error: this.status
              });
            }
          }
        };
      }
      if (options.token || (options.username && options.password)) {
        xhr.setRequestHeader('Authorization', (options.token ? 'token ' + options.token : 'Basic ' + Base64.encode(options.username + ':' + options.password)));
      }
      xhr.send();
      if (sync) {
        return xhr.response;
      }
    };
  };

  setContents = function(options) {
    return function(branch, file, data, cb, sync) {
      var url, xhr;
      url = "https://api.github.com" + this.path + "/contents/" + file;
      xhr = new XMLHttpRequest();
      xhr.open("PUT", url, !sync);
      xhr.setRequestHeader("Accept", "application/json");
      if (!sync) {
        xhr.onreadystatechange = function() {
          var json;
          console.log("CHANGE: " + this.readyState);
          if (this.readyState === 4) {
            console.log("RESPONSE: " + this.responseText);
            if (this.status >= 200 && this.status < 300 || this.status === 304) {
              json = JSON.parse(this.responseText);
              options.sha = json.sha;
              return (cb != null ? cb : function() {})(null);
            } else {
              return (cb != null ? cb : function() {})({
                path: file,
                request: this,
                error: this.status
              });
            }
          }
        };
      }
      xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
      if (options.token || (options.username && options.password)) {
        xhr.setRequestHeader('Authorization', (options.token ? 'token ' + options.token : 'Basic ' + Base64.encode(options.username + ':' + options.password)));
      }
      xhr.send(JSON.stringify({
        content: btoa(data),
        message: 'Commit from Leisure environment',
        sha: options.sha,
        branch: branch
      }));
      if (sync) {
        return xhr.response;
      }
    };
  };

  root.githubConnect = connect;

  root.getRepo = getRepo;

}).call(this);

//# sourceMappingURL=githubExtensions.map

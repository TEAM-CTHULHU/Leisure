// Generated by CoffeeScript 1.6.2
(function() {
  var compileFile, defaultEnv, diag, evalInput, gen, help, identity, monad, parseLine, readFile, readline, root, runMonad, runRepl, setDataType, setType, writeFile, _ref, _ref1, _ref2, _ref3;

  root = module.exports = require('./base');

  _ref = require('./ast'), setType = _ref.setType, setDataType = _ref.setDataType;

  gen = require('./gen').gen;

  _ref1 = require('./base'), readFile = _ref1.readFile, writeFile = _ref1.writeFile;

  _ref2 = require('./simpleParse'), parseLine = _ref2.parseLine, compileFile = _ref2.compileFile;

  _ref3 = require('./runtime'), identity = _ref3.identity, runMonad = _ref3.runMonad, defaultEnv = _ref3.defaultEnv;

  diag = false;

  readline = require('readline');

  evalInput = function(text) {
    var result;

    if (text) {
      if (diag) {
        console.log("Eval: (" + (gen(monad(L_parseLineM()(function() {
          return text;
        })))) + ")");
      }
      result = eval("(" + (gen(monad(L_parseLineM()(function() {
        return text;
      })))) + ")");
      if (result.cmd) {
        return monad(result);
      } else {
        return console.log(result);
      }
    }
  };

  monad = function(m) {
    return runMonad(m, defaultEnv, function(x) {
      return x;
    });
  };

  help = function() {
    return console.log("Welcome to the Leisure REPL!\n\nHere are the commands:\n:d -- toggle diagnostics\n:{ -- start multiline input\n:} -- end multiline input\n:h -- print this message\nfuncs -- list all known functions\n* -- evaluate Leisure code");
  };

  runRepl = function() {
    help();
    return readFile('core/simpleParse.lsr', function(err, code) {
      var js;

      js = compileFile(code, "simpleParse.js");
      if (err) {
        throw new Error(err);
      } else {
        return writeFile('/tmp/simpleParse.js', js, function(err) {
          var lines, multiline, rl;

          eval(js);
          lines = null;
          rl = readline.createInterface(process.stdin, process.stdout);
          multiline = false;
          rl.setPrompt('Leisure> ');
          rl.prompt();
          rl.on('line', function(line) {
            switch (line.trim()) {
              case ':d':
                diag = !diag;
                console.log("Diag: " + (diag ? 'on' : 'off'));
                break;
              case ':{':
                if (multiline) {
                  console.log("Already reading multiline input");
                } else {
                  multiline = true;
                  lines = [];
                  rl.setPrompt('Leisure {> ');
                }
                break;
              case ':}':
                if (!multiline) {
                  console.log("Not reading multiline input.");
                } else {
                  evalInput(lines.join('\n'));
                  lines = [];
                  rl.setPrompt('Leisure> ');
                }
                break;
              case ':h':
                help();
                break;
              default:
                if (multiline) {
                  lines.push(line);
                } else {
                  evalInput(line);
                }
            }
            return rl.prompt();
          });
          return rl.on('close', function() {
            return process.exit(0);
          });
        });
      }
    });
  };

  root.runRepl = runRepl;

}).call(this);

/*
//@ sourceMappingURL=repl.map
*/

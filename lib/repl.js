// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var Nil, action, ast2Json, compile, createAstFile, createJsFile, defaultEnv, diag, evalInput, fs, gen, genJsFromAst, gennedAst, gennedJs, help, identity, json2Ast, loadedParser, newOptions, outDir, path, primCompile, processArg, processedFiles, readFile, readline, recompiled, repl, root, run, runMonad, setDataType, setType, stage, stages, verbose, writeFile, _, _ref, _ref1, _ref2;

  require('source-map-support').install();

  root = module.exports = require('./base');

  _ = require('./lodash.min');

  path = require('path');

  fs = require('fs');

  _ref = require('./ast'), setType = _ref.setType, setDataType = _ref.setDataType, ast2Json = _ref.ast2Json, json2Ast = _ref.json2Ast, Nil = _ref.Nil;

  gen = require('./gen').gen;

  _ref1 = require('./base'), readFile = _ref1.readFile, writeFile = _ref1.writeFile;

  _ref2 = require('./runtime'), identity = _ref2.identity, runMonad = _ref2.runMonad, defaultEnv = _ref2.defaultEnv;

  global.runMonad = runMonad;

  global.setType = setType;

  global.setDataType = setDataType;

  global.defaultEnv = defaultEnv;

  global.identity = identity;

  stage = 2;

  stages = ['./simpleParseJS', './simpleParse', './generatedPrelude'];

  diag = false;

  readline = require('readline');

  evalInput = function(text, cont) {
    if (text) {
      return runMonad(L_newParseLine()(function() {
        return Nil;
      })(function() {
        return text;
      }), defaultEnv, function(ast) {
        if (diag) {
          console.log("AST: " + ast);
          console.log("CODE: (" + (gen(ast)) + ")");
        }
        return runMonad(eval("(" + (gen(ast)) + ")"), defaultEnv, cont);
      });
    } else {
      return cont('');
    }
  };

  help = function() {
    return console.log("Welcome to the Leisure REPL!\n\nHere are the commands:\n:d -- toggle diagnostics\n:{ -- start multiline input\n:} -- end multiline input\n:h -- print this message\n! -- evaluate JavaScript expression (after the !)\nfuncs -- list all known functions (this is really just a monad)\n(anything else) -- evaluate Leisure code\n");
  };

  repl = function() {
    var historyFile, leisureDir, lines, rl;

    lines = null;
    leisureDir = path.join(process.env.HOME, '.leisure');
    historyFile = path.join(leisureDir, 'history');
    rl = readline.createInterface(process.stdin, process.stdout);
    return fs.exists(historyFile, function(exists) {
      return (function(cont) {
        if (exists) {
          return readFile(historyFile, function(err, contents) {
            if (!err) {
              rl.history = contents.trim().split('\n').reverse();
            }
            return cont();
          });
        } else {
          return fs.exists(leisureDir, function(exists) {
            if (exists) {
              return cont();
            } else {
              return fs.mkdir(leisureDir, function(err) {
                if (err) {
                  console.log("Could not create leisure dir!");
                  process.exit(1);
                }
                return cont();
              });
            }
          });
        }
      })(function() {
        var multiline;

        help();
        multiline = false;
        rl.setPrompt('Leisure> ');
        rl.prompt();
        rl.on('line', function(line) {
          var err, l;

          if (rl.history[0] === rl.history[1]) {
            rl.history.shift();
          } else if (line.trim()) {
            fs.appendFile(historyFile, "" + line + "\n", (function() {}));
          }
          switch (line.trim()) {
            case ':d':
              diag = !diag;
              console.log("Diag: " + (diag ? 'on' : 'off'));
              break;
            case ':{':
              if (multiline) {
                console.log("Already reading multiline input");
              } else {
                multiline = true;
                lines = [];
                rl.setPrompt('Leisure {> ');
              }
              break;
            case ':}':
              if (!multiline) {
                console.log("Not reading multiline input.");
              } else {
                l = lines;
                lines = [];
                try {
                  evalInput(l.join('\n'), function(result) {
                    console.log(String(result));
                    rl.setPrompt('Leisure> ');
                    return rl.prompt();
                  });
                  return;
                } catch (_error) {
                  err = _error;
                  console.log("ERROR: " + err.stack);
                }
              }
              break;
            case ':h':
              help();
              break;
            default:
              if (line.match(/^!/)) {
                console.log(eval(line.substring(1)));
              } else if (multiline) {
                lines.push(line);
              } else {
                try {
                  evalInput(line, function(result) {
                    console.log(String(result));
                    return rl.prompt();
                  });
                  return;
                } catch (_error) {
                  err = _error;
                  console.log("ERROR: " + err.stack);
                }
              }
          }
          return rl.prompt();
        });
        return rl.on('close', function() {
          return process.exit(0);
        });
      });
    });
  };

  verbose = false;

  gennedAst = false;

  gennedJs = false;

  newOptions = true;

  action = null;

  outDir = null;

  recompiled = false;

  loadedParser = false;

  processedFiles = false;

  createAstFile = false;

  createJsFile = false;

  compile = function(file, cont) {
    var ext;

    ext = path.extname(file);
    return readFile(file, function(err, contents) {
      var asts, line, lines, names, outputFile, _i, _len, _ref3;

      if (!err) {
        lines = runMonad(L_linesForFile()(function() {
          return contents;
        }));
        names = runMonad(L_namesForLines()(function() {
          return lines;
        }));
        asts = [];
        _ref3 = lines.toArray();
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          line = _ref3[_i];
          asts.push(runMonad(L_runLine()(function() {
            return names;
          })(function() {
            return line;
          })));
        }
        if (createAstFile) {
          outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".ast";
          if (outDir) {
            outputFile = path.join(outDir, path.basename(outputFile));
          }
          if (verbose) {
            console.log("AST FILE: " + outputFile);
          }
          writeFile(outputFile, "[\n  " + (_(asts).map(function(item) {
            return JSON.stringify(ast2Json(item));
          }).join(',\n  ')) + "\n]", function(err) {
            if (!err) {
              return cont(asts);
            }
          });
        }
        if (createJsFile) {
          outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".js";
          if (outDir) {
            outputFile = path.join(outDir, path.basename(outputFile));
          }
          if (verbose) {
            console.log("JS FILE: " + outputFile);
          }
          return writeFile(outputFile, _(asts).map(function(item) {
            return "runMonad(" + (gen(item)) + ")";
          }).join(';\n') + ";\n", function(err) {
            if (!err) {
              return cont(asts);
            }
          });
        }
      }
    });
  };

  primCompile = function(file, cont) {
    var compileFile, ext, parseLine, _ref3;

    _ref3 = require(stages[stage]), parseLine = _ref3.parseLine, compileFile = _ref3.compileFile;
    ext = path.extname(file);
    return readFile(file, function(err, contents) {
      var compiled, outputFile;

      if (!err) {
        compiled = compileFile(contents, file);
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".js";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log("JS FILE: " + outputFile);
        }
        return writeFile(outputFile, compiled, function(err) {
          if (!err) {
            return cont(compiled);
          }
        });
      }
    });
  };

  genJsFromAst = function(file, cont) {
    return readFile(file, function(err, contents) {
      if (!err) {
        return genJs(_(JSON.parse(contents)).map(function(json) {
          return json2Ast(json);
        }), cont);
      }
    });
  };

  processArg = function(pos) {
    var actions;

    if (pos >= process.argv.length) {
      if (processedFiles) {
        process.exit(0);
      } else {
        repl();
        return;
      }
    }
    if (process.argv[pos][0] === '-' && !newOptions) {
      actions = [];
      newOptions = true;
      gennedAst = gennedJs = false;
    }
    switch (process.argv[pos]) {
      case '-v':
        verbose = true;
        break;
      case '-a':
        action = compile;
        createAstFile = true;
        break;
      case '-c':
        if (stage === 0) {
          action = primCompile;
          loadedParser = true;
        } else {
          action = compile;
          createAstFile = createJsFile = true;
        }
        break;
      case '-d':
        outDir = process.argv[pos + 1];
        pos++;
        break;
      case '-0':
        stage = 0;
        break;
      case '-1':
        stage = 1;
        break;
      case '-v':
        verbose = true;
        break;
      default:
        newOptions = true;
        if (process.argv[pos][0] === '-') {
          usage();
        } else {
          processedFiles = true;
          if (!loadedParser) {
            require(stages[stage]);
          }
          action(process.argv[pos], function() {
            return processArg(pos + 1);
          });
        }
        return;
    }
    return processArg(pos + 1);
  };

  run = function() {
    if (process.argv.length === 2) {
      require(stages[stage]);
      return repl();
    } else {
      return processArg(2);
    }
  };

  run();

}).call(this);

/*
//@ sourceMappingURL=repl.map
*/

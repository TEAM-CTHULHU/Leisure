// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var Nil, SourceNode, action, ast2Json, asyncMonad, compile, createAstFile, createJsFile, defaultEnv, diag, doRequirements, evalInput, fs, gen, genJsFromAst, genMap, genSource, gennedAst, gennedJs, getMonadSyncMode, getParseErr, getType, help, identity, interactive, interrupted, intersperse, isMonad, json2Ast, lazy, leisureCompleter, leisureFunctions, loadRequirements, loadedParser, lz, newOptions, newRunMonad, oldFunctionCount, outDir, path, primCompile, processArg, processedFiles, prog, prompt, promptText, readFile, readline, recompiled, repl, replEnv, replaceErr, requireList, resolve, rl, root, run, runFile, runMonad, rz, setDataType, setType, setWarnAsync, show, sourceNode, stage, stages, tokenString, updateCompleter, usage, verbose, withFile, writeFile, _, _ref, _ref1, _ref2, _ref3, _ref4;

  require('source-map-support').install();

  Error.stackTraceLimit = Infinity;

  _ref = root = module.exports = require('./base'), resolve = _ref.resolve, lazy = _ref.lazy;

  rz = resolve;

  lz = lazy;

  _ = require('./lodash.min');

  path = require('path');

  fs = require('fs');

  _ref1 = require('./ast'), getType = _ref1.getType, setType = _ref1.setType, setDataType = _ref1.setDataType, ast2Json = _ref1.ast2Json, json2Ast = _ref1.json2Ast, Nil = _ref1.Nil;

  _ref2 = require('./gen'), gen = _ref2.gen, genMap = _ref2.genMap, genSource = _ref2.genSource, withFile = _ref2.withFile, sourceNode = _ref2.sourceNode;

  SourceNode = require('source-map').SourceNode;

  _ref3 = require('./node'), readFile = _ref3.readFile, writeFile = _ref3.writeFile;

  _ref4 = require('./runtime'), identity = _ref4.identity, runMonad = _ref4.runMonad, newRunMonad = _ref4.newRunMonad, isMonad = _ref4.isMonad, asyncMonad = _ref4.asyncMonad, defaultEnv = _ref4.defaultEnv, replaceErr = _ref4.replaceErr, getMonadSyncMode = _ref4.getMonadSyncMode, setWarnAsync = _ref4.setWarnAsync;

  global.runMonad = runMonad;

  global.setType = setType;

  global.setDataType = setDataType;

  global.defaultEnv = defaultEnv;

  global.identity = identity;

  global.Leisure = root;

  stage = 2;

  stages = ['./simpleParseJS', './simpleParse', './generatedPrelude'];

  diag = false;

  readline = require('readline');

  replEnv = {
    prompt: function(msg, cont) {
      return rl.question(msg, function(x) {
        var err;

        try {
          return cont(x);
        } catch (_error) {
          err = _error;
          return console.log("ERROR HANDLING PROMPT: " + err.stack);
        }
      });
    }
  };

  replEnv.__proto__ = defaultEnv;

  getParseErr = function(x) {
    return x(lz(function(value) {
      return rz(value);
    }));
  };

  evalInput = function(text, cont) {
    var err, result, _ref5;

    if (text) {
      try {
        result = rz(L_newParseLine)(0)(lz(Nil))(lz(text));
        return runMonad(result, replEnv, function(ast) {
          var err, _ref5;

          try {
            if (getType(ast) === 'parseErr') {
              return cont("PARSE ERORR: " + (getParseErr(ast)));
            } else {
              if (diag) {
                if (typeof L_simplify !== "undefined" && L_simplify !== null) {
                  console.log("\nSIMPLIFIED: " + (runMonad(rz(L_simplify)(lz(text)))));
                }
                console.log("\nAST: " + ast);
                console.log("\nCODE: (" + (gen(ast)) + ")");
              }
              result = eval("(" + (genSource(text, ast)) + ")");
              if (isMonad(result)) {
                console.log("(processing IO monad)");
              }
              return runMonad(result, replEnv, cont);
            }
          } catch (_error) {
            err = _error;
            return cont(rz(L_err)(lz((_ref5 = err.stack) != null ? _ref5 : err.toString())));
          }
        });
      } catch (_error) {
        err = _error;
        return cont(rz(L_err)(lz((_ref5 = err.stack) != null ? _ref5 : err.toString())));
      }
    } else {
      return cont('');
    }
  };

  help = function() {
    return console.log("Welcome to the Leisure REPL!\n\nHere are the commands:\n:d -- toggle diagnostics\n:s expr -- simplify an expression\n:{ -- start multiline input\n:} -- end multiline input\n:h -- print this message\n! -- evaluate JavaScript expression (after the !)\nfuncs -- list all known functions (this is really just a monad)\n(anything else) -- evaluate Leisure code\n");
  };

  oldFunctionCount = 0;

  leisureFunctions = null;

  updateCompleter = function(rl) {
    if (root.functionCount !== oldFunctionCount) {
      oldFunctionCount = root.functionCount;
      return leisureFunctions = global.leisureFuncNames.toArray();
    }
  };

  tokenString = function(t) {
    return t(lz(function(txt) {
      return function(pos) {
        return rz(txt);
      };
    }));
  };

  rl = null;

  leisureCompleter = function(line) {
    var completions, last, newLast, origLast, tokens;

    tokens = rz(L_tokens)(lz(line))(lz(root.getValue('tokenPat'))).toArray();
    if (tokens.length > 0) {
      origLast = tokenString(tokens[tokens.length - 1]);
      last = origLast.toLowerCase();
      completions = _.filter(leisureFunctions, function(el) {
        return el.toLowerCase().indexOf(last) === 0;
      });
      if (completions.length === 1) {
        newLast = completions[0].substring(0, last.length);
        rl.line = line.substring(0, line.length - last.length) + newLast;
        return [completions, newLast];
      } else {
        return [
          _.filter(leisureFunctions, function(el) {
            return el.toLowerCase().indexOf(last) === 0;
          }), origLast
        ];
      }
    } else {
      return [[], line];
    }
  };

  interrupted = false;

  promptText = 'Leisure> ';

  prompt = function() {
    updateCompleter();
    rl.setPrompt(promptText);
    return rl.prompt();
  };

  show = function(obj) {
    if (typeof L_show !== "undefined" && L_show !== null) {
      return rz(L_show)(lz(obj));
    } else {
      return console.log(obj);
    }
  };

  repl = function(config) {
    var historyFile, leisureDir, lines;

    lines = null;
    leisureDir = path.join(config.home, '.leisure');
    historyFile = path.join(leisureDir, 'history');
    rl = readline.createInterface(process.stdin, process.stdout, leisureCompleter);
    return fs.exists(historyFile, function(exists) {
      return (function(cont) {
        if (exists) {
          return readFile(historyFile, function(err, contents) {
            if (!err) {
              rl.history = contents.trim().split('\n').reverse();
            }
            return cont();
          });
        } else {
          return fs.exists(leisureDir, function(exists) {
            if (exists) {
              return cont();
            } else {
              return fs.mkdir(leisureDir, function(err) {
                if (err) {
                  console.log("Could not create leisure dir!");
                  process.exit(1);
                }
                return cont();
              });
            }
          });
        }
      })(function() {
        var finishMultiline, multiline, startMultiline;

        help();
        multiline = false;
        prompt();
        root.defaultEnv.err = function(err) {
          var _ref5;

          console.log("REPL Error: " + ((_ref5 = err.stack) != null ? _ref5 : err));
          multiline = false;
          return prompt();
        };
        startMultiline = function() {
          if (multiline) {
            return console.log("Already reading multiline input");
          } else {
            multiline = true;
            lines = [];
            return rl.setPrompt('... ');
          }
        };
        finishMultiline = function(dumpInput) {
          var err, l, line;

          multiline = false;
          line = lines.join('\n');
          l = lines;
          lines = [];
          if (dumpInput) {
            return prompt();
          } else {
            try {
              if (line.substring(0, 2) === ':s') {
                if (typeof L_simplify !== "undefined" && L_simplify !== null) {
                  console.log("\n" + (show(runMonad(rz(L_simplify)(lz(line.substring(2)))))) + "\n");
                } else {
                  console.log("No simplify function.  Load std.lsr");
                }
              } else if (line.match(/^!/)) {
                console.log(eval(line.substring(1)));
              } else {
                evalInput(line, function(result) {
                  console.log("RESULT: " + show(result));
                  return prompt();
                });
                return;
              }
            } catch (_error) {
              err = _error;
              console.log("ERROR: " + err.stack);
            }
            return prompt();
          }
        };
        rl.on('line', function(line) {
          var m;

          interrupted = false;
          if (rl.history[0] === rl.history[1]) {
            rl.history.shift();
          } else if (line.trim()) {
            fs.appendFile(historyFile, "" + line + "\n", (function() {}));
          }
          switch (line.trim()) {
            case ':d':
              diag = !diag;
              return console.log("Diag: " + (diag ? 'on' : 'off'));
            case ':{':
              return startMultiline();
            case ':}':
              if (!multiline) {
                return console.log("Not reading multiline input.");
              } else {
                return finishMultiline();
              }
              break;
            case ':h':
              return help();
            default:
              if (m = line.match(/^:{(.*)$/)) {
                startMultiline();
                if (m[1]) {
                  return lines.push(m[1]);
                }
              } else if (multiline) {
                if (!line) {
                  return finishMultiline();
                } else {
                  return lines.push(line);
                }
              } else {
                lines = [line];
                return finishMultiline();
              }
          }
        });
        rl.on('close', function() {
          return process.exit(0);
        });
        return rl.on('SIGINT', function() {
          if (interrupted) {
            return process.exit();
          } else if (multiline) {
            return finishMultiline(true);
          } else {
            console.log("\n(^C again to quit)");
            return interrupted = true;
          }
        });
      });
    });
  };

  verbose = false;

  gennedAst = false;

  gennedJs = false;

  newOptions = true;

  action = null;

  outDir = null;

  recompiled = false;

  loadedParser = false;

  processedFiles = false;

  createAstFile = false;

  createJsFile = false;

  runFile = function(file, cont) {
    var err;

    try {
      return runMonad(rz(L_protect)(lz(rz(L_require)(lz(file)))), defaultEnv, function(result) {
        return cont([]);
      });
    } catch (_error) {
      err = _error;
      console.log("ERROR LOADING FILE: " + file + "...\n" + err.stack);
      return cont([]);
    }
  };

  compile = function(file, cont) {
    var ext;

    ext = path.extname(file);
    return runMonad(rz(L_baseLoad)(lz(file)), defaultEnv, function(result) {
      var asts, bareFile, bareJs, bareLsr, bareOutputMap, err, errors, outputFile, outputFileBase, outputMap, _i, _len;

      if (verbose) {
        console.log("Preparing to write code for " + file);
      }
      errors = [];
      asts = _.map(result.toArray(), function(lineData) {
        result = lineData.tail()(lz(function(x) {
          return rz(x);
        }))(lz(function(x) {
          return rz(x);
        }));
        if (result instanceof Error) {
          result = replaceErr(result, "Error compiling line: " + (lines.head()) + "...\n" + ast.message);
          errors.push[result];
        }
        return lineData.head();
      });
      if (errors.length) {
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          err = errors[_i];
          console.log(err.stack);
        }
        return;
      }
      if (createAstFile) {
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".ast";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log("AST FILE: " + outputFile);
        }
        writeFile(outputFile, "[\n  " + (_(asts).map(function(item) {
          return JSON.stringify(ast2Json(item));
        }).join(',\n  ')) + "\n]", function(err) {
          if (err) {
            console.log("Error writing AST file: " + outputFile);
            return cont(replaceErr(err, "Error writing AST file: " + outputFile + "...\n" + err.message));
          } else if (!createJsFile) {
            return cont(asts);
          }
        });
      }
      if (createJsFile) {
        outputFileBase = (ext === file ? file : file.substring(0, file.length - ext.length));
        outputFile = outputFileBase + ".js";
        outputMap = outputFileBase + ".map";
        bareFile = outputFileBase.replace(/^.*\/([^/]*$)/, '$1');
        bareJs = bareFile + ".js";
        bareLsr = bareFile + ".lsr";
        bareOutputMap = bareFile + ".map";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
          outputMap = path.join(outDir, path.basename(outputMap));
        }
        if (verbose) {
          console.log("JS FILE: " + outputFile);
        }
        result = withFile(path.basename(bareLsr), null, function() {
          return (new SourceNode(1, 0, bareLsr, [
            "module.exports = L_runMonads([\n  ", intersperse(_(asts).map(function(item) {
              return sourceNode(item, "function(){return ", genMap(item), "}");
            }), ',\n '), "]);\n"
          ])).toStringWithSourceMap({
            file: path.basename(bareJs)
          });
        });
        if (verbose) {
          console.log("FILE: " + outputFile + ", MAP: " + outputMap);
        }
        return writeFile(outputFile, result.code + ("\n//# sourceMappingURL=" + (path.basename(bareOutputMap)) + "\n"), function(err) {
          if (!err) {
            return writeFile(outputMap, JSON.stringify(result.map, null, "  "), function(err) {
              if (!err) {
                return cont(asts);
              } else {
                console.log("Error writing map file: " + outputMap);
                return cont(replaceErr(err, "Error writing map file: " + outputMap + "...\n" + err.message));
              }
            });
          } else {
            console.log("Error writing JS file: " + outputFile);
            return cont(replaceErr(err, "Error writing JS file: " + outputFile + "...\n" + err.message));
          }
        });
      } else {
        return cont([]);
      }
    });
  };

  intersperse = function(array, element) {
    var i, result, _i, _len;

    if (array.length < 2) {
      return array;
    } else {
      result = [array[0]];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        i = array[_i];
        result.push(element, i);
      }
      return result;
    }
  };

  primCompile = function(file, cont) {
    var compileFile, ext, parseLine, _ref5;

    _ref5 = require(stages[stage]), parseLine = _ref5.parseLine, compileFile = _ref5.compileFile;
    ext = path.extname(file);
    return readFile(file, function(err, contents) {
      var compiled, outputFile;

      if (!err) {
        compiled = compileFile(contents, file);
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".js";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log("JS FILE: " + outputFile);
        }
        return writeFile(outputFile, compiled, function(err) {
          if (!err) {
            return cont(compiled);
          }
        });
      }
    });
  };

  genJsFromAst = function(file, cont) {
    return readFile(file, function(err, contents) {
      if (!err) {
        return genJs(_(JSON.parse(contents)).map(function(json) {
          return json2Ast(json);
        }), cont);
      }
    });
  };

  usage = function() {
    console.log("Usage repl [-v | -a | -0 | -1 | -c | -d DIR] [FILE ...]\n\n-v            verbose\n-a            only parse to AST\n-0            use CoffeeScript parser\n-1            use simple Leisure parser\n-c            for -0, compile to JS using CoffeeScript compiler\n              for -1, or normal case, create AST and JS file\n-r FILE       require JS FILE\n-d DIR        specify output directory for .ast and .js files\n\nWithout no FILE arguments, runs interactive REPL");
    return process.exit(0);
  };

  interactive = false;

  requireList = [];

  doRequirements = function(cont) {
    if (verbose) {
      console.log("DO REQUIREMENTS.  loaded: " + loadedParser);
    }
    if (!loadedParser) {
      require(stages[stage]);
      loadedParser = true;
      if (stage === 1) {
        root.lockGen = false;
      }
    }
    return loadRequirements(requireList, cont);
  };

  loadRequirements = function(req, cont) {
    var contStack;

    if (req.length) {
      if (verbose) {
        console.log("LOADING REQUIREMENT: " + req[0]);
      }
      contStack = require(req.shift());
      if (Array.isArray(contStack) && contStack.length) {
        return contStack.unshift(function() {
          return loadRequirements(req, cont);
        });
      } else {
        return loadRequirements(req, cont);
      }
    } else {
      return cont();
    }
  };

  processArg = function(config, pos) {
    var actions;

    if (pos >= process.argv.length) {
      if (processedFiles && !interactive) {
        process.exit(0);
      } else {
        if (verbose) {
          console.log("STARTING REPL");
        }
        doRequirements(function() {
          return repl(config);
        });
        return;
      }
    }
    if (process.argv[pos][0] === '-' && !newOptions) {
      actions = [];
      newOptions = true;
      gennedAst = gennedJs = false;
    }
    switch (process.argv[pos]) {
      case '-p':
        promptText = process.argv[pos + 1];
        pos++;
        break;
      case '-v':
        verbose = true;
        global.verbose.gen = true;
        setWarnAsync(true);
        break;
      case '-a':
        action = compile;
        createAstFile = true;
        break;
      case '-c':
        if (stage === 0) {
          action = primCompile;
          loadedParser = true;
        } else {
          action = compile;
          createAstFile = createJsFile = true;
        }
        break;
      case '-d':
        outDir = process.argv[pos + 1];
        pos++;
        break;
      case '-0':
        stage = 0;
        root.lockGen = true;
        break;
      case '-1':
        stage = 1;
        root.lockGen = true;
        break;
      case '-i':
        interactive = true;
        break;
      case '-r':
        if (verbose) {
          console.log("PUSHING REQUIREMENT: " + process.argv[pos + 1]);
        }
        requireList.push(process.argv[pos + 1]);
        pos++;
        break;
      default:
        newOptions = true;
        if (process.argv[pos][0] === '-') {
          usage();
        } else {
          processedFiles = true;
          doRequirements(function() {
            return action(process.argv[pos], function() {
              return processArg(config, pos + 1);
            });
          });
        }
        return;
    }
    return processArg(config, pos + 1);
  };

  run = function(args, config) {
    action = runFile;
    if (args.length === 2) {
      require(stages[stage]);
      return repl(config);
    } else {
      return processArg(config, 2);
    }
  };

  root.runFile = runFile;

  if (verbose) {
    console.log("ARGS: " + (JSON.stringify(process.argv)));
  }

  prog = path.basename(process.argv[1]);

  if (prog === 'repl' || prog === 'leisure') {
    if (verbose) {
      console.log("RUNNING REPL");
    }
    run(process.argv, {
      home: process.env.HOME
    });
  } else {
    require(stages[stage]);
  }

}).call(this);

/*
//@ sourceMappingURL=repl.map
*/

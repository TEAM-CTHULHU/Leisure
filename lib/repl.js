// Generated by CoffeeScript 1.6.2
(function() {
  var action, ast2Json, compileFile, defaultEnv, diag, evalInput, gen, genAst, genJs, genJsFromAst, gennedAst, gennedJs, help, identity, json2Ast, monad, newOptions, outDir, parseLine, path, processArg, processedFiles, readFile, readline, recompileParser, repl, root, run, runMonad, setDataType, setType, verbose, writeFile, _, _ref, _ref1, _ref2, _ref3;

  root = module.exports = require('./base');

  _ = require('./lodash.min');

  path = require('path');

  _ref = require('./ast'), setType = _ref.setType, setDataType = _ref.setDataType, ast2Json = _ref.ast2Json, json2Ast = _ref.json2Ast;

  gen = require('./gen').gen;

  _ref1 = require('./base'), readFile = _ref1.readFile, writeFile = _ref1.writeFile;

  _ref2 = require('./simpleParseJS'), parseLine = _ref2.parseLine, compileFile = _ref2.compileFile;

  _ref3 = require('./runtime'), identity = _ref3.identity, runMonad = _ref3.runMonad, defaultEnv = _ref3.defaultEnv;

  diag = false;

  readline = require('readline');

  evalInput = function(text) {
    var result;

    if (text) {
      if (diag) {
        console.log("Eval: (" + (gen(monad(L_parseLineM()(function() {
          return text;
        })))) + ")");
      }
      result = eval("(" + (gen(monad(L_parseLineM()(function() {
        return text;
      })))) + ")");
      if (result.cmd) {
        return console.log(monad(result));
      } else {
        return console.log(result);
      }
    }
  };

  monad = function(m) {
    return runMonad(m, defaultEnv, function(x) {
      return x;
    });
  };

  help = function() {
    return console.log("Welcome to the Leisure REPL!\n\nHere are the commands:\n:d -- toggle diagnostics\n:{ -- start multiline input\n:} -- end multiline input\n:h -- print this message\nfuncs -- list all known functions\n* -- evaluate Leisure code");
  };

  repl = function() {
    var lines, multiline, rl;

    help();
    lines = null;
    rl = readline.createInterface(process.stdin, process.stdout);
    multiline = false;
    rl.setPrompt('Leisure> ');
    rl.prompt();
    rl.on('line', function(line) {
      switch (line.trim()) {
        case ':d':
          diag = !diag;
          console.log("Diag: " + (diag ? 'on' : 'off'));
          break;
        case ':{':
          if (multiline) {
            console.log("Already reading multiline input");
          } else {
            multiline = true;
            lines = [];
            rl.setPrompt('Leisure {> ');
          }
          break;
        case ':}':
          if (!multiline) {
            console.log("Not reading multiline input.");
          } else {
            evalInput(lines.join('\n'));
            lines = [];
            rl.setPrompt('Leisure> ');
          }
          break;
        case ':h':
          help();
          break;
        default:
          if (multiline) {
            lines.push(line);
          } else {
            evalInput(line);
          }
      }
      return rl.prompt();
    });
    return rl.on('close', function() {
      return process.exit(0);
    });
  };

  verbose = false;

  gennedAst = false;

  gennedJs = false;

  newOptions = true;

  action = null;

  outDir = null;

  recompileParser = false;

  processedFiles = false;

  genAst = function(file, cont) {
    var ext, outputFile;

    ext = path.extname(file);
    outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".ast";
    if (outDir) {
      outputFile = path.join(outDir, path.basename(outputFile));
    }
    console.log("OUTPUT FILE: " + outputFile);
    return readFile(file, function(err, contents) {
      var asts;

      if (!err) {
        asts = monad(L_parseFile()(function() {
          return contents;
        })).toArray();
        return writeFile(outputFile, "[\n  " + (_(asts).map(function(item) {
          return JSON.stringify(ast2Json(item));
        }).join(',\n  ')) + "\n]", function(err) {
          if (!err) {
            return cont(asts);
          }
        });
      }
    });
  };

  genJs = function(file, asts, cont) {
    var ext, outputFile;

    ext = path.extname(file);
    outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".js";
    if (outDir) {
      outputFile = path.join(outDir, path.basename(outputFile));
    }
    return writeFile(outputFile, _(asts).map(function(ast) {
      return "runMonad(" + (gen(ast)) + ");";
    }).join('\n', function(err) {
      if (!err) {
        return cont(asts);
      }
    }));
  };

  genJsFromAst = function(file, cont) {
    return readFile(file, function(err, contents) {
      if (!err) {
        return genJs(_(JSON.parse(contents)).map(function(json) {
          return json2Ast(json);
        }), cont);
      }
    });
  };

  processArg = function(pos) {
    var actions;

    console.log("Process Arg: " + (process.argv.join(', ')) + ", pos: " + pos);
    if (pos >= process.argv.length) {
      if (processedFiles) {
        process.exit(1);
      } else {
        repl();
        return;
      }
    }
    if (process.argv[pos][0] === '-' && !newOptions) {
      actions = [];
      newOptions = true;
      gennedAst = gennedJs = false;
    }
    switch (process.argv[pos]) {
      case '-v':
        verbose = true;
        break;
      case '-a':
        action = genAst;
        gennedAst = true;
        break;
      case '-c':
        if (!gennedAst) {
          action = function(file, cont) {
            return genAst(file, function(asts) {
              return genJs(file, asts, cont);
            });
          };
        } else {
          action = genJsFromAst;
        }
        gennedJs = gennedAst = true;
        break;
      case '-d':
        outDir = process.argv[pos + 1];
        pos++;
        break;
      case '-p':
        readFile('core/simpleParse.lsr', function(err, code) {
          var js;

          js = compileFile(code, "simpleParse.js");
          if (err) {
            throw new Error(err);
          } else {
            return writeFile('/tmp/simpleParse.js', js, function(err) {
              eval(js);
              if (process.argv.length === 2) {
                return repl();
              } else {
                return processArg(pos + 1);
              }
            });
          }
        });
        return;
      default:
        newOptions = true;
        console.log("Process " + (process.argv.join(', ')));
        if (process.argv[pos][0] === '-') {
          usage();
        } else {
          processedFiles = true;
          action(process.argv[pos], function() {
            return processArg(pos + 1);
          });
        }
        return;
    }
    return processArg(pos + 1);
  };

  run = function() {
    console.log("Run: " + (process.argv.join(', ')));
    if (process.argv.length === 2) {
      global.runMonad = runMonad;
      global.setType = setType;
      global.setDataType = setDataType;
      require('./simpleParse');
      return repl();
    } else {
      return processArg(2);
    }
  };

  run();

}).call(this);

/*
//@ sourceMappingURL=repl.map
*/

// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var Nil, action, ast2Json, asyncMonad, compile, createAstFile, createJsFile, defaultEnv, diag, evalInput, fs, gen, genJsFromAst, gennedAst, gennedJs, getMonadSyncMode, help, identity, interrupted, isMonad, json2Ast, leisureCompleter, leisureFunctions, loadedParser, newOptions, oldFunctionCount, outDir, path, primCompile, processArg, processedFiles, readFile, readline, recompiled, repl, replEnv, replaceErr, rl, root, run, runMonad, setDataType, setType, setWarnAsync, stage, stages, tokenString, updateCompleter, usage, verbose, writeFile, _, _ref, _ref1, _ref2;

  require('source-map-support').install();

  Error.stackTraceLimit = 50;

  root = module.exports = require('./base');

  _ = require('./lodash.min');

  path = require('path');

  fs = require('fs');

  _ref = require('./ast'), setType = _ref.setType, setDataType = _ref.setDataType, ast2Json = _ref.ast2Json, json2Ast = _ref.json2Ast, Nil = _ref.Nil;

  gen = require('./gen').gen;

  _ref1 = require('./base'), readFile = _ref1.readFile, writeFile = _ref1.writeFile;

  _ref2 = require('./runtime'), identity = _ref2.identity, runMonad = _ref2.runMonad, isMonad = _ref2.isMonad, asyncMonad = _ref2.asyncMonad, defaultEnv = _ref2.defaultEnv, replaceErr = _ref2.replaceErr, getMonadSyncMode = _ref2.getMonadSyncMode, setWarnAsync = _ref2.setWarnAsync;

  global.runMonad = runMonad;

  global.setType = setType;

  global.setDataType = setDataType;

  global.defaultEnv = defaultEnv;

  global.identity = identity;

  stage = 2;

  stages = ['./simpleParseJS', './simpleParse', './generatedPrelude'];

  diag = false;

  readline = require('readline');

  replEnv = {
    prompt: function(msg, cont) {
      return rl.question(msg, function(x) {
        var err;

        try {
          return cont(x);
        } catch (_error) {
          err = _error;
          return console.log("ERROR HANDLING PROMPT: " + err.stack);
        }
      });
    }
  };

  replEnv.__proto__ = defaultEnv;

  evalInput = function(text, cont) {
    var err, result;

    if (text) {
      try {
        result = L_newParseLine()(function() {
          return Nil;
        })(function() {
          return text;
        });
        return runMonad(result, replEnv, function(ast) {
          var err;

          try {
            if (diag) {
              if (typeof L_simplify !== "undefined" && L_simplify !== null) {
                console.log("\nSIMPLIFIED: " + (runMonad(L_simplify()(function() {
                  return text;
                }))));
              }
              console.log("\nAST: " + ast);
              console.log("\nCODE: (" + (gen(ast)) + ")");
            }
            result = eval("(" + (gen(ast)) + ")");
            if (isMonad(result)) {
              console.log("(processing IO monad)");
            }
            return runMonad(result, replEnv, cont);
          } catch (_error) {
            err = _error;
            return cont(err.stack);
          }
        });
      } catch (_error) {
        err = _error;
        return cont(err.stack);
      }
    } else {
      return cont('');
    }
  };

  help = function() {
    return console.log("Welcome to the Leisure REPL!\n\nHere are the commands:\n:d -- toggle diagnostics\n:s expr -- simplify an expression\n:{ -- start multiline input\n:} -- end multiline input\n:h -- print this message\n! -- evaluate JavaScript expression (after the !)\nfuncs -- list all known functions (this is really just a monad)\n(anything else) -- evaluate Leisure code\n");
  };

  oldFunctionCount = 0;

  leisureFunctions = null;

  updateCompleter = function(rl) {
    if (root.functionCount !== oldFunctionCount) {
      oldFunctionCount = root.functionCount;
      return leisureFunctions = global.leisureFuncNames.toArray();
    }
  };

  tokenString = function(t) {
    return t(function() {
      return function(txt) {
        return function(pos) {
          return txt();
        };
      };
    });
  };

  rl = null;

  leisureCompleter = function(line) {
    var completions, last, newLast, origLast, tokens;

    tokens = L_tokens()(function() {
      return line;
    })(function() {
      return root.getValue('tokenPat');
    }).toArray();
    if (tokens.length > 0) {
      origLast = tokenString(tokens[tokens.length - 1]);
      last = origLast.toLowerCase();
      completions = _.filter(leisureFunctions, function(el) {
        return el.toLowerCase().indexOf(last) === 0;
      });
      if (completions.length === 1) {
        newLast = completions[0].substring(0, last.length);
        rl.line = line.substring(0, line.length - last.length) + newLast;
        return [completions, newLast];
      } else {
        return [
          _.filter(leisureFunctions, function(el) {
            return el.toLowerCase().indexOf(last) === 0;
          }), origLast
        ];
      }
    } else {
      return [[], line];
    }
  };

  interrupted = false;

  repl = function() {
    var historyFile, leisureDir, lines;

    lines = null;
    leisureDir = path.join(process.env.HOME, '.leisure');
    historyFile = path.join(leisureDir, 'history');
    rl = readline.createInterface(process.stdin, process.stdout, leisureCompleter);
    updateCompleter();
    return fs.exists(historyFile, function(exists) {
      return (function(cont) {
        if (exists) {
          return readFile(historyFile, function(err, contents) {
            if (!err) {
              rl.history = contents.trim().split('\n').reverse();
            }
            return cont();
          });
        } else {
          return fs.exists(leisureDir, function(exists) {
            if (exists) {
              return cont();
            } else {
              return fs.mkdir(leisureDir, function(err) {
                if (err) {
                  console.log("Could not create leisure dir!");
                  process.exit(1);
                }
                return cont();
              });
            }
          });
        }
      })(function() {
        var finishMultiline, multiline, startMultiline;

        help();
        multiline = false;
        rl.setPrompt('Leisure> ');
        rl.prompt();
        root.defaultEnv.err = function(err) {
          var _ref3;

          console.log("Error: " + ((_ref3 = err.stack) != null ? _ref3 : err));
          multiline = false;
          rl.setPrompt('Leisure> ');
          return rl.prompt();
        };
        startMultiline = function() {
          if (multiline) {
            return console.log("Already reading multiline input");
          } else {
            multiline = true;
            lines = [];
            return rl.setPrompt('... ');
          }
        };
        finishMultiline = function(dumpInput) {
          var err, l, line;

          multiline = false;
          line = lines.join('\n');
          l = lines;
          lines = [];
          if (dumpInput) {
            rl.setPrompt('Leisure> ');
            return rl.prompt();
          } else {
            try {
              if (line.substring(0, 2) === ':s') {
                if (typeof L_simplify !== "undefined" && L_simplify !== null) {
                  console.log("\n" + (runMonad(L_simplify()(function() {
                    return line.substring(2);
                  }))) + "\n");
                } else {
                  console.log("No simplify function.  Load std.lsr");
                }
              } else if (line.match(/^!/)) {
                console.log(eval(line.substring(1)));
              } else {
                console.log("EVAL: " + (JSON.stringify(line)));
                evalInput(line, function(result) {
                  console.log(String(result));
                  rl.setPrompt('Leisure> ');
                  return rl.prompt();
                });
                return;
              }
            } catch (_error) {
              err = _error;
              console.log("ERROR: " + err.stack);
            }
            rl.setPrompt('Leisure> ');
            return rl.prompt();
          }
        };
        rl.on('line', function(line) {
          var m;

          interrupted = false;
          if (rl.history[0] === rl.history[1]) {
            rl.history.shift();
          } else if (line.trim()) {
            fs.appendFile(historyFile, "" + line + "\n", (function() {}));
          }
          switch (line.trim()) {
            case ':d':
              diag = !diag;
              console.log("Diag: " + (diag ? 'on' : 'off'));
              break;
            case ':{':
              startMultiline();
              break;
            case ':}':
              if (!multiline) {
                console.log("Not reading multiline input.");
              } else {
                finishMultiline();
              }
              break;
            case ':h':
              help();
              break;
            default:
              if (m = line.match(/^:{(.*)$/)) {
                startMultiline();
                if (m[1]) {
                  lines.push(m[1]);
                }
              } else if (multiline) {
                if (!line) {
                  finishMultiline();
                } else {
                  lines.push(line);
                }
              } else {
                lines = [line];
                finishMultiline();
              }
          }
          return rl.prompt();
        });
        rl.on('close', function() {
          return process.exit(0);
        });
        return rl.on('SIGINT', function() {
          if (interrupted) {
            return rl.pause();
          } else if (multiline) {
            return finishMultiline(true);
          } else {
            console.log("\n(^C again to quit)");
            return interrupted = true;
          }
        });
      });
    });
  };

  verbose = false;

  gennedAst = false;

  gennedJs = false;

  newOptions = true;

  action = null;

  outDir = null;

  recompiled = false;

  loadedParser = false;

  processedFiles = false;

  createAstFile = false;

  createJsFile = false;

  compile = function(file, cont) {
    var ext;

    ext = path.extname(file);
    return runMonad(L_baseLoad()(function() {
      return file;
    }), defaultEnv, function(result) {
      var asts, err, errors, outputFile, _i, _len;

      if (verbose) {
        console.log("Preparing to write code for " + file);
      }
      errors = [];
      asts = _.map(result.toArray(), function(lineData) {
        result = lineData.tail()(function() {
          return function(x) {
            return x();
          };
        })(function() {
          return function(x) {
            return x();
          };
        });
        if (result instanceof Error) {
          result = replaceErr(result, "Error compiling line: " + (lines.head()) + "...\n" + ast.message);
          errors.push[result];
        }
        return lineData.head();
      });
      if (errors.length) {
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          err = errors[_i];
          console.log(err.stack);
        }
        return;
      }
      if (createAstFile) {
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".ast";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log("AST FILE: " + outputFile);
        }
        writeFile(outputFile, "[\n  " + (_(asts).map(function(item) {
          return JSON.stringify(ast2Json(item));
        }).join(',\n  ')) + "\n]", function(err) {
          if (err) {
            console.log("Error writing AST file: " + outputFile);
            return cont(replaceErr(err, "Error writing AST file: " + outputFile + "...\n" + err.message));
          } else if (!createJsFile) {
            return cont(asts);
          }
        });
      }
      if (createJsFile) {
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".js";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log("JS FILE: " + outputFile);
        }
        return writeFile(outputFile, "L_runMonads([\n  " + _(asts).map(function(item) {
          return "function(){return " + (gen(item)) + "}";
        }).join(',\n  ') + "]);\n", function(err) {
          if (!err) {
            return cont(asts);
          } else {
            console.log("Error writing JS file: " + outputFile);
            return cont(replaceErr(err, "Error writing JS file: " + outputFile + "...\n" + err.message));
          }
        });
      } else {
        return cont([]);
      }
    });
  };

  primCompile = function(file, cont) {
    var compileFile, ext, parseLine, _ref3;

    _ref3 = require(stages[stage]), parseLine = _ref3.parseLine, compileFile = _ref3.compileFile;
    ext = path.extname(file);
    return readFile(file, function(err, contents) {
      var compiled, outputFile;

      if (!err) {
        compiled = compileFile(contents, file);
        outputFile = (ext === file ? file : file.substring(0, file.length - ext.length)) + ".js";
        if (outDir) {
          outputFile = path.join(outDir, path.basename(outputFile));
        }
        if (verbose) {
          console.log("JS FILE: " + outputFile);
        }
        return writeFile(outputFile, compiled, function(err) {
          if (!err) {
            return cont(compiled);
          }
        });
      }
    });
  };

  genJsFromAst = function(file, cont) {
    return readFile(file, function(err, contents) {
      if (!err) {
        return genJs(_(JSON.parse(contents)).map(function(json) {
          return json2Ast(json);
        }), cont);
      }
    });
  };

  usage = function() {
    console.log("Usage repl [-v | -a | -0 | -1 | -c | -d DIR] [FILE ...]\n\n-v            verbose\n-a            only parse to AST\n-0            use CoffeeScript parser\n-1            use simple Leisure parser\n-c            for -0, compile to JS using CoffeeScript compiler\n              for -1, or normal case, create AST and JS file\n-d DIR        specify output directory for .ast and .js files\n\nWithout no FILE arguments, runs interactive REPL");
    return process.exit(0);
  };

  processArg = function(pos) {
    var actions;

    if (pos >= process.argv.length) {
      if (processedFiles) {
        process.exit(0);
      } else {
        repl();
        return;
      }
    }
    if (process.argv[pos][0] === '-' && !newOptions) {
      actions = [];
      newOptions = true;
      gennedAst = gennedJs = false;
    }
    switch (process.argv[pos]) {
      case '-v':
        verbose = true;
        setWarnAsync(true);
        break;
      case '-a':
        action = compile;
        createAstFile = true;
        break;
      case '-c':
        if (stage === 0) {
          action = primCompile;
          loadedParser = true;
        } else {
          action = compile;
          createAstFile = createJsFile = true;
        }
        break;
      case '-d':
        outDir = process.argv[pos + 1];
        pos++;
        break;
      case '-0':
        stage = 0;
        break;
      case '-1':
        stage = 1;
        break;
      default:
        newOptions = true;
        if (process.argv[pos][0] === '-') {
          usage();
        } else {
          processedFiles = true;
          if (!loadedParser) {
            require(stages[stage]);
          }
          action(process.argv[pos], function() {
            return processArg(pos + 1);
          });
        }
        return;
    }
    return processArg(pos + 1);
  };

  run = function() {
    if (process.argv.length === 2) {
      require(stages[stage]);
      return repl();
    } else {
      return processArg(2);
    }
  };

  run();

}).call(this);

/*
//@ sourceMappingURL=repl.map
*/

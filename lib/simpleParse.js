require('source-map-support').install();
runMonad(resolve(L_define)(lazy("true"))(lazy(0))(lazy("true = \\a b . a"))(lazy(setDataType(setType(function(L_a){return function(L_b){return resolve(L_a)}}, 'true'), 'true'))));
runMonad(resolve(L_define)(lazy("false"))(lazy(0))(lazy("false = \\a b . b"))(lazy(setDataType(setType(function(L_a){return function(L_b){return resolve(L_b)}}, 'false'), 'false'))));
runMonad(resolve(L_define)(lazy("not"))(lazy(1))(lazy("not b = b false true"))(lazy(function(L_b){return resolve(L_b)(L_false)(L_true)})));
runMonad(resolve(L_define)(lazy("and"))(lazy(2))(lazy("and a b = a b false"))(lazy(function(L_a){return function(L_b){return resolve(L_a)(L_b)(L_false)}})));
runMonad(resolve(L_define)(lazy("or"))(lazy(2))(lazy("or a b = a true b"))(lazy(function(L_a){return function(L_b){return resolve(L_a)(L_true)(L_b)}})));
runMonad(resolve(L_define)(lazy("some"))(lazy(1))(lazy("some x = \\someCase noneCase . someCase x"))(lazy(setDataType(function(L_x){return setType(function(L_someCase){return function(L_noneCase){return resolve(L_someCase)(L_x)}}, 'some')}, 'some'))));
runMonad(resolve(L_define)(lazy("some2"))(lazy(2))(lazy("some2 a b = \\someCase noneCase . someCase a b"))(lazy(setDataType(function(L_a){return function(L_b){return setType(function(L_someCase){return function(L_noneCase){return resolve(L_someCase)(L_a)(L_b)}}, 'some2')}}, 'some2'))));
runMonad(resolve(L_define)(lazy("none"))(lazy(0))(lazy("none = \\someCase noneCase . noneCase"))(lazy(setDataType(setType(function(L_someCase){return function(L_noneCase){return resolve(L_noneCase)}}, 'none'), 'none'))));
runMonad(resolve(L_define)(lazy("isNone"))(lazy(1))(lazy("isNone obj = hasType obj none"))(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_none)})));
runMonad(resolve(L_define)(lazy("isSome"))(lazy(1))(lazy("isSome obj = hasType obj some"))(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_some)})));
runMonad(resolve(L_define)(lazy("isSome2"))(lazy(1))(lazy("isSome2 obj = hasType obj some2"))(lazy(function(L_obj){return resolve(L_hasType)(L_obj)(L_some2)})));
runMonad(resolve(L_define)(lazy("neq"))(lazy(2))(lazy("neq a b = not (eq a b)"))(lazy(function(L_a){return function(L_b){return resolve(L_not)(function(){return resolve(L_eq)(L_a)(L_b)})}})));
runMonad(resolve(L_define)(lazy("left"))(lazy(1))(lazy("left x = \\lCase rCase . lCase x"))(lazy(setDataType(function(L_x){return setType(function(L_lCase){return function(L_rCase){return resolve(L_lCase)(L_x)}}, 'left')}, 'left'))));
runMonad(resolve(L_define)(lazy("right"))(lazy(1))(lazy("right x = \\lCase rCase . rCase x"))(lazy(setDataType(function(L_x){return setType(function(L_lCase){return function(L_rCase){return resolve(L_rCase)(L_x)}}, 'right')}, 'right'))));
runMonad(resolve(L_define)(lazy("strAsc"))(lazy(1))(lazy("strAsc string = _strAsc (assertType 'strAsc string' '*string' string)"))(lazy(function(L_string){return resolve(L__strAsc)(function(){return resolve(L_assertType)(lazy("strAsc string"))(lazy("*string"))(L_string)})})));
runMonad(resolve(L_define)(lazy("strChr"))(lazy(1))(lazy("strChr ascii = _strChr (assertType 'strChr string' '*number' ascii)"))(lazy(function(L_ascii){return resolve(L__strChr)(function(){return resolve(L_assertType)(lazy("strChr string"))(lazy("*number"))(L_ascii)})})));
runMonad(resolve(L_define)(lazy("strAt"))(lazy(2))(lazy("strAt string index = _strAt\n  assertType 'strAt string' '*string' string\n  assertType 'strAt index' '*number' index"))(lazy(function(L_string){return function(L_index){return resolve(L__strAt)(function(){return resolve(L_assertType)(lazy("strAt string"))(lazy("*string"))(L_string)})(function(){return resolve(L_assertType)(lazy("strAt index"))(lazy("*number"))(L_index)})}})));
runMonad(resolve(L_define)(lazy("strStartsWith"))(lazy(2))(lazy("strStartsWith string prefix = _strStartsWith\n  assertType 'strStartsWith string' '*string' string\n  assertType 'strStartsWith prefix' '*string' prefix"))(lazy(function(L_string){return function(L_prefix){return resolve(L__strStartsWith)(function(){return resolve(L_assertType)(lazy("strStartsWith string"))(lazy("*string"))(L_string)})(function(){return resolve(L_assertType)(lazy("strStartsWith prefix"))(lazy("*string"))(L_prefix)})}})));
runMonad(resolve(L_define)(lazy("strLen"))(lazy(1))(lazy("strLen string = _strLen (assertType 'strLen string' '*string' string)"))(lazy(function(L_string){return resolve(L__strLen)(function(){return resolve(L_assertType)(lazy("strLen string"))(lazy("*string"))(L_string)})})));
runMonad(resolve(L_define)(lazy("strToLowerCase"))(lazy(1))(lazy("strToLowerCase string = _strToLowerCase (assertType 'strToLowerCase string' '*string' string)"))(lazy(function(L_string){return resolve(L__strToLowerCase)(function(){return resolve(L_assertType)(lazy("strToLowerCase string"))(lazy("*string"))(L_string)})})));
runMonad(resolve(L_define)(lazy("strToUpperCase"))(lazy(1))(lazy("strToUpperCase string = _strToUpperCase (assertType 'strToUpperCase string' '*string' string)"))(lazy(function(L_string){return resolve(L__strToUpperCase)(function(){return resolve(L_assertType)(lazy("strToUpperCase string"))(lazy("*string"))(L_string)})})));
runMonad(resolve(L_define)(lazy("strReplace"))(lazy(3))(lazy("strReplace string pat repl = _strReplace\n  assertType 'strReplace string' '*string' string\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strStartsWith pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat\n  assertType 'strReplace repl' '*string' repl"))(lazy(function(L_string){return function(L_pat){return function(L_repl){return resolve(L__strReplace)(function(){return resolve(L_assertType)(lazy("strReplace string"))(lazy("*string"))(L_string)})(function(){return resolve(L_assert)(function(){return resolve(L_or)(function(){return resolve(L_hasType)(L_pat)(lazy("*string"))})(function(){return resolve(L_hasType)(L_pat)(lazy("*RegExp"))})})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("strStartsWith pat should be type string or RegExp but it is type "))(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_pat)})(function(){return resolve(L_cons)(lazy(": "))(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_pat)})(L_nil)})})})})})(L_pat)})(function(){return resolve(L_assertType)(lazy("strReplace repl"))(lazy("*string"))(L_repl)})}}})));
runMonad(resolve(L_define)(lazy("strSubstring"))(lazy(3))(lazy("strSubstring str start end = _strSubstring\n  assertType 'strSubstring str' '*string' str\n  assertType 'strSubstring start' '*number' start\n  assertType 'strSubstring end' '*number' end"))(lazy(function(L_str){return function(L_start){return function(L_end){return resolve(L__strSubstring)(function(){return resolve(L_assertType)(lazy("strSubstring str"))(lazy("*string"))(L_str)})(function(){return resolve(L_assertType)(lazy("strSubstring start"))(lazy("*number"))(L_start)})(function(){return resolve(L_assertType)(lazy("strSubstring end"))(lazy("*number"))(L_end)})}}})));
runMonad(resolve(L_define)(lazy("strSplit"))(lazy(2))(lazy("strSplit str pat = _strSplit\n  assertType 'strSplit str' '*string' str\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strSplit pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat"))(lazy(function(L_str){return function(L_pat){return resolve(L__strSplit)(function(){return resolve(L_assertType)(lazy("strSplit str"))(lazy("*string"))(L_str)})(function(){return resolve(L_assert)(function(){return resolve(L_or)(function(){return resolve(L_hasType)(L_pat)(lazy("*string"))})(function(){return resolve(L_hasType)(L_pat)(lazy("*RegExp"))})})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("strSplit pat should be type string or RegExp but it is type "))(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_pat)})(function(){return resolve(L_cons)(lazy(": "))(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_pat)})(L_nil)})})})})})(L_pat)})}})));
runMonad(resolve(L_define)(lazy("strCat"))(lazy(1))(lazy("strCat list = _strCat\n  assert (isList list) (strCat (cons 'strCat list should be type cons or nil but it is type ' (cons (getType list) (cons ': ' (cons list))))) list"))(lazy(function(L_list){return resolve(L__strCat)(function(){return resolve(L_assert)(function(){return resolve(L_isList)(L_list)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("strCat list should be type cons or nil but it is type "))(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_list)})(function(){return resolve(L_cons)(lazy(": "))(function(){return resolve(L_cons)(L_list)})})})})})(L_list)})})));
runMonad(resolve(L_define)(lazy("strAdd"))(lazy(2))(lazy("strAdd str1 str2 = _strAdd (assertType 'strAdd str1' '*string' str1) (assertType 'strAdd str2' '*string' str2)"))(lazy(function(L_str1){return function(L_str2){return resolve(L__strAdd)(function(){return resolve(L_assertType)(lazy("strAdd str1"))(lazy("*string"))(L_str1)})(function(){return resolve(L_assertType)(lazy("strAdd str2"))(lazy("*string"))(L_str2)})}})));
runMonad(resolve(L_define)(lazy("strMatch"))(lazy(2))(lazy("strMatch str pat = _strMatch\n  assertType 'strMatch str' '*string' str\n  assert (or (hasType pat '*string') (hasType pat '*RegExp')) (strCat (cons 'strMatch pat should be type string or RegExp but it is type ' (cons (getType pat) (cons ': ' (cons (show pat) nil))))) pat"))(lazy(function(L_str){return function(L_pat){return resolve(L__strMatch)(function(){return resolve(L_assertType)(lazy("strMatch str"))(lazy("*string"))(L_str)})(function(){return resolve(L_assert)(function(){return resolve(L_or)(function(){return resolve(L_hasType)(L_pat)(lazy("*string"))})(function(){return resolve(L_hasType)(L_pat)(lazy("*RegExp"))})})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("strMatch pat should be type string or RegExp but it is type "))(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_pat)})(function(){return resolve(L_cons)(lazy(": "))(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_pat)})(L_nil)})})})})})(L_pat)})}})));
runMonad(resolve(L_define)(lazy("strToList"))(lazy(1))(lazy("strToList str = _strToList (assertType 'strToList str' '*string' str)"))(lazy(function(L_str){return resolve(L__strToList)(function(){return resolve(L_assertType)(lazy("strToList str"))(lazy("*string"))(L_str)})})));
runMonad(resolve(L_define)(lazy("strFromList"))(lazy(1))(lazy("strFromList list = _strFromList\n  assert (isList list) (strCat (cons 'strFromList list should be type cons or nil but it is type ' (cons (getType list) (cons ': ' (cons list))))) list"))(lazy(function(L_list){return resolve(L__strFromList)(function(){return resolve(L_assert)(function(){return resolve(L_isList)(L_list)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("strFromList list should be type cons or nil but it is type "))(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_list)})(function(){return resolve(L_cons)(lazy(": "))(function(){return resolve(L_cons)(L_list)})})})})})(L_list)})})));
runMonad(resolve(L_define)(lazy("regexp"))(lazy(1))(lazy("regexp str = _regexp (assertType 'regexp str' '*string' str)"))(lazy(function(L_str){return resolve(L__regexp)(function(){return resolve(L_assertType)(lazy("regexp str"))(lazy("*string"))(L_str)})})));
runMonad(resolve(L_define)(lazy("regexpFlags"))(lazy(2))(lazy("regexpFlags str flags = _regexpFlags\n  assertType 'regexp str' '*string' str\n  assertType 'regexp flags' '*string' flags"))(lazy(function(L_str){return function(L_flags){return resolve(L__regexpFlags)(function(){return resolve(L_assertType)(lazy("regexp str"))(lazy("*string"))(L_str)})(function(){return resolve(L_assertType)(lazy("regexp flags"))(lazy("*string"))(L_flags)})}})));
runMonad(resolve(L_define)(lazy("jsonParse"))(lazy(3))(lazy("jsonParse str failure success = _jsonParse\n  assertType 'jsonParse str' '*string' str\n  failure\n  success"))(lazy(function(L_str){return function(L_failure){return function(L_success){return resolve(L__jsonParse)(function(){return resolve(L_assertType)(lazy("jsonParse str"))(lazy("*string"))(L_str)})(L_failure)(L_success)}}})));
runMonad(resolve(L_define)(lazy("show"))(lazy(1))(lazy("show x = _show x"))(lazy(function(L_x){return resolve(L__show)(L_x)})));
runMonad(resolve(L_define)(lazy("id"))(lazy(1))(lazy("id x = x"))(lazy(function(L_x){return resolve(L_x)})));
runMonad(resolve(L_define)(lazy("compose"))(lazy(2))(lazy("compose f g = \\x . f (g x)"))(lazy(setDataType(function(L_f){return function(L_g){return setType(function(L_x){return resolve(L_f)(function(){return resolve(L_g)(L_x)})}, 'compose')}}, 'compose'))));
runMonad(resolve(L_define)(lazy("flip"))(lazy(1))(lazy("flip func = \\x y . func y x"))(lazy(setDataType(function(L_func){return setType(function(L_x){return function(L_y){return resolve(L_func)(L_y)(L_x)}}, 'flip')}, 'flip'))));
runMonad(resolve(L_define)(lazy("cons"))(lazy(2))(lazy("cons a b = \\f . f a b"))(lazy(setDataType(function(L_a){return function(L_b){return setType(function(L_f){return resolve(L_f)(L_a)(L_b)}, 'cons')}}, 'cons'))));
runMonad(resolve(L_define)(lazy("isCons"))(lazy(1))(lazy("isCons c = hasType c cons"))(lazy(function(L_c){return resolve(L_hasType)(L_c)(L_cons)})));
runMonad(resolve(L_define)(lazy("isList"))(lazy(1))(lazy("isList l = or (hasType l cons) (hasType l nil)"))(lazy(function(L_l){return resolve(L_or)(function(){return resolve(L_hasType)(L_l)(L_cons)})(function(){return resolve(L_hasType)(L_l)(L_nil)})})));
runMonad(resolve(L_define)(lazy("assertType"))(lazy(3))(lazy("assertType msg type value = assert (hasType value type) (strCat (cons msg (cons ' should be type ' (cons (getDataType type) (cons ', but its type is ' (cons (getType value) (cons ': ' (cons (show value) nil)))))))) value"))(lazy(function(L_msg){return function(L_type){return function(L_value){return resolve(L_assert)(function(){return resolve(L_hasType)(L_value)(L_type)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_msg)(function(){return resolve(L_cons)(lazy(" should be type "))(function(){return resolve(L_cons)(function(){return resolve(L_getDataType)(L_type)})(function(){return resolve(L_cons)(lazy(", but its type is "))(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_value)})(function(){return resolve(L_cons)(lazy(": "))(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_value)})(L_nil)})})})})})})})})(L_value)}}})));
runMonad(resolve(L_define)(lazy("nil"))(lazy(0))(lazy("nil = \\a b . b"))(lazy(setDataType(setType(function(L_a){return function(L_b){return resolve(L_b)}}, 'nil'), 'nil'))));
runMonad(resolve(L_define)(lazy("isNil"))(lazy(1))(lazy("isNil n = hasType n nil"))(lazy(function(L_n){return resolve(L_hasType)(L_n)(L_nil)})));
runMonad(resolve(L_define)(lazy("head"))(lazy(1))(lazy("head l = l \\h t . h"))(lazy(function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return resolve(L_h)}}))})));
runMonad(resolve(L_define)(lazy("tail"))(lazy(1))(lazy("tail l = l \\h t . t"))(lazy(function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return resolve(L_t)}}))})));
runMonad(resolve(L_define)(lazy("last"))(lazy(1))(lazy("last l = isNil (tail l)\n  head l\n  last (tail l)"))(lazy(function(L_l){return resolve(L_isNil)(function(){return resolve(L_tail)(L_l)})(function(){return resolve(L_head)(L_l)})(function(){return resolve(L_last)(function(){return resolve(L_tail)(L_l)})})})));
runMonad(resolve(L_define)(lazy("removeLast"))(lazy(1))(lazy("removeLast l = isNil (tail l)\n  nil\n  cons (head l) (removeLast (tail l))"))(lazy(function(L_l){return resolve(L_isNil)(function(){return resolve(L_tail)(L_l)})(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_l)})(function(){return resolve(L_removeLast)(function(){return resolve(L_tail)(L_l)})})})})));
runMonad(resolve(L_define)(lazy("length"))(lazy(1))(lazy("length list = isCons list\n  + 1 (length (tail list))\n  0"))(lazy(function(L_list){return resolve(L_isCons)(L_list)(function(){return resolve(L_$o)(lazy(1))(function(){return resolve(L_length)(function(){return resolve(L_tail)(L_list)})})})(lazy(0))})));
runMonad(resolve(L_define)(lazy("append"))(lazy(2))(lazy("append a b = isNil a\n  b\n  cons (head a) (append (tail a) b)"))(lazy(function(L_a){return function(L_b){return resolve(L_isNil)(L_a)(L_b)(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_a)})(function(){return resolve(L_append)(function(){return resolve(L_tail)(L_a)})(L_b)})})}})));
runMonad(resolve(L_define)(lazy("flatten"))(lazy(1))(lazy("flatten list = isCons list\n  subflatten list nil\n  list"))(lazy(function(L_list){return resolve(L_isCons)(L_list)(function(){return resolve(L_subflatten)(L_list)(L_nil)})(L_list)})));
runMonad(resolve(L_define)(lazy("subflatten"))(lazy(2))(lazy("subflatten list result = isNil list\n  result\n  isCons list\n    subflatten (head list) (subflatten (tail list) result)\n    cons list result"))(lazy(function(L_list){return function(L_result){return resolve(L_isNil)(L_list)(L_result)(function(){return resolve(L_isCons)(L_list)(function(){return resolve(L_subflatten)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_subflatten)(function(){return resolve(L_tail)(L_list)})(L_result)})})(function(){return resolve(L_cons)(L_list)(L_result)})})}})));
runMonad(resolve(L_define)(lazy("reverse"))(lazy(1))(lazy("reverse l = rev l nil"))(lazy(function(L_l){return resolve(L_rev)(L_l)(L_nil)})));
runMonad(resolve(L_define)(lazy("rev"))(lazy(2))(lazy("rev l result = isNil l\n  result\n  rev (tail l) (cons (head l) result)"))(lazy(function(L_l){return function(L_result){return resolve(L_isNil)(L_l)(L_result)(function(){return resolve(L_rev)(function(){return resolve(L_tail)(L_l)})(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_l)})(L_result)})})}})));
runMonad(resolve(L_define)(lazy("filter"))(lazy(2))(lazy("filter func list = isNil list\n  nil\n  func (head list) (cons (head list)) id (filter func (tail list))"))(lazy(function(L_func){return function(L_list){return resolve(L_isNil)(L_list)(L_nil)(function(){return resolve(L_func)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_list)})})(L_id)(function(){return resolve(L_filter)(L_func)(function(){return resolve(L_tail)(L_list)})})})}})));
runMonad(resolve(L_define)(lazy("find"))(lazy(2))(lazy("find predicate list = isNil list\n  none\n  predicate (head list) (some (head list)) (find predicate (tail list))"))(lazy(function(L_predicate){return function(L_list){return resolve(L_isNil)(L_list)(L_none)(function(){return resolve(L_predicate)(function(){return resolve(L_head)(L_list)})(function(){return resolve(L_some)(function(){return resolve(L_head)(L_list)})})(function(){return resolve(L_find)(L_predicate)(function(){return resolve(L_tail)(L_list)})})})}})));
runMonad(resolve(L_define)(lazy("contains"))(lazy(2))(lazy("contains list item = find (\\el . eq el item) list (\\x . true) false"))(lazy(function(L_list){return function(L_item){return resolve(L_find)(lazy(function(L_el){return resolve(L_eq)(L_el)(L_item)}))(L_list)(lazy(function(L_x){return resolve(L_true)}))(L_false)}})));
runMonad(resolve(L_define)(lazy("map"))(lazy(2))(lazy("map func l = isNil l\n  nil\n  cons (func (head l)) (map func (tail l))"))(lazy(function(L_func){return function(L_l){return resolve(L_isNil)(L_l)(L_nil)(function(){return resolve(L_cons)(function(){return resolve(L_func)(function(){return resolve(L_head)(L_l)})})(function(){return resolve(L_map)(L_func)(function(){return resolve(L_tail)(L_l)})})})}})));
runMonad(resolve(L_define)(lazy("mapSave"))(lazy(2))(lazy("mapSave func l = isNil l\n  nil\n  \\\\\n    newH = func (head l)\n    newT = mapSave func (tail l)\n    .\n    and (eq newH (head l)) (eq newT (tail l))\n      l\n      cons newH newT"))(lazy(function(L_func){return function(L_l){return resolve(L_isNil)(L_l)(L_nil)(function(){
var L_newT, L_newH;

L_newT = function(){return resolve(L_mapSave)(L_func)(function(){return resolve(L_tail)(L_l)})};

L_newH = function(){return resolve(L_func)(function(){return resolve(L_head)(L_l)})};
return resolve(L_and)(function(){return resolve(L_eq)(L_newH)(function(){return resolve(L_head)(L_l)})})(function(){return resolve(L_eq)(L_newT)(function(){return resolve(L_tail)(L_l)})})(L_l)(function(){return resolve(L_cons)(L_newH)(L_newT)})})}})));
runMonad(resolve(L_define)(lazy("foldl"))(lazy(3))(lazy("foldl func initialValue l = l (\\h t D . foldl func (func initialValue h) t) initialValue"))(lazy(function(L_func){return function(L_initialValue){return function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_foldl)(L_func)(function(){return resolve(L_func)(L_initialValue)(L_h)})(L_t)}}}))(L_initialValue)}}})));
runMonad(resolve(L_define)(lazy("foldl1"))(lazy(2))(lazy("foldl1 func l = l \\h t . foldl func h t"))(lazy(function(L_func){return function(L_l){return resolve(L_l)(lazy(function(L_h){return function(L_t){return resolve(L_foldl)(L_func)(L_h)(L_t)}}))}})));
runMonad(resolve(L_define)(lazy("foldr"))(lazy(3))(lazy("foldr func initialValue list = list\n  \\h t D . func h (foldr func initialValue t)\n  initialValue"))(lazy(function(L_func){return function(L_initialValue){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_func)(L_h)(function(){return resolve(L_foldr)(L_func)(L_initialValue)(L_t)})}}}))(L_initialValue)}}})));
runMonad(resolve(L_define)(lazy("foldr1"))(lazy(2))(lazy("foldr1 func list = list \\h t . isNil t\n  h\n  func h (foldr1 func t)"))(lazy(function(L_func){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_isNil)(L_t)(L_h)(function(){return resolve(L_func)(L_h)(function(){return resolve(L_foldr1)(L_func)(L_t)})})}}))}})));
runMonad(resolve(L_define)(lazy("intersperse"))(lazy(2))(lazy("intersperse list element = list (\\h t D .\n  isNil t\n    list\n    cons h (cons element (intersperse t element))) nil"))(lazy(function(L_list){return function(L_element){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isNil)(L_t)(L_list)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(L_element)(function(){return resolve(L_intersperse)(L_t)(L_element)})})})}}}))(L_nil)}})));
runMonad(resolve(L_define)(lazy("join"))(lazy(2))(lazy("join list el = strCat (intersperse list el)"))(lazy(function(L_list){return function(L_el){return resolve(L_strCat)(function(){return resolve(L_intersperse)(L_list)(L_el)})}})));
runMonad(resolve(L_define)(lazy("findIndex"))(lazy(2))(lazy("findIndex func list = idx list func 0"))(lazy(function(L_func){return function(L_list){return resolve(L_idx)(L_list)(L_func)(lazy(0))}})));
runMonad(resolve(L_define)(lazy("idx"))(lazy(3))(lazy("idx list func pos = list\n  \\h t D . func h\n    pos\n    idx t func (+ 1 pos)\n  -1"))(lazy(function(L_list){return function(L_func){return function(L_pos){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_func)(L_h)(L_pos)(function(){return resolve(L_idx)(L_t)(L_func)(function(){return resolve(L_$o)(lazy(1))(L_pos)})})}}}))(lazy(-1))}}})));
runMonad(resolve(L_define)(lazy("index"))(lazy(2))(lazy("index list el = find (\\item . == el item) list"))(lazy(function(L_list){return function(L_el){return resolve(L_find)(lazy(function(L_item){return resolve(L_$p$p)(L_el)(L_item)}))(L_list)}})));
runMonad(resolve(L_define)(lazy("assertAlist"))(lazy(3))(lazy("assertAlist msg value result = assert (isAlist value) (strCat (cons msg (cons ' should be a association list, but it is not; its type is ' (cons (getType value) (cons ': ' (cons (show value) nil)))))) result"))(lazy(function(L_msg){return function(L_value){return function(L_result){return resolve(L_assert)(function(){return resolve(L_isAlist)(L_value)})(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_msg)(function(){return resolve(L_cons)(lazy(" should be a association list, but it is not; its type is "))(function(){return resolve(L_cons)(function(){return resolve(L_getType)(L_value)})(function(){return resolve(L_cons)(lazy(": "))(function(){return resolve(L_cons)(function(){return resolve(L_show)(L_value)})(L_nil)})})})})})})(L_result)}}})));
runMonad(resolve(L_define)(lazy("acons"))(lazy(3))(lazy("acons k v alist = assertAlist \"acons alist\" alist (\\@ type cons . \\f . \\@ assoc true . f (cons k v) alist)"))(lazy(function(L_k){return function(L_v){return function(L_alist){return resolve(L_assertAlist)(lazy("acons alist"))(L_alist)(lazy(setType(setLambdaProperties(function(L_f){return resolve(L_f)(function(){return resolve(L_cons)(L_k)(L_v)})(L_alist)}, {"assoc":"true"}), 'cons')))}}})));
runMonad(resolve(L_define)(lazy("assoc"))(lazy(2))(lazy("assoc k alist  = find (\\el . eq k (head el)) alist (\\cell . cell \\head tail . some tail) none"))(lazy(function(L_k){return function(L_alist){return resolve(L_find)(lazy(function(L_el){return resolve(L_eq)(L_k)(function(){return resolve(L_head)(L_el)})}))(L_alist)(lazy(function(L_cell){return resolve(L_cell)(lazy(function(L_head){return function(L_tail){return resolve(L_some)(L_tail)}}))}))(L_none)}})));
runMonad(resolve(L_define)(lazy("rassoc"))(lazy(2))(lazy("rassoc v alist = find (\\el . eq v (tail el)) alist (\\cell . cell \\head tail . some head) none"))(lazy(function(L_v){return function(L_alist){return resolve(L_find)(lazy(function(L_el){return resolve(L_eq)(L_v)(function(){return resolve(L_tail)(L_el)})}))(L_alist)(lazy(function(L_cell){return resolve(L_cell)(lazy(function(L_head){return function(L_tail){return resolve(L_some)(L_head)}}))}))(L_none)}})));
runMonad(resolve(L_define)(lazy("isAlist"))(lazy(1))(lazy("isAlist obj = or (isNil obj) (hasProperty obj 'assoc')"))(lazy(function(L_obj){return resolve(L_or)(function(){return resolve(L_isNil)(L_obj)})(function(){return resolve(L_hasProperty)(L_obj)(lazy("assoc"))})})));
runMonad(resolve(L_define)(lazy("aconsPair"))(lazy(2))(lazy("aconsPair keyValue list = \\@ type cons . \\f . \\@ assoc true . f keyValue list"))(lazy(function(L_keyValue){return function(L_list){return setType(setLambdaProperties(function(L_f){return resolve(L_f)(L_keyValue)(L_list)}, {"assoc":"true"}), 'cons')}})));
runMonad(resolve(L_define)(lazy("appendAlist"))(lazy(2))(lazy("appendAlist a b = isNil a\n  b\n  aconsPair (head a) (appendAlist (tail a) b)"))(lazy(function(L_a){return function(L_b){return resolve(L_isNil)(L_a)(L_b)(function(){return resolve(L_aconsPair)(function(){return resolve(L_head)(L_a)})(function(){return resolve(L_appendAlist)(function(){return resolve(L_tail)(L_a)})(L_b)})})}})));
runMonad(resolve(L_define)(lazy("keys"))(lazy(1))(lazy("keys list = map (\\l . head l) list"))(lazy(function(L_list){return resolve(L_map)(lazy(function(L_l){return resolve(L_head)(L_l)}))(L_list)})));
runMonad(resolve(L_define)(lazy("getProperty"))(lazy(2))(lazy("getProperty func prop = getProperties func\n  \\props . assoc prop props\n  none"))(lazy(function(L_func){return function(L_prop){return resolve(L_getProperties)(L_func)(lazy(function(L_props){return resolve(L_assoc)(L_prop)(L_props)}))(L_none)}})));
runMonad(resolve(L_define)(lazy("hasProperty"))(lazy(2))(lazy("hasProperty func prop = getProperty func prop\n  \\_ . true\n  false"))(lazy(function(L_func){return function(L_prop){return resolve(L_getProperty)(L_func)(L_prop)(lazy(function(L__){return resolve(L_true)}))(L_false)}})));
runMonad(resolve(L_define)(lazy("quicksort"))(lazy(2))(lazy("quicksort less list = (qs less list) nil"))(lazy(function(L_less){return function(L_list){return resolve(L_qs)(L_less)(L_list)(L_nil)}})));
runMonad(resolve(L_define)(lazy("qs"))(lazy(2))(lazy("qs sortedFunc list = list\n  \\h t D . \\\\\n    greater = filter (sortedFunc h) t\n    lesser = filter (compose not (sortedFunc h)) t\n    .\n    \\rest . (qs sortedFunc lesser) (cons h ((qs sortedFunc greater) rest))\n  id"))(lazy(function(L_sortedFunc){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return (function(){

var L_lesser, L_greater;

L_lesser = function(){return resolve(L_filter)(function(){return resolve(L_compose)(L_not)(function(){return resolve(L_sortedFunc)(L_h)})})(L_t)};

L_greater = function(){return resolve(L_filter)(function(){return resolve(L_sortedFunc)(L_h)})(L_t)};
return function(L_rest){return resolve(L_qs)(L_sortedFunc)(L_lesser)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_qs)(L_sortedFunc)(L_greater)(L_rest)})})}})()}}}))(L_id)}})));
runMonad(resolve(L_define)(lazy("insertSorted"))(lazy(3))(lazy("insertSorted sortFunc item list = list\n  \\h t D . sortFunc item h (cons item list) (cons h (insertSorted sortFunc item t))\n  cons item nil"))(lazy(function(L_sortFunc){return function(L_item){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_sortFunc)(L_item)(L_h)(function(){return resolve(L_cons)(L_item)(L_list)})(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_insertSorted)(L_sortFunc)(L_item)(L_t)})})}}}))(function(){return resolve(L_cons)(L_item)(L_nil)})}}})));
runMonad(resolve(L_define)(lazy("token"))(lazy(2))(lazy("token txt pos = \\f . f txt pos"))(lazy(setDataType(function(L_txt){return function(L_pos){return setType(function(L_f){return resolve(L_f)(L_txt)(L_pos)}, 'token')}}, 'token'))));
runMonad(resolve(L_define)(lazy("tokenString"))(lazy(1))(lazy("tokenString tok = tok \\t p . t"))(lazy(function(L_tok){return resolve(L_tok)(lazy(function(L_t){return function(L_p){return resolve(L_t)}}))})));
runMonad(resolve(L_define)(lazy("tokenPos"))(lazy(1))(lazy("tokenPos tok = tok \\t p . p"))(lazy(function(L_tok){return resolve(L_tok)(lazy(function(L_t){return function(L_p){return resolve(L_p)}}))})));
runMonad(resolve(L_define)(lazy("isToken"))(lazy(1))(lazy("isToken t = hasType t token"))(lazy(function(L_t){return resolve(L_hasType)(L_t)(L_token)})));
runMonad(resolve(L_define)(lazy("parens"))(lazy(3))(lazy("parens start end content = \\f . f start end content"))(lazy(setDataType(function(L_start){return function(L_end){return function(L_content){return setType(function(L_f){return resolve(L_f)(L_start)(L_end)(L_content)}, 'parens')}}}, 'parens'))));
runMonad(resolve(L_define)(lazy("parensStart"))(lazy(1))(lazy("parensStart p = p \\s e c . s"))(lazy(function(L_p){return resolve(L_p)(lazy(function(L_s){return function(L_e){return function(L_c){return resolve(L_s)}}}))})));
runMonad(resolve(L_define)(lazy("parensEnd"))(lazy(1))(lazy("parensEnd p = p \\s e c . e"))(lazy(function(L_p){return resolve(L_p)(lazy(function(L_s){return function(L_e){return function(L_c){return resolve(L_e)}}}))})));
runMonad(resolve(L_define)(lazy("parensContent"))(lazy(1))(lazy("parensContent p = p \\s e c . c"))(lazy(function(L_p){return resolve(L_p)(lazy(function(L_s){return function(L_e){return function(L_c){return resolve(L_c)}}}))})));
runMonad(resolve(L_define)(lazy("isParens"))(lazy(1))(lazy("isParens p = hasType p parens"))(lazy(function(L_p){return resolve(L_hasType)(L_p)(L_parens)})));
runMonad(resolve(L_define)(lazy("makeParens"))(lazy(3))(lazy("makeParens start end content =\n  and (isCons content) (isNil (tail content))\n    makeParens start end (head content)\n    or (isToken content) (isParens content)\n      content\n      parens start end content"))(lazy(function(L_start){return function(L_end){return function(L_content){return resolve(L_and)(function(){return resolve(L_isCons)(L_content)})(function(){return resolve(L_isNil)(function(){return resolve(L_tail)(L_content)})})(function(){return resolve(L_makeParens)(L_start)(L_end)(function(){return resolve(L_head)(L_content)})})(function(){return resolve(L_or)(function(){return resolve(L_isToken)(L_content)})(function(){return resolve(L_isParens)(L_content)})(L_content)(function(){return resolve(L_parens)(L_start)(L_end)(L_content)})})}}})));
runMonad(resolve(L_define)(lazy("parensFromToks"))(lazy(3))(lazy("parensFromToks left right content = \\\\\n  start = tokenPos left\n  end = + (tokenPos right) (strLen (tokenString right))\n  .\n  parens start end content"))(lazy(function(L_left){return function(L_right){return function(L_content){return (function(){

var L_end, L_start;

L_end = function(){return resolve(L_$o)(function(){return resolve(L_tokenPos)(L_right)})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_right)})})};

L_start = function(){return resolve(L_tokenPos)(L_left)};
return resolve(L_parens)(L_start)(L_end)(L_content)})()}}})));
runMonad(resolve(L_define)(lazy("stripParens"))(lazy(1))(lazy("stripParens p = isParens p (parensContent p) p"))(lazy(function(L_p){return resolve(L_isParens)(L_p)(function(){return resolve(L_parensContent)(L_p)})(L_p)})));
runMonad(resolve(L_define)(lazy("parseErr"))(lazy(2))(lazy("parseErr msg1 msg2 = \\f . f (strCat (cons msg1 (cons msg2 nil)))"))(lazy(setDataType(function(L_msg1){return function(L_msg2){return setType(function(L_f){return resolve(L_f)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_msg1)(function(){return resolve(L_cons)(L_msg2)(L_nil)})})})}, 'parseErr')}}, 'parseErr'))));
runMonad(resolve(L_define)(lazy("parseErrMsg"))(lazy(1))(lazy("parseErrMsg err = err \\m . m"))(lazy(function(L_err){return resolve(L_err)(lazy(function(L_m){return resolve(L_m)}))})));
runMonad(resolve(L_define)(lazy("isParseErr"))(lazy(1))(lazy("isParseErr thing = hasType thing parseErr"))(lazy(function(L_thing){return resolve(L_hasType)(L_thing)(L_parseErr)})));
runMonad(resolve(L_define)(lazy("emptyToken"))(lazy(0))(lazy("emptyToken = regexp '^\\\\n[ \\\\i]*(#|$)'"))(function(){return resolve(L_regexp)(lazy("^\\n[ \\i]*(#|$)"))}));
runMonad(resolve(L_define)(lazy("makeTokens"))(lazy(2))(lazy("makeTokens strings start = strings (\\h t D . makeMoreTokens h t start) nil"))(lazy(function(L_strings){return function(L_start){return resolve(L_strings)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_makeMoreTokens)(L_h)(L_t)(L_start)}}}))(L_nil)}})));
runMonad(resolve(L_define)(lazy("makeMoreTokens"))(lazy(3))(lazy("makeMoreTokens h t start = \\\\\n  next = makeTokens t (+ start (strLen h))\n  .\n  and (strMatches h emptyToken) (or (isNil t) (strStartsWith (head t) '\\n'))\n    makeTokens t (+ start (strLen h))\n    or (strStartsWith h ' ') (strStartsWith h '#')\n      next\n      and (strStartsWith h '\\n') (strStartsWith (head t) '#')\n        makeTokens (tail t) (+ start (+ (strLen h) (strLen (head t))))\n        cons (token h start) next"))(lazy(function(L_h){return function(L_t){return function(L_start){return (function(){

var L_next;

L_next = function(){return resolve(L_makeTokens)(L_t)(function(){return resolve(L_$o)(L_start)(function(){return resolve(L_strLen)(L_h)})})};
return resolve(L_and)(function(){return resolve(L_strMatches)(L_h)(L_emptyToken)})(function(){return resolve(L_or)(function(){return resolve(L_isNil)(L_t)})(function(){return resolve(L_strStartsWith)(function(){return resolve(L_head)(L_t)})(lazy("\n"))})})(function(){return resolve(L_makeTokens)(L_t)(function(){return resolve(L_$o)(L_start)(function(){return resolve(L_strLen)(L_h)})})})(function(){return resolve(L_or)(function(){return resolve(L_strStartsWith)(L_h)(lazy(" "))})(function(){return resolve(L_strStartsWith)(L_h)(lazy("#"))})(L_next)(function(){return resolve(L_and)(function(){return resolve(L_strStartsWith)(L_h)(lazy("\n"))})(function(){return resolve(L_strStartsWith)(function(){return resolve(L_head)(L_t)})(lazy("#"))})(function(){return resolve(L_makeTokens)(function(){return resolve(L_tail)(L_t)})(function(){return resolve(L_$o)(L_start)(function(){return resolve(L_$o)(function(){return resolve(L_strLen)(L_h)})(function(){return resolve(L_strLen)(function(){return resolve(L_head)(L_t)})})})})})(function(){return resolve(L_cons)(function(){return resolve(L_token)(L_h)(L_start)})(L_next)})})})})()}}})));
runMonad(resolve(L_define)(lazy("splitTokens"))(lazy(2))(lazy("splitTokens str pat = filter (\\s . not (eq s '')) (basicSplitTokens str pat true)"))(lazy(function(L_str){return function(L_pat){return resolve(L_filter)(lazy(function(L_s){return resolve(L_not)(function(){return resolve(L_eq)(L_s)(lazy(""))})}))(function(){return resolve(L_basicSplitTokens)(L_str)(L_pat)(L_true)})}})));
runMonad(resolve(L_define)(lazy("numberPat"))(lazy(0))(lazy("numberPat = regexp '-?([0-9]+(\\\\.[0-9]+)?|\\\\.[0-9]+)'"))(function(){return resolve(L_regexp)(lazy("-?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)"))}));
runMonad(resolve(L_define)(lazy("matchOffset"))(lazy(2))(lazy("matchOffset str match = isNil match\n  strLen str\n  head (tail (tail match))"))(lazy(function(L_str){return function(L_match){return resolve(L_isNil)(L_match)(function(){return resolve(L_strLen)(L_str)})(function(){return resolve(L_head)(function(){return resolve(L_tail)(function(){return resolve(L_tail)(L_match)})})})}})));
runMonad(resolve(L_define)(lazy("basicSplitTokens"))(lazy(3))(lazy("basicSplitTokens str pat prevIsDel = == str ''\n  nil\n  \\\\\n    num = strMatch str numberPat\n    del = strMatch str pat\n    numOffset = matchOffset str num\n    delOffset = matchOffset str del\n    select = and (== numOffset 0) prevIsDel\n      \\del num first . num\n      == delOffset 0\n        \\del num first . del\n        \\del num first . first\n    first = select (head del) (head num) (strSubstring str 0 delOffset)\n    .\n    cons\n      first\n      basicSplitTokens\n        strSubstring str (strLen first) 0\n        pat\n        select true false false"))(lazy(function(L_str){return function(L_pat){return function(L_prevIsDel){return resolve(L_$p$p)(L_str)(lazy(""))(L_nil)(function(){
var L_first, L_select, L_delOffset, L_numOffset, L_del, L_num;

L_first = function(){return resolve(L_select)(function(){return resolve(L_head)(L_del)})(function(){return resolve(L_head)(L_num)})(function(){return resolve(L_strSubstring)(L_str)(lazy(0))(L_delOffset)})};

L_select = function(){return resolve(L_and)(function(){return resolve(L_$p$p)(L_numOffset)(lazy(0))})(L_prevIsDel)(lazy(function(L_del_0){return function(L_num_1){return function(L_first){return resolve(L_num_1)}}}))(function(){return resolve(L_$p$p)(L_delOffset)(lazy(0))(lazy(function(L_del_0){return function(L_num_1){return function(L_first){return resolve(L_del_0)}}}))(lazy(function(L_del_0){return function(L_num_1){return function(L_first){return resolve(L_first)}}}))})};

L_delOffset = function(){return resolve(L_matchOffset)(L_str)(L_del)};

L_numOffset = function(){return resolve(L_matchOffset)(L_str)(L_num)};

L_del = function(){return resolve(L_strMatch)(L_str)(L_pat)};

L_num = function(){return resolve(L_strMatch)(L_str)(L_numberPat)};
return resolve(L_cons)(L_first)(function(){return resolve(L_basicSplitTokens)(function(){return resolve(L_strSubstring)(L_str)(function(){return resolve(L_strLen)(L_first)})(lazy(0))})(L_pat)(function(){return resolve(L_select)(L_true)(L_false)(L_false)})})})}}})));
runMonad(resolve(L_define)(lazy("tokens"))(lazy(2))(lazy("tokens str pat = makeTokens (splitTokens str pat) 0"))(lazy(function(L_str){return function(L_pat){return resolve(L_makeTokens)(function(){return resolve(L_splitTokens)(L_str)(L_pat)})(lazy(0))}})));
runMonad(resolve(L_define)(lazy("isString"))(lazy(1))(lazy("isString s = == (getType s) '*string'"))(lazy(function(L_s){return resolve(L_$p$p)(function(){return resolve(L_getType)(L_s)})(lazy("*string"))})));
runMonad(resolve(L_define)(lazy("isNumber"))(lazy(1))(lazy("isNumber s = == (getType s) '*number'"))(lazy(function(L_s){return resolve(L_$p$p)(function(){return resolve(L_getType)(L_s)})(lazy("*number"))})));
runMonad(resolve(L_define)(lazy("isTokenString"))(lazy(2))(lazy("isTokenString tok str = or\n  and (isToken tok) (eq (tokenString tok) str)\n  and (isString tok) (eq tok str)"))(lazy(function(L_tok){return function(L_str){return resolve(L_or)(function(){return resolve(L_and)(function(){return resolve(L_isToken)(L_tok)})(function(){return resolve(L_eq)(function(){return resolve(L_tokenString)(L_tok)})(L_str)})})(function(){return resolve(L_and)(function(){return resolve(L_isString)(L_tok)})(function(){return resolve(L_eq)(L_tok)(L_str)})})}})));
runMonad(resolve(L_define)(lazy("isTokenStart"))(lazy(2))(lazy("isTokenStart tok str = or\n  and (isToken tok) (strStartsWith (tokenString tok) str)\n  and (isString tok) (strStartsWith tok str)"))(lazy(function(L_tok){return function(L_str){return resolve(L_or)(function(){return resolve(L_and)(function(){return resolve(L_isToken)(L_tok)})(function(){return resolve(L_strStartsWith)(function(){return resolve(L_tokenString)(L_tok)})(L_str)})})(function(){return resolve(L_and)(function(){return resolve(L_isString)(L_tok)})(function(){return resolve(L_strStartsWith)(L_tok)(L_str)})})}})));
runMonad(resolve(L_define)(lazy("strTokenString"))(lazy(1))(lazy("strTokenString tok = withToken tok nil \\str pos . str"))(lazy(function(L_tok){return resolve(L_withToken)(L_tok)(L_nil)(lazy(function(L_str){return function(L_pos){return resolve(L_str)}}))})));
runMonad(resolve(L_define)(lazy("withToken"))(lazy(3))(lazy("withToken tok nonTokCase tokCase = isToken tok\n  tok tokCase\n  isString tok\n    tokCase tok -1\n    nonTokCase"))(lazy(function(L_tok){return function(L_nonTokCase){return function(L_tokCase){return resolve(L_isToken)(L_tok)(function(){return resolve(L_tok)(L_tokCase)})(function(){return resolve(L_isString)(L_tok)(function(){return resolve(L_tokCase)(L_tok)(lazy(-1))})(L_nonTokCase)})}}})));
runMonad(resolve(L_define)(lazy("withCons"))(lazy(3))(lazy("withCons l nilCase cont = isCons l (l (\\h t D . cont h t) nilCase) nilCase"))(lazy(function(L_l){return function(L_nilCase){return function(L_cont){return resolve(L_isCons)(L_l)(function(){return resolve(L_l)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_cont)(L_h)(L_t)}}}))(L_nilCase)})(L_nilCase)}}})));
runMonad(resolve(L_define)(lazy("ifNotErr"))(lazy(2))(lazy("ifNotErr thing cont = hasType thing parseErr thing (cont thing)"))(lazy(function(L_thing){return function(L_cont){return resolve(L_hasType)(L_thing)(L_parseErr)(L_thing)(function(){return resolve(L_cont)(L_thing)})}})));
runMonad(resolve(L_define)(lazy("parseToks"))(lazy(2))(lazy("parseToks toks groups =\n  isNil toks nil\n    ifNotErr (parseTok toks groups) \\list . list \\h t .\n      ifNotErr (parseToks t groups) \\res .\n        cons h\n          and (isCons res) (isBlockStart (head res))\n            cons res nil\n            res"))(lazy(function(L_toks){return function(L_groups){return resolve(L_isNil)(L_toks)(L_nil)(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_ifNotErr)(function(){return resolve(L_parseToks)(L_t)(L_groups)})(lazy(function(L_res){return resolve(L_cons)(L_h)(function(){return resolve(L_and)(function(){return resolve(L_isCons)(L_res)})(function(){return resolve(L_isBlockStart)(function(){return resolve(L_head)(L_res)})})(function(){return resolve(L_cons)(L_res)(L_nil)})(L_res)})}))}}))}))})}})));
runMonad(resolve(L_define)(lazy("parseTok"))(lazy(2))(lazy("parseTok toks groups = withCons toks nil \\h t .\n  withToken h toks \\txt pos .\n    assoc txt groups\n      \\close . parseGroup h t nil close groups\n      isTokenStart h '\\n' (parseIndent h t nil groups)\n        toks"))(lazy(function(L_toks){return function(L_groups){return resolve(L_withCons)(L_toks)(L_nil)(lazy(function(L_h){return function(L_t){return resolve(L_withToken)(L_h)(L_toks)(lazy(function(L_txt){return function(L_pos){return resolve(L_assoc)(L_txt)(L_groups)(lazy(function(L_close){return resolve(L_parseGroup)(L_h)(L_t)(L_nil)(L_close)(L_groups)}))(function(){return resolve(L_isTokenStart)(L_h)(lazy("\n"))(function(){return resolve(L_parseIndent)(L_h)(L_t)(L_nil)(L_groups)})(L_toks)})}}))}}))}})));
runMonad(resolve(L_define)(lazy("parseGroup"))(lazy(5))(lazy("parseGroup left toks gr close groups = withCons toks (parseErr 'Unterminated group starting ' (loc left))\n  \\h t . isTokenString h close\n    eq close ')'\n      cons (parensFromToks left h (reverse gr)) t\n      cons (cons left (cons (reverse gr) (cons h nil))) t\n    withToken h\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT .\n        parseGroup left restT (cons restH gr) close groups\n      \\txt pos .\n        rassoc txt groups\n          \\open . parseErr (strCat (cons 'Mismatched group: ' (cons (tokenString left) (cons txt (cons ' ' nil))))) (loc left)\n          ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseGroup left restT (cons restH gr) close groups"))(lazy(function(L_left){return function(L_toks){return function(L_gr){return function(L_close){return function(L_groups){return resolve(L_withCons)(L_toks)(function(){return resolve(L_parseErr)(lazy("Unterminated group starting "))(function(){return resolve(L_loc)(L_left)})})(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)(L_close)(function(){return resolve(L_eq)(L_close)(lazy(")"))(function(){return resolve(L_cons)(function(){return resolve(L_parensFromToks)(L_left)(L_h)(function(){return resolve(L_reverse)(L_gr)})})(L_t)})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(L_left)(function(){return resolve(L_cons)(function(){return resolve(L_reverse)(L_gr)})(function(){return resolve(L_cons)(L_h)(L_nil)})})})(L_t)})})(function(){return resolve(L_withToken)(L_h)(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_restH){return function(L_restT){return resolve(L_parseGroup)(L_left)(L_restT)(function(){return resolve(L_cons)(L_restH)(L_gr)})(L_close)(L_groups)}}))}))})(lazy(function(L_txt){return function(L_pos){return resolve(L_rassoc)(L_txt)(L_groups)(lazy(function(L_open){return resolve(L_parseErr)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("Mismatched group: "))(function(){return resolve(L_cons)(function(){return resolve(L_tokenString)(L_left)})(function(){return resolve(L_cons)(L_txt)(function(){return resolve(L_cons)(lazy(" "))(L_nil)})})})})})(function(){return resolve(L_loc)(L_left)})}))(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_restH){return function(L_restT){return resolve(L_parseGroup)(L_left)(L_restT)(function(){return resolve(L_cons)(L_restH)(L_gr)})(L_close)(L_groups)}}))}))})}}))})}}))}}}}})));
runMonad(resolve(L_define)(lazy("parseIndent"))(lazy(4))(lazy("parseIndent indent toks gr groups =\n  withCons toks (cons (makeParens (tokenPos indent) (lexEnd (head gr)) (reverse gr)) nil)\n    \\h t . or (withToken h false (\\txt pos . rassoc txt groups (\\open . true) false))\n      and (isTokenStart h '\\n') (<= (strLen (tokenString h)) (strLen (tokenString indent)))\n      cons (makeParens (tokenPos indent) (tokenPos h) (reverse gr)) toks\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseIndent indent restT (cons restH gr) groups"))(lazy(function(L_indent){return function(L_toks){return function(L_gr){return function(L_groups){return resolve(L_withCons)(L_toks)(function(){return resolve(L_cons)(function(){return resolve(L_makeParens)(function(){return resolve(L_tokenPos)(L_indent)})(function(){return resolve(L_lexEnd)(function(){return resolve(L_head)(L_gr)})})(function(){return resolve(L_reverse)(L_gr)})})(L_nil)})(lazy(function(L_h){return function(L_t){return resolve(L_or)(function(){return resolve(L_withToken)(L_h)(L_false)(lazy(function(L_txt){return function(L_pos){return resolve(L_rassoc)(L_txt)(L_groups)(lazy(function(L_open){return resolve(L_true)}))(L_false)}}))})(function(){return resolve(L_and)(function(){return resolve(L_isTokenStart)(L_h)(lazy("\n"))})(function(){return resolve(L_$y$p)(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_h)})})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_indent)})})})})(function(){return resolve(L_cons)(function(){return resolve(L_makeParens)(function(){return resolve(L_tokenPos)(L_indent)})(function(){return resolve(L_tokenPos)(L_h)})(function(){return resolve(L_reverse)(L_gr)})})(L_toks)})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseTok)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_restH){return function(L_restT){return resolve(L_parseIndent)(L_indent)(L_restT)(function(){return resolve(L_cons)(L_restH)(L_gr)})(L_groups)}}))}))})}}))}}}})));
runMonad(resolve(L_define)(lazy("lit"))(lazy(1))(lazy("lit value = \\f . f value"))(lazy(setDataType(function(L_value){return setType(function(L_f){return resolve(L_f)(L_value)}, 'lit')}, 'lit'))));
runMonad(resolve(L_define)(lazy("ref"))(lazy(1))(lazy("ref name = \\f . f name"))(lazy(setDataType(function(L_name){return setType(function(L_f){return resolve(L_f)(L_name)}, 'ref')}, 'ref'))));
runMonad(resolve(L_define)(lazy("lambda"))(lazy(2))(lazy("lambda name body = \\f . f name body"))(lazy(setDataType(function(L_name){return function(L_body){return setType(function(L_f){return resolve(L_f)(L_name)(L_body)}, 'lambda')}}, 'lambda'))));
runMonad(resolve(L_define)(lazy("apply"))(lazy(2))(lazy("apply func arg = \\f . f func arg"))(lazy(setDataType(function(L_func){return function(L_arg){return setType(function(L_f){return resolve(L_f)(L_func)(L_arg)}, 'apply')}}, 'apply'))));
runMonad(resolve(L_define)(lazy("let"))(lazy(3))(lazy("let name value body = \\f . f name value body"))(lazy(setDataType(function(L_name){return function(L_value){return function(L_body){return setType(function(L_f){return resolve(L_f)(L_name)(L_value)(L_body)}, 'let')}}}, 'let'))));
runMonad(resolve(L_define)(lazy("anno"))(lazy(3))(lazy("anno name data body = \\f . f name data body"))(lazy(setDataType(function(L_name){return function(L_data){return function(L_body){return setType(function(L_f){return resolve(L_f)(L_name)(L_data)(L_body)}, 'anno')}}}, 'anno'))));
runMonad(resolve(L_define)(lazy("withParens"))(lazy(3))(lazy("withParens p err cont = isParens p (p cont) err"))(lazy(function(L_p){return function(L_err){return function(L_cont){return resolve(L_isParens)(L_p)(function(){return resolve(L_p)(L_cont)})(L_err)}}})));
runMonad(resolve(L_define)(lazy("setParens"))(lazy(2))(lazy("setParens p func = isParens p\n  p \\start end content . parens start end (func content)\n  func p"))(lazy(function(L_p){return function(L_func){return resolve(L_isParens)(L_p)(function(){return resolve(L_p)(lazy(function(L_start){return function(L_end){return function(L_content){return resolve(L_parens)(L_start)(L_end)(function(){return resolve(L_func)(L_content)})}}}))})(function(){return resolve(L_func)(L_p)})}})));
runMonad(resolve(L_define)(lazy("withStripped"))(lazy(2))(lazy("withStripped list cont = withParens list (cont list) \\start end content . withStripped content cont"))(lazy(function(L_list){return function(L_cont){return resolve(L_withParens)(L_list)(function(){return resolve(L_cont)(L_list)})(lazy(function(L_start){return function(L_end){return function(L_content){return resolve(L_withStripped)(L_content)(L_cont)}}}))}})));
runMonad(resolve(L_define)(lazy("position"))(lazy(1))(lazy("position thing = isToken thing (tokenPos thing)\n  isParens thing (parensStart thing)\n    isCons thing (position (head thing))\n      -1"))(lazy(function(L_thing){return resolve(L_isToken)(L_thing)(function(){return resolve(L_tokenPos)(L_thing)})(function(){return resolve(L_isParens)(L_thing)(function(){return resolve(L_parensStart)(L_thing)})(function(){return resolve(L_isCons)(L_thing)(function(){return resolve(L_position)(function(){return resolve(L_head)(L_thing)})})(lazy(-1))})})})));
runMonad(resolve(L_define)(lazy("lexEnd"))(lazy(1))(lazy("lexEnd thing = isToken thing (+ (tokenPos thing) (strLen (tokenString thing)))\n  isParens thing (parensEnd thing)\n    isCons thing (lexEnd (last thing))\n      -1"))(lazy(function(L_thing){return resolve(L_isToken)(L_thing)(function(){return resolve(L_$o)(function(){return resolve(L_tokenPos)(L_thing)})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_thing)})})})(function(){return resolve(L_isParens)(L_thing)(function(){return resolve(L_parensEnd)(L_thing)})(function(){return resolve(L_isCons)(L_thing)(function(){return resolve(L_lexEnd)(function(){return resolve(L_last)(L_thing)})})(lazy(-1))})})})));
runMonad(resolve(L_define)(lazy("loc"))(lazy(1))(lazy("loc thing = \\\\\n  p = position thing\n  l = eq p -1 'an unknown location' p\n  .\n  strCat (cons 'at ' (cons l nil))"))(lazy(function(L_thing){return (function(){

var L_l, L_p;

L_l = function(){return resolve(L_eq)(L_p)(lazy(-1))(lazy("an unknown location"))(L_p)};

L_p = function(){return resolve(L_position)(L_thing)};
return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("at "))(function(){return resolve(L_cons)(L_l)(L_nil)})})})()})));
runMonad(resolve(L_define)(lazy("scrub"))(lazy(1))(lazy("scrub str = strFromList (scrubList (strToList str))"))(lazy(function(L_str){return resolve(L_strFromList)(function(){return resolve(L_scrubList)(function(){return resolve(L_strToList)(L_str)})})})));
runMonad(resolve(L_define)(lazy("scrubList"))(lazy(1))(lazy("scrubList list = list\n  \\h t D . \\\\\n    next = scrubList t\n    .\n    eq h '\\\\' (cons h (cons (head t) (scrubList (tail t))))\n      eq h '\\\"' (cons '\\\\' (cons '\\\"' next))\n        cons h next\n  nil"))(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return (function(){

var L_next;

L_next = function(){return resolve(L_scrubList)(L_t)};
return resolve(L_eq)(L_h)(lazy("\\"))(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(function(){return resolve(L_head)(L_t)})(function(){return resolve(L_scrubList)(function(){return resolve(L_tail)(L_t)})})})})(function(){return resolve(L_eq)(L_h)(lazy("\""))(function(){return resolve(L_cons)(lazy("\\"))(function(){return resolve(L_cons)(lazy("\""))(L_next)})})(function(){return resolve(L_cons)(L_h)(L_next)})})})()}}}))(L_nil)})));
runMonad(resolve(L_define)(lazy("createAst"))(lazy(2))(lazy("createAst inList names = withStripped inList \\list .\n  isToken list (createLitOrRef (tokenString list) names)\n    list\n      \\h t D .\n        isTokenString h '\\\\\\\\' (createLet h t names)\n          isTokenString h '\\\\@' (createAnno h t names)\n            isTokenString h '\\\\' (createLambda h t names)\n              createApply list names\n      nil"))(lazy(function(L_inList){return function(L_names){return resolve(L_withStripped)(L_inList)(lazy(function(L_list){return resolve(L_isToken)(L_list)(function(){return resolve(L_createLitOrRef)(function(){return resolve(L_tokenString)(L_list)})(L_names)})(function(){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)(lazy("\\\\"))(function(){return resolve(L_createLet)(L_h)(L_t)(L_names)})(function(){return resolve(L_isTokenString)(L_h)(lazy("\\@"))(function(){return resolve(L_createAnno)(L_h)(L_t)(L_names)})(function(){return resolve(L_isTokenString)(L_h)(lazy("\\"))(function(){return resolve(L_createLambda)(L_h)(L_t)(L_names)})(function(){return resolve(L_createApply)(L_list)(L_names)})})})}}}))(L_nil)})}))}})));
runMonad(resolve(L_define)(lazy("strMatches"))(lazy(2))(lazy("strMatches str pat = isCons (strMatch str pat)"))(lazy(function(L_str){return function(L_pat){return resolve(L_isCons)(function(){return resolve(L_strMatch)(L_str)(L_pat)})}})));
runMonad(resolve(L_define)(lazy("digit"))(lazy(0))(lazy("digit = regexp '^[0-9]+$'"))(function(){return resolve(L_regexp)(lazy("^[0-9]+$"))}));
runMonad(resolve(L_define)(lazy("backslashCodes"))(lazy(0))(lazy("backslashCodes = 'bfnrt'"))(lazy("bfnrt")));
runMonad(resolve(L_define)(lazy("backslashValues"))(lazy(0))(lazy("backslashValues = '\\b\\f\\n\\r\\t'"))(lazy("\b\f\n\r\t")));
runMonad(resolve(L_define)(lazy("convertStringEscape"))(lazy(3))(lazy("convertStringEscape char codes values =\n  eq codes ''\n    char\n    eq char (strAt codes 0)\n      strAt values 0\n      convertStringEscape char (strSubstring codes 1 0) (strSubstring values 1 0)"))(lazy(function(L_char){return function(L_codes){return function(L_values){return resolve(L_eq)(L_codes)(lazy(""))(L_char)(function(){return resolve(L_eq)(L_char)(function(){return resolve(L_strAt)(L_codes)(lazy(0))})(function(){return resolve(L_strAt)(L_values)(lazy(0))})(function(){return resolve(L_convertStringEscape)(L_char)(function(){return resolve(L_strSubstring)(L_codes)(lazy(1))(lazy(0))})(function(){return resolve(L_strSubstring)(L_values)(lazy(1))(lazy(0))})})})}}})));
runMonad(resolve(L_define)(lazy("convertStringEscapes"))(lazy(3))(lazy("convertStringEscapes orig str cont =\n  eq str ''\n    cont str\n    eq (strAt str 0) '\\\\'\n      eq (strLen str) 1 (parseErr \"Error, backslash without character in string: \" orig)\n        convertStringEscapes orig (strSubstring str 2 0) \\rest . cont\n          strAdd\n            convertStringEscape (strAt str 1) backslashCodes backslashValues\n            rest\n      convertStringEscapes orig (strSubstring str 1 0) \\rest . cont\n        strAdd\n          strAt str 0\n          rest"))(lazy(function(L_orig){return function(L_str){return function(L_cont){return resolve(L_eq)(L_str)(lazy(""))(function(){return resolve(L_cont)(L_str)})(function(){return resolve(L_eq)(function(){return resolve(L_strAt)(L_str)(lazy(0))})(lazy("\\"))(function(){return resolve(L_eq)(function(){return resolve(L_strLen)(L_str)})(lazy(1))(function(){return resolve(L_parseErr)(lazy("Error, backslash without character in string: "))(L_orig)})(function(){return resolve(L_convertStringEscapes)(L_orig)(function(){return resolve(L_strSubstring)(L_str)(lazy(2))(lazy(0))})(lazy(function(L_rest){return resolve(L_cont)(function(){return resolve(L_strAdd)(function(){return resolve(L_convertStringEscape)(function(){return resolve(L_strAt)(L_str)(lazy(1))})(L_backslashCodes)(L_backslashValues)})(L_rest)})}))})})(function(){return resolve(L_convertStringEscapes)(L_orig)(function(){return resolve(L_strSubstring)(L_str)(lazy(1))(lazy(0))})(lazy(function(L_rest){return resolve(L_cont)(function(){return resolve(L_strAdd)(function(){return resolve(L_strAt)(L_str)(lazy(0))})(L_rest)})}))})})}}})));
runMonad(resolve(L_define)(lazy("parseString"))(lazy(2))(lazy("parseString str cont =\n  neq (strAt str 0) (strAt str -1) (parseErr \"Badly terminated string: \" str)\n    convertStringEscapes str (strSubstring str 1 -1) cont"))(lazy(function(L_str){return function(L_cont){return resolve(L_neq)(function(){return resolve(L_strAt)(L_str)(lazy(0))})(function(){return resolve(L_strAt)(L_str)(lazy(-1))})(function(){return resolve(L_parseErr)(lazy("Badly terminated string: "))(L_str)})(function(){return resolve(L_convertStringEscapes)(L_str)(function(){return resolve(L_strSubstring)(L_str)(lazy(1))(lazy(-1))})(L_cont)})}})));
runMonad(resolve(L_define)(lazy("createLitOrRef"))(lazy(2))(lazy("createLitOrRef tok names =\n  contains names tok\n    ref tok\n    or (strStartsWith tok '\\\"') (strStartsWith tok \"'\")\n      parseString tok \\str . lit str\n      strStartsWith tok '.'\n        jsonParse (strCat (cons '0' (cons tok nil))) (\\err . ref tok) (\\item . lit item)\n        or (and (>= (strAt tok 0) '0') (<= (strAt tok 0) '9')) (strStartsWith tok '-')\n          jsonParse tok (\\err . ref tok) (\\item . lit item)\n          ref tok"))(lazy(function(L_tok){return function(L_names){return resolve(L_contains)(L_names)(L_tok)(function(){return resolve(L_ref)(L_tok)})(function(){return resolve(L_or)(function(){return resolve(L_strStartsWith)(L_tok)(lazy("\""))})(function(){return resolve(L_strStartsWith)(L_tok)(lazy("'"))})(function(){return resolve(L_parseString)(L_tok)(lazy(function(L_str){return resolve(L_lit)(L_str)}))})(function(){return resolve(L_strStartsWith)(L_tok)(lazy("."))(function(){return resolve(L_jsonParse)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("0"))(function(){return resolve(L_cons)(L_tok)(L_nil)})})})(lazy(function(L_err){return resolve(L_ref)(L_tok)}))(lazy(function(L_item){return resolve(L_lit)(L_item)}))})(function(){return resolve(L_or)(function(){return resolve(L_and)(function(){return resolve(L_$z$p)(function(){return resolve(L_strAt)(L_tok)(lazy(0))})(lazy("0"))})(function(){return resolve(L_$y$p)(function(){return resolve(L_strAt)(L_tok)(lazy(0))})(lazy("9"))})})(function(){return resolve(L_strStartsWith)(L_tok)(lazy("-"))})(function(){return resolve(L_jsonParse)(L_tok)(lazy(function(L_err){return resolve(L_ref)(L_tok)}))(lazy(function(L_item){return resolve(L_lit)(L_item)}))})(function(){return resolve(L_ref)(L_tok)})})})})}})));
runMonad(resolve(L_define)(lazy("createLambda"))(lazy(3))(lazy("createLambda start list names = \\\\\n  err = parseErr \"Lambda needs a variable name, a dot, and a body \" (loc start)\n  .\n  withCons list err \\name rest .\n    withToken name err \\n p .\n      withCons rest err \\dot body .\n        # are these partial applications too hard to read?\n        isTokenString dot '.'\n          ifNotErr (createAst body (cons n names)) \\bodyAst . lambda n bodyAst\n          ifNotErr (createLambda start rest (cons n names)) \\bodyAst . lambda n bodyAst"))(lazy(function(L_start){return function(L_list){return function(L_names){return (function(){

var L_err;

L_err = function(){return resolve(L_parseErr)(lazy("Lambda needs a variable name, a dot, and a body "))(function(){return resolve(L_loc)(L_start)})};
return resolve(L_withCons)(L_list)(L_err)(lazy(function(L_name){return function(L_rest){return resolve(L_withToken)(L_name)(L_err)(lazy(function(L_n){return function(L_p){return resolve(L_withCons)(L_rest)(L_err)(lazy(function(L_dot){return function(L_body){return resolve(L_isTokenString)(L_dot)(lazy("."))(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_body)(function(){return resolve(L_cons)(L_n)(L_names)})})(lazy(function(L_bodyAst){return resolve(L_lambda)(L_n)(L_bodyAst)}))})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createLambda)(L_start)(L_rest)(function(){return resolve(L_cons)(L_n)(L_names)})})(lazy(function(L_bodyAst){return resolve(L_lambda)(L_n)(L_bodyAst)}))})}}))}}))}}))})()}}})));
runMonad(resolve(L_define)(lazy("createAnno"))(lazy(3))(lazy("createAnno start list names =\n  withCons list (parseErr \"No annotation name or data in annotation \" (loc start)) \\name rest .\n    withCons rest (parseErr \"No data for annotation \" (loc start)) \\data rest . \\\\\n      finish data body = ifNotErr (createAst body names) \\bodyAst .\n        cleanTokens start name \\name .\n          cleanTokens start data \\data .\n            anno name data bodyAst\n      .\n      isTokenString data '.'\n        finish nil rest\n        withStripped data \\data .\n          withCons rest (parseErr \"No body for annotation \" (loc start)) \\dot body .\n            isTokenString dot '.'\n              finish data body\n              parseErr \"Annotation expects dot after name and data \" (loc start)"))(lazy(function(L_start){return function(L_list){return function(L_names){return resolve(L_withCons)(L_list)(function(){return resolve(L_parseErr)(lazy("No annotation name or data in annotation "))(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_name){return function(L_rest){return resolve(L_withCons)(L_rest)(function(){return resolve(L_parseErr)(lazy("No data for annotation "))(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_data){return function(L_rest_0){return (function(){

var L_finish;

L_finish = lazy(function(L_data_1){return function(L_body){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_body)(L_names)})(lazy(function(L_bodyAst){return resolve(L_cleanTokens)(L_start)(L_name)(lazy(function(L_name_2){return resolve(L_cleanTokens)(L_start)(L_data_1)(lazy(function(L_data_3){return resolve(L_anno)(L_name_2)(L_data_3)(L_bodyAst)}))}))}))}});
return resolve(L_isTokenString)(L_data)(lazy("."))(function(){return resolve(L_finish)(L_nil)(L_rest_0)})(function(){return resolve(L_withStripped)(L_data)(lazy(function(L_data_1){return resolve(L_withCons)(L_rest_0)(function(){return resolve(L_parseErr)(lazy("No body for annotation "))(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_dot){return function(L_body){return resolve(L_isTokenString)(L_dot)(lazy("."))(function(){return resolve(L_finish)(L_data_1)(L_body)})(function(){return resolve(L_parseErr)(lazy("Annotation expects dot after name and data "))(function(){return resolve(L_loc)(L_start)})})}}))}))})})()}}))}}))}}})));
runMonad(resolve(L_define)(lazy("bodyStructPat"))(lazy(0))(lazy("bodyStructPat = regexp '\\\\|\\\\\\\\|\\\\@'"))(function(){return resolve(L_regexp)(lazy("\\|\\\\|\\@"))}));
runMonad(resolve(L_define)(lazy("createApply"))(lazy(2))(lazy("createApply inList names = withStripped inList \\list .\n  withCons list (parseErr \"Funcion apply expecting a non-empty list \" (loc inList)) \\h t .\n    ifNotErr (createAst h names) \\func . chainApply func t names"))(lazy(function(L_inList){return function(L_names){return resolve(L_withStripped)(L_inList)(lazy(function(L_list){return resolve(L_withCons)(L_list)(function(){return resolve(L_parseErr)(lazy("Funcion apply expecting a non-empty list "))(function(){return resolve(L_loc)(L_inList)})})(lazy(function(L_h){return function(L_t){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_h)(L_names)})(lazy(function(L_func){return resolve(L_chainApply)(L_func)(L_t)(L_names)}))}}))}))}})));
runMonad(resolve(L_define)(lazy("blockStarts"))(lazy(0))(lazy("blockStarts = cons '\\\\' (cons '\\\\\\\\' (cons '\\\\@' nil))"))(function(){return resolve(L_cons)(lazy("\\"))(function(){return resolve(L_cons)(lazy("\\\\"))(function(){return resolve(L_cons)(lazy("\\@"))(L_nil)})})}));
runMonad(resolve(L_define)(lazy("chainApply"))(lazy(3))(lazy("chainApply func list names = withCons list func \\argItem rest .\n  and (isToken argItem) (contains blockStarts (tokenString argItem))\n    ifNotErr (createAst list names) \\arg . apply func arg\n    ifNotErr (createAst argItem names) \\arg . chainApply (apply func arg) rest names"))(lazy(function(L_func){return function(L_list){return function(L_names){return resolve(L_withCons)(L_list)(L_func)(lazy(function(L_argItem){return function(L_rest){return resolve(L_and)(function(){return resolve(L_isToken)(L_argItem)})(function(){return resolve(L_contains)(L_blockStarts)(function(){return resolve(L_tokenString)(L_argItem)})})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_list)(L_names)})(lazy(function(L_arg){return resolve(L_apply)(L_func)(L_arg)}))})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_argItem)(L_names)})(lazy(function(L_arg){return resolve(L_chainApply)(function(){return resolve(L_apply)(L_func)(L_arg)})(L_rest)(L_names)}))})}}))}}})));
runMonad(resolve(L_define)(lazy("cleanTokens"))(lazy(3))(lazy("cleanTokens start toks cont = isToken toks\n  cont (tokenString toks)\n  withCons toks (cont toks) \\head tail .\n    cleanTokens start head \\head .\n      cleanTokens start tail \\tail .\n        cont (cons head tail)"))(lazy(function(L_start){return function(L_toks){return function(L_cont){return resolve(L_isToken)(L_toks)(function(){return resolve(L_cont)(function(){return resolve(L_tokenString)(L_toks)})})(function(){return resolve(L_withCons)(L_toks)(function(){return resolve(L_cont)(L_toks)})(lazy(function(L_head){return function(L_tail){return resolve(L_cleanTokens)(L_start)(L_head)(lazy(function(L_head_0){return resolve(L_cleanTokens)(L_start)(L_tail)(lazy(function(L_tail_1){return resolve(L_cont)(function(){return resolve(L_cons)(L_head_0)(L_tail_1)})}))}))}}))})}}})));
runMonad(resolve(L_define)(lazy("createLet"))(lazy(3))(lazy("createLet start list names = withCons list\n  parseErr \"No variable or body for let \" (loc start)\n  \\binding body . eq body nil (createAst binding name)\n    getLetNames start list names \\newNames .\n      createSublets start binding body newNames id"))(lazy(function(L_start){return function(L_list){return function(L_names){return resolve(L_withCons)(L_list)(function(){return resolve(L_parseErr)(lazy("No variable or body for let "))(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_binding){return function(L_body){return resolve(L_eq)(L_body)(L_nil)(function(){return resolve(L_createAst)(L_binding)(L_name)})(function(){return resolve(L_getLetNames)(L_start)(L_list)(L_names)(lazy(function(L_newNames){return resolve(L_createSublets)(L_start)(L_binding)(L_body)(L_newNames)(L_id)}))})}}))}}})));
runMonad(resolve(L_define)(lazy("getLetNames"))(lazy(4))(lazy("getLetNames start list names cont = \\\\\n  err = parseErr \"Let expected binding \" (loc start)\n  .\n  withCons list (cont names) \\binding body .\n    isTokenString binding '.' (cont names)\n      withParens binding err \\start end def .\n        withCons def err \\name rest .\n          withToken name err \\str pos .\n            getLetNames start body (cons str names) cont"))(lazy(function(L_start){return function(L_list){return function(L_names){return function(L_cont){return (function(){

var L_err;

L_err = function(){return resolve(L_parseErr)(lazy("Let expected binding "))(function(){return resolve(L_loc)(L_start)})};
return resolve(L_withCons)(L_list)(function(){return resolve(L_cont)(L_names)})(lazy(function(L_binding){return function(L_body){return resolve(L_isTokenString)(L_binding)(lazy("."))(function(){return resolve(L_cont)(L_names)})(function(){return resolve(L_withParens)(L_binding)(L_err)(lazy(function(L_start_0){return function(L_end){return function(L_def){return resolve(L_withCons)(L_def)(L_err)(lazy(function(L_name){return function(L_rest){return resolve(L_withToken)(L_name)(L_err)(lazy(function(L_str){return function(L_pos){return resolve(L_getLetNames)(L_start_0)(L_body)(function(){return resolve(L_cons)(L_str)(L_names)})(L_cont)}}))}}))}}}))})}}))})()}}}})));
runMonad(resolve(L_define)(lazy("createSublets"))(lazy(5))(lazy("createSublets start binding body names cont =\n  isTokenString binding '.' (ifNotErr (createAst body names) cont)\n    withCons body (parseErr \"Let expected a body \" (loc start)) \\bodyH bodyT .\n      getNameAndDef (parensStart binding) (parensContent binding) names \\name def .\n        createSublets start bodyH bodyT names \\bodyAst .\n          cont (let (tokenString name) def bodyAst)"))(lazy(function(L_start){return function(L_binding){return function(L_body){return function(L_names){return function(L_cont){return resolve(L_isTokenString)(L_binding)(lazy("."))(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_body)(L_names)})(L_cont)})(function(){return resolve(L_withCons)(L_body)(function(){return resolve(L_parseErr)(lazy("Let expected a body "))(function(){return resolve(L_loc)(L_start)})})(lazy(function(L_bodyH){return function(L_bodyT){return resolve(L_getNameAndDef)(function(){return resolve(L_parensStart)(L_binding)})(function(){return resolve(L_parensContent)(L_binding)})(L_names)(lazy(function(L_name){return function(L_def){return resolve(L_createSublets)(L_start)(L_bodyH)(L_bodyT)(L_names)(lazy(function(L_bodyAst){return resolve(L_cont)(function(){return resolve(L_let)(function(){return resolve(L_tokenString)(L_name)})(L_def)(L_bodyAst)})}))}}))}}))})}}}}})));
runMonad(resolve(L_define)(lazy("getNameAndDef"))(lazy(4))(lazy("getNameAndDef pos binding names cont =\n  withCons (tail binding) (parseErr \"Let expected binding at \" pos) \\snd sndT .\n    isTokenString snd '=' (ifNotErr (createAst sndT names) \\def . cont (head binding) def)\n      getLetLambda pos (tail binding) nil names \\lamb . cont (head binding) lamb"))(lazy(function(L_pos){return function(L_binding){return function(L_names){return function(L_cont){return resolve(L_withCons)(function(){return resolve(L_tail)(L_binding)})(function(){return resolve(L_parseErr)(lazy("Let expected binding at "))(L_pos)})(lazy(function(L_snd){return function(L_sndT){return resolve(L_isTokenString)(L_snd)(lazy("="))(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_sndT)(L_names)})(lazy(function(L_def){return resolve(L_cont)(function(){return resolve(L_head)(L_binding)})(L_def)}))})(function(){return resolve(L_getLetLambda)(L_pos)(function(){return resolve(L_tail)(L_binding)})(L_nil)(L_names)(lazy(function(L_lamb){return resolve(L_cont)(function(){return resolve(L_head)(L_binding)})(L_lamb)}))})}}))}}}})));
runMonad(resolve(L_define)(lazy("getLetLambda"))(lazy(5))(lazy("getLetLambda pos def args names cont =\n  withCons def (parseErr \"Let expected binding at \" pos) \\arg rest .\n    not (isToken arg) (parseErr \"Let expected binding at \" pos)\n      isTokenString arg '='\n        ifNotErr (createAst (cons (token '\\\\' pos) (append (reverse args) (cons (token '.' (position arg)) rest))) names) cont\n        getLetLambda pos rest (cons arg args) names cont"))(lazy(function(L_pos){return function(L_def){return function(L_args){return function(L_names){return function(L_cont){return resolve(L_withCons)(L_def)(function(){return resolve(L_parseErr)(lazy("Let expected binding at "))(L_pos)})(lazy(function(L_arg){return function(L_rest){return resolve(L_not)(function(){return resolve(L_isToken)(L_arg)})(function(){return resolve(L_parseErr)(lazy("Let expected binding at "))(L_pos)})(function(){return resolve(L_isTokenString)(L_arg)(lazy("="))(function(){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(function(){return resolve(L_cons)(function(){return resolve(L_token)(lazy("\\"))(L_pos)})(function(){return resolve(L_append)(function(){return resolve(L_reverse)(L_args)})(function(){return resolve(L_cons)(function(){return resolve(L_token)(lazy("."))(function(){return resolve(L_position)(L_arg)})})(L_rest)})})})(L_names)})(L_cont)})(function(){return resolve(L_getLetLambda)(L_pos)(L_rest)(function(){return resolve(L_cons)(L_arg)(L_args)})(L_names)(L_cont)})})}}))}}}}})));
runMonad(resolve(L_define)(lazy("scanLineG"))(lazy(5))(lazy("scanLineG str pat groups onDef onExpr = \\\\\n  toks = tokens str pat\n  groupToks = foldr (\\el value . el \\h t . cons h (cons t value)) (cons '=' blockStarts) groups\n  .\n  # check if it's a definition\n  find (\\tok . or (contains groupToks (tokenString tok)) (isCons (strMatch (tokenString tok) '^\\n'))) toks (\\item . isTokenString item '=') false\n    toks \\name rest . \\\\\n      parseIt func = \\\\\n        parsed = parseToks (checkSetDataType func rest name) groups\n        .\n        onDef (ifNotErr parsed \\list . createDef list name (arity rest 0) str)\n      .\n      isTokenString (head rest) '='\n        isTokenString (head (tail rest)) '\\\\'\n          parseIt (setTypeAnno (tail rest) (tokenString name))\n          parseIt (tail rest)\n        transformDef name rest \\def .\n          parseIt (cons (token '\\\\' (- (position (head rest)) 1)) def)\n    ifNotErr (parseToks toks groups) \\list . onExpr list"))(lazy(function(L_str){return function(L_pat){return function(L_groups){return function(L_onDef){return function(L_onExpr){return (function(){

var L_groupToks, L_toks;

L_groupToks = function(){return resolve(L_foldr)(lazy(function(L_el){return function(L_value){return resolve(L_el)(lazy(function(L_h){return function(L_t){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(L_t)(L_value)})}}))}}))(function(){return resolve(L_cons)(lazy("="))(L_blockStarts)})(L_groups)};

L_toks = function(){return resolve(L_tokens)(L_str)(L_pat)};
return resolve(L_find)(lazy(function(L_tok){return resolve(L_or)(function(){return resolve(L_contains)(L_groupToks)(function(){return resolve(L_tokenString)(L_tok)})})(function(){return resolve(L_isCons)(function(){return resolve(L_strMatch)(function(){return resolve(L_tokenString)(L_tok)})(lazy("^\n"))})})}))(L_toks)(lazy(function(L_item){return resolve(L_isTokenString)(L_item)(lazy("="))}))(L_false)(function(){return resolve(L_toks)(lazy(function(L_name){return function(L_rest){return (function(){

var L_parseIt;

L_parseIt = lazy(function(L_func){return (function(){

var L_parsed;

L_parsed = function(){return resolve(L_parseToks)(function(){return resolve(L_checkSetDataType)(L_func)(L_rest)(L_name)})(L_groups)};
return resolve(L_onDef)(function(){return resolve(L_ifNotErr)(L_parsed)(lazy(function(L_list){return resolve(L_createDef)(L_list)(L_name)(function(){return resolve(L_arity)(L_rest)(lazy(0))})(L_str)}))})})()});
return resolve(L_isTokenString)(function(){return resolve(L_head)(L_rest)})(lazy("="))(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_rest)})})(lazy("\\"))(function(){return resolve(L_parseIt)(function(){return resolve(L_setTypeAnno)(function(){return resolve(L_tail)(L_rest)})(function(){return resolve(L_tokenString)(L_name)})})})(function(){return resolve(L_parseIt)(function(){return resolve(L_tail)(L_rest)})})})(function(){return resolve(L_transformDef)(L_name)(L_rest)(lazy(function(L_def){return resolve(L_parseIt)(function(){return resolve(L_cons)(function(){return resolve(L_token)(lazy("\\"))(function(){return resolve(L_$_)(function(){return resolve(L_position)(function(){return resolve(L_head)(L_rest)})})(lazy(1))})})(L_def)})}))})})()}}))})(function(){return resolve(L_ifNotErr)(function(){return resolve(L_parseToks)(L_toks)(L_groups)})(lazy(function(L_list){return resolve(L_onExpr)(L_list)}))})})()}}}}})));
runMonad(resolve(L_define)(lazy("parseLineG"))(lazy(6))(lazy("parseLineG str pat names groups onDef onExpr = \\\\\n  astCallback cb = \\list . ifNotErr (createAst list names) \\ast . cb ast\n  .\n  scanLineG str pat groups (astCallback onDef) (astCallback onExpr)"))(lazy(function(L_str){return function(L_pat){return function(L_names){return function(L_groups){return function(L_onDef){return function(L_onExpr){return (function(){

var L_astCallback;

L_astCallback = lazy(function(L_cb){return function(L_list){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_list)(L_names)})(lazy(function(L_ast){return resolve(L_cb)(L_ast)}))}});
return resolve(L_scanLineG)(L_str)(L_pat)(L_groups)(function(){return resolve(L_astCallback)(L_onDef)})(function(){return resolve(L_astCallback)(L_onExpr)})})()}}}}}})));
runMonad(resolve(L_define)(lazy("transformDef"))(lazy(3))(lazy("transformDef name toks cont = withCons toks (parseErr \"Bad definition, expecting tokens\" (loc name)) \\h t .\n  isTokenString h '='\n    isTokenString (head t) '\\\\'\n      cont (cons (token '.' (position h)) (setTypeAnno t (tokenString name)))\n      cont (cons (token '.' (position h)) t)\n    transformDef name t \\list . cont (cons h list)"))(lazy(function(L_name){return function(L_toks){return function(L_cont){return resolve(L_withCons)(L_toks)(function(){return resolve(L_parseErr)(lazy("Bad definition, expecting tokens"))(function(){return resolve(L_loc)(L_name)})})(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)(lazy("="))(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_t)})(lazy("\\"))(function(){return resolve(L_cont)(function(){return resolve(L_cons)(function(){return resolve(L_token)(lazy("."))(function(){return resolve(L_position)(L_h)})})(function(){return resolve(L_setTypeAnno)(L_t)(function(){return resolve(L_tokenString)(L_name)})})})})(function(){return resolve(L_cont)(function(){return resolve(L_cons)(function(){return resolve(L_token)(lazy("."))(function(){return resolve(L_position)(L_h)})})(L_t)})})})(function(){return resolve(L_transformDef)(L_name)(L_t)(lazy(function(L_list){return resolve(L_cont)(function(){return resolve(L_cons)(L_h)(L_list)})}))})}}))}}})));
runMonad(resolve(L_define)(lazy("setTypeAnno"))(lazy(2))(lazy("setTypeAnno toks name = \\\\\n  tok = \\str . token str (position toks)\n  .\n  cons (tok '\\\\@') (cons (tok 'type') (cons (tok name) (cons (tok '.') toks)))"))(lazy(function(L_toks){return function(L_name){return (function(){

var L_tok;

L_tok = lazy(function(L_str){return resolve(L_token)(L_str)(function(){return resolve(L_position)(L_toks)})});
return resolve(L_cons)(function(){return resolve(L_tok)(lazy("\\@"))})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("type"))})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(L_name)})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("."))})(L_toks)})})})})()}})));
runMonad(resolve(L_define)(lazy("setDataTypeAnno"))(lazy(2))(lazy("setDataTypeAnno toks name = \\\\\n  tok = \\str . token str (position toks)\n  .\n  cons (tok '\\\\@') (cons (tok 'dataType') (cons (tok (tokenString name)) (cons (tok '.') toks)))"))(lazy(function(L_toks){return function(L_name){return (function(){

var L_tok;

L_tok = lazy(function(L_str){return resolve(L_token)(L_str)(function(){return resolve(L_position)(L_toks)})});
return resolve(L_cons)(function(){return resolve(L_tok)(lazy("\\@"))})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("dataType"))})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(function(){return resolve(L_tokenString)(L_name)})})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("."))})(L_toks)})})})})()}})));
runMonad(resolve(L_define)(lazy("createDef"))(lazy(4))(lazy("createDef def name arity src = \\\\\n  tok str = token str (position def)\n  .\n  jsonStringify (tokenString name) (\\err . parseErr (strCat (cons \"Bad function name \" (cons (loc name) nil))) err) \\nameStr .\n    jsonStringify src (\\err . parseErr (strCat (cons \"Bad source \" (cons (loc name) nil))) err) \\srcStr .\n      #cons (tok 'define') (cons (tok nameStr) (cons (tok (strString arity)) (cons (tok srcStr) (cons def nil))))\n      cons (tok '\\\\@') (cons (cons (tok 'definition') (cons (tok name) nil)) (cons (tok '.') (cons (tok 'define') (cons (tok nameStr) (cons (tok (strString arity)) (cons (tok srcStr) (cons def nil)))))))"))(lazy(function(L_def){return function(L_name){return function(L_arity){return function(L_src){return (function(){

var L_tok;

L_tok = lazy(function(L_str){return resolve(L_token)(L_str)(function(){return resolve(L_position)(L_def)})});
return resolve(L_jsonStringify)(function(){return resolve(L_tokenString)(L_name)})(lazy(function(L_err){return resolve(L_parseErr)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("Bad function name "))(function(){return resolve(L_cons)(function(){return resolve(L_loc)(L_name)})(L_nil)})})})(L_err)}))(lazy(function(L_nameStr){return resolve(L_jsonStringify)(L_src)(lazy(function(L_err){return resolve(L_parseErr)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("Bad source "))(function(){return resolve(L_cons)(function(){return resolve(L_loc)(L_name)})(L_nil)})})})(L_err)}))(lazy(function(L_srcStr){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("\\@"))})(function(){return resolve(L_cons)(function(){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("definition"))})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(L_name)})(L_nil)})})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("."))})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(lazy("define"))})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(L_nameStr)})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(function(){return resolve(L_strString)(L_arity)})})(function(){return resolve(L_cons)(function(){return resolve(L_tok)(L_srcStr)})(function(){return resolve(L_cons)(L_def)(L_nil)})})})})})})})}))}))})()}}}})));
runMonad(resolve(L_define)(lazy("checkSetDataType"))(lazy(3))(lazy("checkSetDataType toks curToks name = withCons curToks toks \\h t .\n  isTokenString h '='\n    isTokenString (head t) '\\\\'\n      setDataTypeAnno toks name\n      toks\n    checkSetDataType toks t name"))(lazy(function(L_toks){return function(L_curToks){return function(L_name){return resolve(L_withCons)(L_curToks)(L_toks)(lazy(function(L_h){return function(L_t){return resolve(L_isTokenString)(L_h)(lazy("="))(function(){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_t)})(lazy("\\"))(function(){return resolve(L_setDataTypeAnno)(L_toks)(L_name)})(L_toks)})(function(){return resolve(L_checkSetDataType)(L_toks)(L_t)(L_name)})}}))}}})));
runMonad(resolve(L_define)(lazy("arity"))(lazy(2))(lazy("arity toks n = isTokenString (head toks) '=' n (arity (tail toks) (+ n 1))"))(lazy(function(L_toks){return function(L_n){return resolve(L_isTokenString)(function(){return resolve(L_head)(L_toks)})(lazy("="))(L_n)(function(){return resolve(L_arity)(function(){return resolve(L_tail)(L_toks)})(function(){return resolve(L_$o)(L_n)(lazy(1))})})}})));
runMonad(resolve(L_define)(lazy("tokListStr"))(lazy(1))(lazy("tokListStr toks = jsonStringify (join (map (\\t . tokenString t) toks) ' ')"))(lazy(function(L_toks){return resolve(L_jsonStringify)(function(){return resolve(L_join)(function(){return resolve(L_map)(lazy(function(L_t){return resolve(L_tokenString)(L_t)}))(L_toks)})(lazy(" "))})})));
runMonad(resolve(L_define)(lazy("linePat"))(lazy(0))(lazy("linePat = regexp '\\\\r?\\\\n(?=[^ ]|$)'"))(function(){return resolve(L_regexp)(lazy("\\r?\\n(?=[^ ]|$)"))}));
runMonad(resolve(L_define)(lazy("emptyLinePat"))(lazy(0))(lazy("emptyLinePat = regexp '(^[ \\\\i]*\\\\#.*|^[ \\\\i]*$|^\\\\r?\\\\n[ \\\\i]*$)'"))(function(){return resolve(L_regexp)(lazy("(^[ \\i]*\\#.*|^[ \\i]*$|^\\r?\\n[ \\i]*$)"))}));
runMonad(resolve(L_define)(lazy("lineScrub"))(lazy(0))(lazy("lineScrub = regexpFlags '\\\\r\\\\n' 'g'"))(function(){return resolve(L_regexpFlags)(lazy("\\r\\n"))(lazy("g"))}));
runMonad(resolve(L_define)(lazy("linesForFile"))(lazy(1))(lazy("linesForFile text = filter\n  \\line . isNil (strMatch line emptyLinePat)\n  strSplit (strReplace text lineScrub '\\n') linePat"))(lazy(function(L_text){return resolve(L_filter)(lazy(function(L_line){return resolve(L_isNil)(function(){return resolve(L_strMatch)(L_line)(L_emptyLinePat)})}))(function(){return resolve(L_strSplit)(function(){return resolve(L_strReplace)(L_text)(L_lineScrub)(lazy("\n"))})(L_linePat)})})));
runMonad(resolve(L_define)(lazy("defPat"))(lazy(0))(lazy("defPat = regexp '^[^ =]+.* =( |$)'"))(function(){return resolve(L_regexp)(lazy("^[^ =]+.* =( |$)"))}));
runMonad(resolve(L_define)(lazy("unanchoredDefPat"))(lazy(0))(lazy("unanchoredDefPat = regexp '^((?:\\\\s*\\\\n|#[^\\\\n]*\\\\n)*)([^=\\\\n]*)(=\\\\([^=]+=|=)?'"))(function(){return resolve(L_regexp)(lazy("^((?:\\s*\\n|#[^\\n]*\\n)*)([^=\\n]*)(=\\([^=]+=|=)?"))}));
runMonad(resolve(L_define)(lazy("namesForLines"))(lazy(1))(lazy("namesForLines lines = foldl\n  \\result line . \\\\\n    m = strMatch line defPat\n    .\n    isNil m result (cons (head (tail m)) result)\n  nil\n  lines"))(lazy(function(L_lines){return resolve(L_foldl)(lazy(function(L_result){return function(L_line){return (function(){

var L_m;

L_m = function(){return resolve(L_strMatch)(L_line)(L_defPat)};
return resolve(L_isNil)(L_m)(L_result)(function(){return resolve(L_cons)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_m)})})(L_result)})})()}}))(L_nil)(L_lines)})));
runMonad(resolve(L_define)(lazy("runParseFilters"))(lazy(2))(lazy("runParseFilters filters line = filters\n  \\h t D . bind (h line) \\filtered . runParseFilters t filtered\n  line"))(lazy(function(L_filters){return function(L_line){return resolve(L_filters)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_bind)(function(){return resolve(L_h)(L_line)})(lazy(function(L_filtered){return resolve(L_runParseFilters)(L_t)(L_filtered)}))}}}))(L_line)}})));
runMonad(resolve(L_define)(lazy("isBlockStart"))(lazy(1))(lazy("isBlockStart tok = and\n  or (isToken tok) (isString tok)\n  contains blockStarts (strTokenString tok)"))(lazy(function(L_tok){return resolve(L_and)(function(){return resolve(L_or)(function(){return resolve(L_isToken)(L_tok)})(function(){return resolve(L_isString)(L_tok)})})(function(){return resolve(L_contains)(L_blockStarts)(function(){return resolve(L_strTokenString)(L_tok)})})})));
runMonad(resolve(L_define)(lazy("macroSub"))(lazy(2))(lazy("macroSub macs expr = postProcessMacro -1 -1 (baseMacroSub macs expr)"))(lazy(function(L_macs){return function(L_expr){return resolve(L_postProcessMacro)(lazy(-1))(lazy(-1))(function(){return resolve(L_baseMacroSub)(L_macs)(L_expr)})}})));
runMonad(resolve(L_define)(lazy("consifyMacroValue"))(lazy(1))(lazy("consifyMacroValue value = isCons value value (cons value nil)"))(lazy(function(L_value){return resolve(L_isCons)(L_value)(L_value)(function(){return resolve(L_cons)(L_value)(L_nil)})})));
runMonad(resolve(L_define)(lazy("baseMacroSub"))(lazy(2))(lazy("baseMacroSub macs expr = isToken expr\n  expr\n  isParens expr\n    expr \\start end content . \\\\\n      result = baseMacroSub macs content\n      .\n      isToken result result (parens start end result)\n    withCons expr expr \\h t .\n      isBlockStart h\n        cons h\n          isTokenString h '\\\\\\\\'\n            macroSubLet macs t\n            macroSubBody '.' macs t\n        withToken h\n          \\\\\n            subH = baseMacroSub macs h\n            .\n            withToken subH\n              cons subH (map (baseMacroSub macs) t)\n              \\tok pos . baseMacroSub macs (cons subH t)\n          \\tok pos . assoc tok macs\n            \\def . baseMacroSub macs (def t)\n            cons h (map (baseMacroSub macs) t)"))(lazy(function(L_macs){return function(L_expr){return resolve(L_isToken)(L_expr)(L_expr)(function(){return resolve(L_isParens)(L_expr)(function(){return resolve(L_expr)(lazy(function(L_start){return function(L_end){return function(L_content){return (function(){

var L_result;

L_result = function(){return resolve(L_baseMacroSub)(L_macs)(L_content)};
return resolve(L_isToken)(L_result)(L_result)(function(){return resolve(L_parens)(L_start)(L_end)(L_result)})})()}}}))})(function(){return resolve(L_withCons)(L_expr)(L_expr)(lazy(function(L_h){return function(L_t){return resolve(L_isBlockStart)(L_h)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_isTokenString)(L_h)(lazy("\\\\"))(function(){return resolve(L_macroSubLet)(L_macs)(L_t)})(function(){return resolve(L_macroSubBody)(lazy("."))(L_macs)(L_t)})})})(function(){return resolve(L_withToken)(L_h)(function(){
var L_subH;

L_subH = function(){return resolve(L_baseMacroSub)(L_macs)(L_h)};
return resolve(L_withToken)(L_subH)(function(){return resolve(L_cons)(L_subH)(function(){return resolve(L_map)(function(){return resolve(L_baseMacroSub)(L_macs)})(L_t)})})(lazy(function(L_tok){return function(L_pos){return resolve(L_baseMacroSub)(L_macs)(function(){return resolve(L_cons)(L_subH)(L_t)})}}))})(lazy(function(L_tok){return function(L_pos){return resolve(L_assoc)(L_tok)(L_macs)(lazy(function(L_def){return resolve(L_baseMacroSub)(L_macs)(function(){return resolve(L_def)(L_t)})}))(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_map)(function(){return resolve(L_baseMacroSub)(L_macs)})(L_t)})})}}))})}}))})})}})));
runMonad(resolve(L_define)(lazy("macroSubLet"))(lazy(2))(lazy("macroSubLet macs list = list\n  \\h t D . isTokenString h '.'\n    cons h (baseMacroSub macs t)\n    cons (setParens h \\content . macroSubBody '=' macs content) (macroSubLet macs t)\n  # Don't bother with parse errors at this point -- ast generator will detect them\n  nil"))(lazy(function(L_macs){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_isTokenString)(L_h)(lazy("."))(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_baseMacroSub)(L_macs)(L_t)})})(function(){return resolve(L_cons)(function(){return resolve(L_setParens)(L_h)(lazy(function(L_content){return resolve(L_macroSubBody)(lazy("="))(L_macs)(L_content)}))})(function(){return resolve(L_macroSubLet)(L_macs)(L_t)})})}}}))(L_nil)}})));
runMonad(resolve(L_define)(lazy("macroSubBody"))(lazy(3))(lazy("macroSubBody char macs list = list\n  \\h t D . cons h\n    isTokenString h char baseMacroSub (macroSubBody char)\n      macs\n      t\n  nil"))(lazy(function(L_char){return function(L_macs){return function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_cons)(L_h)(function(){return resolve(L_isTokenString)(L_h)(L_char)(L_baseMacroSub)(function(){return resolve(L_macroSubBody)(L_char)})(L_macs)(L_t)})}}}))(L_nil)}}})));
runMonad(resolve(L_define)(lazy("postProcessMacro"))(lazy(3))(lazy("postProcessMacro before after expr = isString expr\n  token expr (eq after -1 before after)\n  isParens expr\n    expr \\start end contents . parens start end (postProcessMacro start end contents)\n    isCons expr\n      expr \\h t .\n        isToken h\n          cons h (postProcessMacro (+ 1 (+ (tokenPos h) (strLen (tokenString h)))) -1 t)\n          \\\\\n            posStart = position h\n            posEnd = position t\n            t2 = postProcessMacro -1 after t\n            h2 = postProcessMacro before -1 h\n            .\n            eq posStart -1\n              cons (postProcessMacro before (position t2) h) t2\n              cons h2 (postProcessMacro (+ 1 (lexEnd h2)) after t)\n      isNumber expr\n        token (strString expr) (eq after -1 before after)\n        expr"))(lazy(function(L_before){return function(L_after){return function(L_expr){return resolve(L_isString)(L_expr)(function(){return resolve(L_token)(L_expr)(function(){return resolve(L_eq)(L_after)(lazy(-1))(L_before)(L_after)})})(function(){return resolve(L_isParens)(L_expr)(function(){return resolve(L_expr)(lazy(function(L_start){return function(L_end){return function(L_contents){return resolve(L_parens)(L_start)(L_end)(function(){return resolve(L_postProcessMacro)(L_start)(L_end)(L_contents)})}}}))})(function(){return resolve(L_isCons)(L_expr)(function(){return resolve(L_expr)(lazy(function(L_h){return function(L_t){return resolve(L_isToken)(L_h)(function(){return resolve(L_cons)(L_h)(function(){return resolve(L_postProcessMacro)(function(){return resolve(L_$o)(lazy(1))(function(){return resolve(L_$o)(function(){return resolve(L_tokenPos)(L_h)})(function(){return resolve(L_strLen)(function(){return resolve(L_tokenString)(L_h)})})})})(lazy(-1))(L_t)})})(function(){
var L_h2, L_t2, L_posEnd, L_posStart;

L_h2 = function(){return resolve(L_postProcessMacro)(L_before)(lazy(-1))(L_h)};

L_t2 = function(){return resolve(L_postProcessMacro)(lazy(-1))(L_after)(L_t)};

L_posEnd = function(){return resolve(L_position)(L_t)};

L_posStart = function(){return resolve(L_position)(L_h)};
return resolve(L_eq)(L_posStart)(lazy(-1))(function(){return resolve(L_cons)(function(){return resolve(L_postProcessMacro)(L_before)(function(){return resolve(L_position)(L_t2)})(L_h)})(L_t2)})(function(){return resolve(L_cons)(L_h2)(function(){return resolve(L_postProcessMacro)(function(){return resolve(L_$o)(lazy(1))(function(){return resolve(L_lexEnd)(L_h2)})})(L_after)(L_t)})})})}}))})(function(){return resolve(L_isNumber)(L_expr)(function(){return resolve(L_token)(function(){return resolve(L_strString)(L_expr)})(function(){return resolve(L_eq)(L_after)(lazy(-1))(L_before)(L_after)})})(L_expr)})})})}}})));
runMonad(resolve(L_define)(lazy("defMacro"))(lazy(2))(lazy("defMacro name def = bind (getValue 'macroDefs') \\macs . setValue 'macroDefs' (acons name def macs)"))(lazy(function(L_name){return function(L_def){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("macroDefs"))})(lazy(function(L_macs){return resolve(L_setValue)(lazy("macroDefs"))(function(){return resolve(L_acons)(L_name)(L_def)(L_macs)})}))}})));
runMonad(resolve(L_define)(lazy("delimiterListPrefix"))(lazy(0))(lazy("delimiterListPrefix = \"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"|'(?:\\\\\\\\.|[^'])*'|\\\\n *|#.*| +\""))(lazy("\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\n *|#.*| +")));
runMonad(resolve(L_define)(lazy("regexpEscapePat"))(lazy(0))(lazy("regexpEscapePat = regexpFlags '[\\\\-\\\\[\\\\]/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\\\^\\\\$\\\\|]' 'g'"))(function(){return resolve(L_regexpFlags)(lazy("[\\-\\[\\]/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]"))(lazy("g"))}));
runMonad(resolve(L_define)(lazy("addToken"))(lazy(1))(lazy("addToken del = bind (getValue 'tokenList')\n  \\dels . contains dels del\n    false\n    \\\\\n      newDels = insertSorted (\\a b . > (strLen a) (strLen b)) del dels\n      .\n      bind (setValue 'tokenList' newDels)\n        \\_ . computeTokenPat newDels"))(lazy(function(L_del){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenList"))})(lazy(function(L_dels){return resolve(L_contains)(L_dels)(L_del)(L_false)(function(){
var L_newDels;

L_newDels = function(){return resolve(L_insertSorted)(lazy(function(L_a){return function(L_b){return resolve(L_$z)(function(){return resolve(L_strLen)(L_a)})(function(){return resolve(L_strLen)(L_b)})}}))(L_del)(L_dels)};
return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("tokenList"))(L_newDels)})(lazy(function(L__){return resolve(L_computeTokenPat)(L_newDels)}))})}))})));
runMonad(resolve(L_define)(lazy("computeTokenPat"))(lazy(1))(lazy("computeTokenPat dels = \\\\\n  delPats = map (\\item . strReplace item regexpEscapePat \"\\\\$&\") dels\n  newPat = strCat (cons '(' (cons (join (cons delimiterListPrefix delPats) '|') (cons ')' nil)))\n  .\n  setValue 'tokenPat' newPat"))(lazy(function(L_dels){return (function(){

var L_newPat, L_delPats;

L_newPat = function(){return resolve(L_strCat)(function(){return resolve(L_cons)(lazy("("))(function(){return resolve(L_cons)(function(){return resolve(L_join)(function(){return resolve(L_cons)(L_delimiterListPrefix)(L_delPats)})(lazy("|"))})(function(){return resolve(L_cons)(lazy(")"))(L_nil)})})})};

L_delPats = function(){return resolve(L_map)(lazy(function(L_item){return resolve(L_strReplace)(L_item)(L_regexpEscapePat)(lazy("\\$&"))}))(L_dels)};
return resolve(L_setValue)(lazy("tokenPat"))(L_newPat)})()})));
runMonad(resolve(L_define)(lazy("addTokenGroup"))(lazy(2))(lazy("addTokenGroup open close = bind (addToken open)\n  \\_ . bind (addToken close)\n    \\_ . bind (getValue 'tokenGroups')\n      \\gr . setValue 'tokenGroups' (acons open close gr)"))(lazy(function(L_open){return function(L_close){return resolve(L_bind)(function(){return resolve(L_addToken)(L_open)})(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_addToken)(L_close)})(lazy(function(L___0){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenGroups"))})(lazy(function(L_gr){return resolve(L_setValue)(lazy("tokenGroups"))(function(){return resolve(L_acons)(L_open)(L_close)(L_gr)})}))}))}))}})));
runMonad(resolve(L_define)(lazy("parenGroups"))(lazy(0))(lazy("parenGroups = acons '(' ')' nil"))(function(){return resolve(L_acons)(lazy("("))(lazy(")"))(L_nil)}));
runMonad(resolve(L_define)(lazy("parse"))(lazy(2))(lazy("parse str pat = ifNotErr (parseIndent (token '\\n' 0) (tokens str pat) nil parenGroups) \\list . list \\h t . stripParens h"))(lazy(function(L_str){return function(L_pat){return resolve(L_ifNotErr)(function(){return resolve(L_parseIndent)(function(){return resolve(L_token)(lazy("\n"))(lazy(0))})(function(){return resolve(L_tokens)(L_str)(L_pat)})(L_nil)(L_parenGroups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_stripParens)(L_h)}}))}))}})));
runMonad(resolve(L_define)(lazy("parseG"))(lazy(3))(lazy("parseG str pat groups = ifNotErr (parseIndent (token '\\n' 0) (tokens str pat) nil groups) \\list . list \\h t . stripParens h"))(lazy(function(L_str){return function(L_pat){return function(L_groups){return resolve(L_ifNotErr)(function(){return resolve(L_parseIndent)(function(){return resolve(L_token)(lazy("\n"))(lazy(0))})(function(){return resolve(L_tokens)(L_str)(L_pat)})(L_nil)(L_groups)})(lazy(function(L_list){return resolve(L_list)(lazy(function(L_h){return function(L_t){return resolve(L_stripParens)(L_h)}}))}))}}})));
runMonad(resolve(L_define)(lazy("parseToAst"))(lazy(2))(lazy("parseToAst str pat = createAst (parse str pat) nil"))(lazy(function(L_str){return function(L_pat){return resolve(L_createAst)(function(){return resolve(L_parse)(L_str)(L_pat)})(L_nil)}})));
runMonad(resolve(L_define)(lazy("parseM"))(lazy(1))(lazy("parseM str =\n  bind (getValue 'tokenPat')\n    \\tokPat . bind (getValue 'tokenGroups')\n      \\groups . parseG str tokPat groups"))(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenPat"))})(lazy(function(L_tokPat){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenGroups"))})(lazy(function(L_groups){return resolve(L_parseG)(L_str)(L_tokPat)(L_groups)}))}))})));
runMonad(resolve(L_define)(lazy("scanLine"))(lazy(4))(lazy("scanLine str pat onDef onExpr = scanLineG str pat parenGroups onDef onExpr"))(lazy(function(L_str){return function(L_pat){return function(L_onDef){return function(L_onExpr){return resolve(L_scanLineG)(L_str)(L_pat)(L_parenGroups)(L_onDef)(L_onExpr)}}}})));
runMonad(resolve(L_define)(lazy("parseLine"))(lazy(5))(lazy("parseLine str pat names onDef onExpr = parseLineG str pat names parenGroups onDef onExpr"))(lazy(function(L_str){return function(L_pat){return function(L_names){return function(L_onDef){return function(L_onExpr){return resolve(L_parseLineG)(L_str)(L_pat)(L_names)(L_parenGroups)(L_onDef)(L_onExpr)}}}}})));
runMonad(resolve(L_define)(lazy("parseLineM"))(lazy(1))(lazy("parseLineM str = bind (getValue 'tokenPat')\n  \\tokPat . bind (getValue 'tokenGroups')\n    \\groups . parseLineG str tokPat nil groups id id"))(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenPat"))})(lazy(function(L_tokPat){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenGroups"))})(lazy(function(L_groups){return resolve(L_parseLineG)(L_str)(L_tokPat)(L_nil)(L_groups)(L_id)(L_id)}))}))})));
runMonad(resolve(L_define)(lazy("macroSubM"))(lazy(1))(lazy("macroSubM expr =\n  bind (getValue 'macroDefs')\n    \\macs . macroSub macs expr"))(lazy(function(L_expr){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("macroDefs"))})(lazy(function(L_macs){return resolve(L_macroSub)(L_macs)(L_expr)}))})));
runMonad(resolve(L_define)(lazy("macroParse"))(lazy(1))(lazy("macroParse str =\n  bind (parseM str)\n    \\ex . macroSubM ex"))(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_parseM)(L_str)})(lazy(function(L_ex){return resolve(L_macroSubM)(L_ex)}))})));
runMonad(resolve(L_define)(lazy("tokensM"))(lazy(1))(lazy("tokensM str =\n  bind (getValue 'tokenPat')\n    \\delimiterPat . tokens str delimiterPat"))(lazy(function(L_str){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenPat"))})(lazy(function(L_delimiterPat){return resolve(L_tokens)(L_str)(L_delimiterPat)}))})));
runMonad(resolve(L_define)(lazy("parseLines"))(lazy(2))(lazy("parseLines lines result = lines\n  \\h t D . bind (parseLineM h)\n    \\ast . parseLines t (cons ast result)\n  reverse result"))(lazy(function(L_lines){return function(L_result){return resolve(L_lines)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_bind)(function(){return resolve(L_parseLineM)(L_h)})(lazy(function(L_ast){return resolve(L_parseLines)(L_t)(function(){return resolve(L_cons)(L_ast)(L_result)})}))}}}))(function(){return resolve(L_reverse)(L_result)})}})));
runMonad(resolve(L_define)(lazy("parseFile"))(lazy(1))(lazy("parseFile text = parseLines (linesForFile text) nil"))(lazy(function(L_text){return resolve(L_parseLines)(function(){return resolve(L_linesForFile)(L_text)})(L_nil)})));
runMonad(resolve(L_define)(lazy("simpleScanLine"))(lazy(1))(lazy("simpleScanLine line = bind (getValue 'tokenPat')\n  \\tokenPat . bind (getValue 'tokenGroups')\n    \\groups . scanLineG line tokenPat groups id id"))(lazy(function(L_line){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenPat"))})(lazy(function(L_tokenPat){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenGroups"))})(lazy(function(L_groups){return resolve(L_scanLineG)(L_line)(L_tokenPat)(L_groups)(L_id)(L_id)}))}))})));
runMonad(resolve(L_define)(lazy("scanLineM"))(lazy(1))(lazy("scanLineM line = bind (getValue 'tokenPat')\n  \\tokenPat . bind (getValue 'tokenGroups')\n    \\groups . bind (getValue 'parseFilters')\n      \\filters . bind (getValue 'macroDefs')\n        \\macros . bind (runParseFilters filters (scanLineG line tokenPat groups id id))\n          \\scanned . macroSub macros scanned"))(lazy(function(L_line){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenPat"))})(lazy(function(L_tokenPat){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenGroups"))})(lazy(function(L_groups){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("parseFilters"))})(lazy(function(L_filters){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("macroDefs"))})(lazy(function(L_macros){return resolve(L_bind)(function(){return resolve(L_runParseFilters)(L_filters)(function(){return resolve(L_scanLineG)(L_line)(L_tokenPat)(L_groups)(L_id)(L_id)})})(lazy(function(L_scanned){return resolve(L_macroSub)(L_macros)(L_scanned)}))}))}))}))}))})));
runMonad(resolve(L_define)(lazy("newParseLine"))(lazy(2))(lazy("newParseLine names line = bind (scanLineM line)\n  \\scanned . ifNotErr (createAst scanned names) \\ast . ast"))(lazy(function(L_names){return function(L_line){return resolve(L_bind)(function(){return resolve(L_scanLineM)(L_line)})(lazy(function(L_scanned){return resolve(L_ifNotErr)(function(){return resolve(L_createAst)(L_scanned)(L_names)})(lazy(function(L_ast){return resolve(L_ast)}))}))}})));
runMonad(resolve(L_define)(lazy("runLine"))(lazy(2))(lazy("runLine names line = bind (newParseLine names line)\n  \\ast . bind (runAst ast)\n    \\result . cons\n      ast\n      isParseErr result\n        left (parseErrMsg result)\n        right result"))(lazy(function(L_names){return function(L_line){return resolve(L_bind)(function(){return resolve(L_newParseLine)(L_names)(L_line)})(lazy(function(L_ast){return resolve(L_bind)(function(){return resolve(L_runAst)(L_ast)})(lazy(function(L_result){return resolve(L_cons)(L_ast)(function(){return resolve(L_isParseErr)(L_result)(function(){return resolve(L_left)(function(){return resolve(L_parseErrMsg)(L_result)})})(function(){return resolve(L_right)(L_result)})})}))}))}})));
runMonad(resolve(L_define)(lazy("runLines"))(lazy(2))(lazy("runLines names lines = lines\n  \\h t D . bind (runLine names h)\n    \\line . bind (runLines names t)\n      \\rest . cons line rest\n  nil"))(lazy(function(L_names){return function(L_lines){return resolve(L_lines)(lazy(function(L_h){return function(L_t){return function(L_D){return resolve(L_bind)(function(){return resolve(L_runLine)(L_names)(L_h)})(lazy(function(L_line){return resolve(L_bind)(function(){return resolve(L_runLines)(L_names)(L_t)})(lazy(function(L_rest){return resolve(L_cons)(L_line)(L_rest)}))}))}}}))(L_nil)}})));
runMonad(resolve(L_define)(lazy("runFile"))(lazy(1))(lazy("runFile text = \\\\\n  lines = linesForFile text\n  names = namesForLines lines\n  .\n  runLines names lines"))(lazy(function(L_text){return (function(){

var L_names, L_lines;

L_names = function(){return resolve(L_namesForLines)(L_lines)};

L_lines = function(){return resolve(L_linesForFile)(L_text)};
return resolve(L_runLines)(L_names)(L_lines)})()})));
runMonad(resolve(L_define)(lazy("baseLoad"))(lazy(1))(lazy("baseLoad file = bind (readFile file)\n  \\result . result\n    \\err . err\n    \\contents . bind (getValue 'activeTokenPacks')\n      \\activePacks . bind resetStdTokenPacks\n        \\_ . bind (runFile contents)\n          \\result . isNil activePacks\n            bind resetStdTokenPacks\n              \\_ . result\n            bind (resetTokenPacks activePacks)\n                \\_ . result"))(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_readFile)(L_file)})(lazy(function(L_result){return resolve(L_result)(lazy(function(L_err){return resolve(L_err)}))(lazy(function(L_contents){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("activeTokenPacks"))})(lazy(function(L_activePacks){return resolve(L_bind)(L_resetStdTokenPacks)(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_runFile)(L_contents)})(lazy(function(L_result_0){return resolve(L_isNil)(L_activePacks)(function(){return resolve(L_bind)(L_resetStdTokenPacks)(lazy(function(L___1){return resolve(L_result_0)}))})(function(){return resolve(L_bind)(function(){return resolve(L_resetTokenPacks)(L_activePacks)})(lazy(function(L___1){return resolve(L_result_0)}))})}))}))}))}))}))})));
runMonad(resolve(L_define)(lazy("load"))(lazy(1))(lazy("load file = bind (baseLoad file)\n  \\result . \\\\\n    errs = foldr (\\line results . tail line (\\er . cons er results) (\\x . results)) nil result\n    .\n    isNil errs\n      right true\n      left errs"))(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_baseLoad)(L_file)})(lazy(function(L_result){return (function(){

var L_errs;

L_errs = function(){return resolve(L_foldr)(lazy(function(L_line){return function(L_results){return resolve(L_tail)(L_line)(lazy(function(L_er){return resolve(L_cons)(L_er)(L_results)}))(lazy(function(L_x){return resolve(L_results)}))}}))(L_nil)(L_result)};
return resolve(L_isNil)(L_errs)(function(){return resolve(L_right)(L_true)})(function(){return resolve(L_left)(L_errs)})})()}))})));
runMonad(resolve(L_define)(lazy("require"))(lazy(1))(lazy("require file = bind (getValue 'requiredFiles')\n  \\files . contains files file\n    false\n    bind (load file)\n      \\result . result\n        \\x . left x\n        \\_ . bind (setValue 'requiredFiles' (cons file files))\n          \\_ . right true"))(lazy(function(L_file){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("requiredFiles"))})(lazy(function(L_files){return resolve(L_contains)(L_files)(L_file)(L_false)(function(){return resolve(L_bind)(function(){return resolve(L_load)(L_file)})(lazy(function(L_result){return resolve(L_result)(lazy(function(L_x){return resolve(L_left)(L_x)}))(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("requiredFiles"))(function(){return resolve(L_cons)(L_file)(L_files)})})(lazy(function(L___0){return resolve(L_right)(L_true)}))}))}))})}))})));
runMonad(resolve(L_define)(lazy("defTokenPack"))(lazy(2))(lazy("defTokenPack name pack = bind (getValue 'tokenPacks')\n  \\packs . setValue 'tokenPacks' (acons name pack packs)"))(lazy(function(L_name){return function(L_pack){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenPacks"))})(lazy(function(L_packs){return resolve(L_setValue)(lazy("tokenPacks"))(function(){return resolve(L_acons)(L_name)(L_pack)(L_packs)})}))}})));
runMonad(resolve(L_define)(lazy("useTokenPack"))(lazy(1))(lazy("useTokenPack name = bind (getValue 'tokenPacks')\n  \\packs . bind (getValue 'tokenGroups')\n    \\groups . bind (getValue 'tokenList')\n      \\tokens . bind (getValue 'activeTokenPacks')\n        \\activePacks . bind (getValue 'parseFilters')\n          \\filters . assoc name packs\n            \\pack . \\\\\n              groupToks = foldl (\\value el . el \\h t . cons h (cons t value)) nil (head (tail pack))\n              newToks = quicksort (\\a b . > (strLen a) (strLen b)) (append (head pack) (append groupToks tokens))\n              .\n              bind (setValue 'tokenList' newToks)\n                \\_ . bind (setValue 'tokenGroups' (appendAlist (head (tail pack)) groups))\n                  \\_ . bind (setValue 'parseFilters' (append filters (head (tail (tail pack)))))\n                    \\_ . bind (computeTokenPat newToks)\n                      \\_ . setValue 'activeTokenPacks' (cons name activePacks)\n            nil"))(lazy(function(L_name){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenPacks"))})(lazy(function(L_packs){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenGroups"))})(lazy(function(L_groups){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("tokenList"))})(lazy(function(L_tokens){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("activeTokenPacks"))})(lazy(function(L_activePacks){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("parseFilters"))})(lazy(function(L_filters){return resolve(L_assoc)(L_name)(L_packs)(lazy(function(L_pack){return (function(){

var L_newToks, L_groupToks;

L_newToks = function(){return resolve(L_quicksort)(lazy(function(L_a){return function(L_b){return resolve(L_$z)(function(){return resolve(L_strLen)(L_a)})(function(){return resolve(L_strLen)(L_b)})}}))(function(){return resolve(L_append)(function(){return resolve(L_head)(L_pack)})(function(){return resolve(L_append)(L_groupToks)(L_tokens)})})};

L_groupToks = function(){return resolve(L_foldl)(lazy(function(L_value){return function(L_el){return resolve(L_el)(lazy(function(L_h){return function(L_t){return resolve(L_cons)(L_h)(function(){return resolve(L_cons)(L_t)(L_value)})}}))}}))(L_nil)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_pack)})})};
return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("tokenList"))(L_newToks)})(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("tokenGroups"))(function(){return resolve(L_appendAlist)(function(){return resolve(L_head)(function(){return resolve(L_tail)(L_pack)})})(L_groups)})})(lazy(function(L___0){return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("parseFilters"))(function(){return resolve(L_append)(L_filters)(function(){return resolve(L_head)(function(){return resolve(L_tail)(function(){return resolve(L_tail)(L_pack)})})})})})(lazy(function(L___1){return resolve(L_bind)(function(){return resolve(L_computeTokenPat)(L_newToks)})(lazy(function(L___2){return resolve(L_setValue)(lazy("activeTokenPacks"))(function(){return resolve(L_cons)(L_name)(L_activePacks)})}))}))}))}))})()}))(L_nil)}))}))}))}))}))})));
runMonad(resolve(L_define)(lazy("resetTokenPacks"))(lazy(1))(lazy("resetTokenPacks packs = bind (setValue 'tokenGroups' nil)\n  \\_ . bind (setValue 'tokenList' nil)\n    \\_ . bind (setValue 'activeTokenPacks' nil)\n      \\_ . bind (setValue 'parseFilters' nil)\n        \\_ . foldr1\n          \\packCmd result . bind packCmd \\_ . result\n          map useTokenPack packs"))(lazy(function(L_packs){return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("tokenGroups"))(L_nil)})(lazy(function(L__){return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("tokenList"))(L_nil)})(lazy(function(L___0){return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("activeTokenPacks"))(L_nil)})(lazy(function(L___1){return resolve(L_bind)(function(){return resolve(L_setValue)(lazy("parseFilters"))(L_nil)})(lazy(function(L___2){return resolve(L_foldr1)(lazy(function(L_packCmd){return function(L_result){return resolve(L_bind)(L_packCmd)(lazy(function(L___3){return resolve(L_result)}))}}))(function(){return resolve(L_map)(L_useTokenPack)(L_packs)})}))}))}))}))})));
runMonad(resolve(L_define)(lazy("resetStdTokenPacks"))(lazy(0))(lazy("resetStdTokenPacks = bind (getValue 'stdTokenPacks')\n  \\stds . bind (resetTokenPacks stds)\n    \\_ . setValue 'activeTokenPacks' nil"))(function(){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("stdTokenPacks"))})(lazy(function(L_stds){return resolve(L_bind)(function(){return resolve(L_resetTokenPacks)(L_stds)})(lazy(function(L__){return resolve(L_setValue)(lazy("activeTokenPacks"))(L_nil)}))}))}));
runMonad(resolve(L_define)(lazy("addStdTokenPacks"))(lazy(1))(lazy("addStdTokenPacks morePacks = bind (getValue 'stdTokenPacks')\n  \\stds . setValue 'stdTokenPacks' (append stds morePacks)"))(lazy(function(L_morePacks){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("stdTokenPacks"))})(lazy(function(L_stds){return resolve(L_setValue)(lazy("stdTokenPacks"))(function(){return resolve(L_append)(L_stds)(L_morePacks)})}))})));
runMonad(resolve(L_define)(lazy("addParseFilter"))(lazy(1))(lazy("addParseFilter filt = bind (getValue 'parseFilters')\n  \\filters . setValue 'parseFilters' (append filters (cons filt nil))"))(lazy(function(L_filt){return resolve(L_bind)(function(){return resolve(L_getValue)(lazy("parseFilters"))})(lazy(function(L_filters){return resolve(L_setValue)(lazy("parseFilters"))(function(){return resolve(L_append)(L_filters)(function(){return resolve(L_cons)(L_filt)(L_nil)})})}))})));
runMonad(resolve(L_define)(lazy("d"))(lazy(3))(lazy("d label value expr = log (strCat (cons label (cons value nil))) expr"))(lazy(function(L_label){return function(L_value){return function(L_expr){return resolve(L_log)(function(){return resolve(L_strCat)(function(){return resolve(L_cons)(L_label)(function(){return resolve(L_cons)(L_value)(L_nil)})})})(L_expr)}}})));
runMonad(resolve(L_define)(lazy("dd"))(lazy(2))(lazy("dd label arg = d label arg arg"))(lazy(function(L_label){return function(L_arg){return resolve(L_d)(L_label)(L_arg)(L_arg)}})));
runMonad(resolve(L_setValue)(lazy("macroDefs"))(L_nil));
runMonad(resolve(L_setValue)(lazy("requiredFiles"))(L_nil));
runMonad(resolve(L_setValue)(lazy("tokenPacks"))(L_nil));
runMonad(resolve(L_setValue)(lazy("activeTokenPacks"))(L_nil));
runMonad(resolve(L_setValue)(lazy("stdTokenPacks"))(function(){return resolve(L_cons)(lazy("std"))(L_nil)}));
runMonad(resolve(L_defTokenPack)(lazy("std"))(function(){return resolve(L_cons)(function(){return resolve(L_cons)(lazy("."))(function(){return resolve(L_cons)(lazy("\\"))(function(){return resolve(L_cons)(lazy("\\\\"))(function(){return resolve(L_cons)(lazy("\\@"))(L_nil)})})})})(function(){return resolve(L_cons)(function(){return resolve(L_acons)(lazy("("))(lazy(")"))(L_nil)})(function(){return resolve(L_cons)(L_nil)(L_nil)})})}));
runMonad(resolve(L_resetStdTokenPacks));

//@ sourceURL=core/simpleParse.lsr

[
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"true"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"true = \\a b . a"}},"arg":{"_type":"anno","name":"dataType","data":"true","body":{"_type":"anno","name":"type","data":"true","body":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"ref","varName":"a"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"false"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"false = \\a b . b"}},"arg":{"_type":"anno","name":"dataType","data":"false","body":{"_type":"anno","name":"type","data":"false","body":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"ref","varName":"b"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"not"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"not b = b false true"}},"arg":{"_type":"lambda","varName":"b","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"b"},"arg":{"_type":"ref","varName":"false"}},"arg":{"_type":"ref","varName":"true"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"and"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"and a b = a b false"}},"arg":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"a"},"arg":{"_type":"ref","varName":"b"}},"arg":{"_type":"ref","varName":"false"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"or"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"or a b = a true b"}},"arg":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"a"},"arg":{"_type":"ref","varName":"true"}},"arg":{"_type":"ref","varName":"b"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"some"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"some x = \\someCase noneCase . someCase x"}},"arg":{"_type":"anno","name":"dataType","data":"some","body":{"_type":"lambda","varName":"x","body":{"_type":"anno","name":"type","data":"some","body":{"_type":"lambda","varName":"someCase","body":{"_type":"lambda","varName":"noneCase","body":{"_type":"apply","func":{"_type":"ref","varName":"someCase"},"arg":{"_type":"ref","varName":"x"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"some2"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"some2 a b = \\someCase noneCase . someCase a b"}},"arg":{"_type":"anno","name":"dataType","data":"some2","body":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"anno","name":"type","data":"some2","body":{"_type":"lambda","varName":"someCase","body":{"_type":"lambda","varName":"noneCase","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"someCase"},"arg":{"_type":"ref","varName":"a"}},"arg":{"_type":"ref","varName":"b"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"none"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"none = \\someCase noneCase . noneCase"}},"arg":{"_type":"anno","name":"dataType","data":"none","body":{"_type":"anno","name":"type","data":"none","body":{"_type":"lambda","varName":"someCase","body":{"_type":"lambda","varName":"noneCase","body":{"_type":"ref","varName":"noneCase"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"neq"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"neq a b = not (eq a b)"}},"arg":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"apply","func":{"_type":"ref","varName":"not"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"a"}},"arg":{"_type":"ref","varName":"b"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"left"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"left x = \\lCase rCase . lCase x"}},"arg":{"_type":"anno","name":"dataType","data":"left","body":{"_type":"lambda","varName":"x","body":{"_type":"anno","name":"type","data":"left","body":{"_type":"lambda","varName":"lCase","body":{"_type":"lambda","varName":"rCase","body":{"_type":"apply","func":{"_type":"ref","varName":"lCase"},"arg":{"_type":"ref","varName":"x"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"right"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"right x = \\lCase rCase . rCase x"}},"arg":{"_type":"anno","name":"dataType","data":"right","body":{"_type":"lambda","varName":"x","body":{"_type":"anno","name":"type","data":"right","body":{"_type":"lambda","varName":"lCase","body":{"_type":"lambda","varName":"rCase","body":{"_type":"apply","func":{"_type":"ref","varName":"rCase"},"arg":{"_type":"ref","varName":"x"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"id"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"id x = x"}},"arg":{"_type":"lambda","varName":"x","body":{"_type":"ref","varName":"x"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"compose"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"compose f g = \\x . f (g x)"}},"arg":{"_type":"anno","name":"dataType","data":"compose","body":{"_type":"lambda","varName":"f","body":{"_type":"lambda","varName":"g","body":{"_type":"anno","name":"type","data":"compose","body":{"_type":"lambda","varName":"x","body":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"g"},"arg":{"_type":"ref","varName":"x"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"flip"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"flip func = \\x y . func y x"}},"arg":{"_type":"anno","name":"dataType","data":"flip","body":{"_type":"lambda","varName":"func","body":{"_type":"anno","name":"type","data":"flip","body":{"_type":"lambda","varName":"x","body":{"_type":"lambda","varName":"y","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"y"}},"arg":{"_type":"ref","varName":"x"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"cons"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"cons a b = \\f . f a b"}},"arg":{"_type":"anno","name":"dataType","data":"cons","body":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"anno","name":"type","data":"cons","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"a"}},"arg":{"_type":"ref","varName":"b"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isCons"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"isCons c = hasType c cons"}},"arg":{"_type":"lambda","varName":"c","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"hasType"},"arg":{"_type":"ref","varName":"c"}},"arg":{"_type":"ref","varName":"cons"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"nil"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"nil = \\a b . b"}},"arg":{"_type":"anno","name":"dataType","data":"nil","body":{"_type":"anno","name":"type","data":"nil","body":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"ref","varName":"b"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isNil"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"isNil n = hasType n nil"}},"arg":{"_type":"lambda","varName":"n","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"hasType"},"arg":{"_type":"ref","varName":"n"}},"arg":{"_type":"ref","varName":"nil"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"head"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"head l = l \\h t . h"}},"arg":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"ref","varName":"h"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"tail"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"tail l = l \\h t . t"}},"arg":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"ref","varName":"t"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"last"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"last l = isCons l\n  l \\h t . isCons t (last t) h\n  nil"}},"arg":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"l"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"last"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"ref","varName":"h"}}}}}},"arg":{"_type":"ref","varName":"nil"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"removeLast"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"removeLast l = isCons l\n  l \\h t . isCons t (cons h (removeLast t)) nil\n  nil"}},"arg":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"l"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"removeLast"},"arg":{"_type":"ref","varName":"t"}}}},"arg":{"_type":"ref","varName":"nil"}}}}}},"arg":{"_type":"ref","varName":"nil"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"length"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"length list = list\n  \\h t D . + 1 (length t)\n  0"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"lit","value":1}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"length"},"arg":{"_type":"ref","varName":"t"}}}}}}},"arg":{"_type":"lit","value":0}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"append"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"append a b = a (\\h t D . cons h (append t b)) b"}},"arg":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"a"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"b"}}}}}}},"arg":{"_type":"ref","varName":"b"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"flatten"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"flatten list = isCons list\n  subflatten list nil\n  list"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"subflatten"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"ref","varName":"list"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"subflatten"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"subflatten list result = isNil list\n  result\n  isCons list\n    list \\h t . subflatten h (subflatten t result)\n    cons list result"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"result","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"result"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"subflatten"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"subflatten"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"result"}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"result"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"reverse"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"reverse l = rev l nil"}},"arg":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"rev"},"arg":{"_type":"ref","varName":"l"}},"arg":{"_type":"ref","varName":"nil"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"rev"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"rev l result = l (\\h t D . rev t (cons h result)) result"}},"arg":{"_type":"lambda","varName":"l","body":{"_type":"lambda","varName":"result","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"rev"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"result"}}}}}}},"arg":{"_type":"ref","varName":"result"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"filter"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"filter func list = list (\\h t D . func h (cons h) id (filter func t)) nil"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"ref","varName":"id"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filter"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"t"}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"find"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"find predicate list = list (\\h t D . predicate h (some h) (find predicate t)) none"}},"arg":{"_type":"lambda","varName":"predicate","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"predicate"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"some"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"find"},"arg":{"_type":"ref","varName":"predicate"}},"arg":{"_type":"ref","varName":"t"}}}}}}},"arg":{"_type":"ref","varName":"none"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"contains"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"contains list item = find (\\el . eq el item) list (\\x . true) false"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"item","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"find"},"arg":{"_type":"lambda","varName":"el","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"el"}},"arg":{"_type":"ref","varName":"item"}}}},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"lambda","varName":"x","body":{"_type":"ref","varName":"true"}}},"arg":{"_type":"ref","varName":"false"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"map"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"map func l = l (\\h t D . cons (func h) (map func t)) nil"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"map"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"t"}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"mapSave"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"mapSave func l = l\n  \\h t D . \\\\\n    newH = func h\n    newT = mapSave func t\n    .\n    and (eq newH h) (eq newT t)\n      l\n      cons newH newT\n  nil"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"let","varName":"newH","value":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"h"}},"body":{"_type":"let","varName":"newT","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"mapSave"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"t"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"newH"}},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"newT"}},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"ref","varName":"l"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"newH"}},"arg":{"_type":"ref","varName":"newT"}}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"foldl"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"foldl func initialValue l = l (\\h t D . foldl func (func initialValue h) t) initialValue"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"initialValue","body":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldl"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"initialValue"}},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"ref","varName":"t"}}}}}},"arg":{"_type":"ref","varName":"initialValue"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"foldl1"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"foldl1 func l = l \\h t . foldl func h t"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"l","body":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldl"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"foldr"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"foldr func initialValue list = list\n  \\h t D . func h (foldr func initialValue t)\n  initialValue"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"initialValue","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldr"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"initialValue"}},"arg":{"_type":"ref","varName":"t"}}}}}}},"arg":{"_type":"ref","varName":"initialValue"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"foldr1"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"foldr1 func list = list \\h t . isNil t\n  h\n  func h (foldr1 func t)"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldr1"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"t"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"intersperse"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"intersperse list element = list (\\h t D .\n  isNil t\n    list\n    cons h (cons element (intersperse t element))) nil"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"element","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"element"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"intersperse"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"element"}}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"join"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"join list el = strCat (intersperse list el)"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"el","body":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"intersperse"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"el"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"findIndex"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"findIndex func list = idx list func 0"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"idx"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"lit","value":0}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"idx"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"idx list func pos = list\n  \\h t D . func h\n    pos\n    idx t func (+ 1 pos)\n  -1"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"pos","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"pos"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"idx"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"lit","value":1}},"arg":{"_type":"ref","varName":"pos"}}}}}}}},"arg":{"_type":"lit","value":-1}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"index"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"index list el = find (\\item . == el item) list"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"el","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"find"},"arg":{"_type":"lambda","varName":"item","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"=="},"arg":{"_type":"ref","varName":"el"}},"arg":{"_type":"ref","varName":"item"}}}},"arg":{"_type":"ref","varName":"list"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"acons"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"acons k v alist = cons (cons k v) alist"}},"arg":{"_type":"lambda","varName":"k","body":{"_type":"lambda","varName":"v","body":{"_type":"lambda","varName":"alist","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"k"}},"arg":{"_type":"ref","varName":"v"}}},"arg":{"_type":"ref","varName":"alist"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"assoc"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"assoc k alist  = find (\\el . eq k (head el)) alist (\\cell . cell \\head tail . some tail) none"}},"arg":{"_type":"lambda","varName":"k","body":{"_type":"lambda","varName":"alist","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"find"},"arg":{"_type":"lambda","varName":"el","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"k"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"el"}}}}},"arg":{"_type":"ref","varName":"alist"}},"arg":{"_type":"lambda","varName":"cell","body":{"_type":"apply","func":{"_type":"ref","varName":"cell"},"arg":{"_type":"lambda","varName":"head","body":{"_type":"lambda","varName":"tail","body":{"_type":"apply","func":{"_type":"ref","varName":"some"},"arg":{"_type":"ref","varName":"tail"}}}}}}},"arg":{"_type":"ref","varName":"none"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"rassoc"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"rassoc v alist = find (\\el . eq v (tail el)) alist (\\cell . cell \\head tail . some head) none"}},"arg":{"_type":"lambda","varName":"v","body":{"_type":"lambda","varName":"alist","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"find"},"arg":{"_type":"lambda","varName":"el","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"v"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"el"}}}}},"arg":{"_type":"ref","varName":"alist"}},"arg":{"_type":"lambda","varName":"cell","body":{"_type":"apply","func":{"_type":"ref","varName":"cell"},"arg":{"_type":"lambda","varName":"head","body":{"_type":"lambda","varName":"tail","body":{"_type":"apply","func":{"_type":"ref","varName":"some"},"arg":{"_type":"ref","varName":"head"}}}}}}},"arg":{"_type":"ref","varName":"none"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"quicksort"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"quicksort less list = (qs less list) nil"}},"arg":{"_type":"lambda","varName":"less","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"qs"},"arg":{"_type":"ref","varName":"less"}},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"qs"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"qs sortedFunc list = list\n  \\h t D . \\\\\n    greater = filter (sortedFunc h) t\n    lesser = filter (compose not (sortedFunc h)) t\n    .\n    \\rest . (qs sortedFunc lesser) (cons h ((qs sortedFunc greater) rest))\n  id"}},"arg":{"_type":"lambda","varName":"sortedFunc","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"let","varName":"greater","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filter"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"sortedFunc"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"ref","varName":"t"}},"body":{"_type":"let","varName":"lesser","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filter"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"compose"},"arg":{"_type":"ref","varName":"not"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"sortedFunc"},"arg":{"_type":"ref","varName":"h"}}}},"arg":{"_type":"ref","varName":"t"}},"body":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"qs"},"arg":{"_type":"ref","varName":"sortedFunc"}},"arg":{"_type":"ref","varName":"lesser"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"qs"},"arg":{"_type":"ref","varName":"sortedFunc"}},"arg":{"_type":"ref","varName":"greater"}},"arg":{"_type":"ref","varName":"rest"}}}}}}}}}}},"arg":{"_type":"ref","varName":"id"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"insertSorted"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"insertSorted sortFunc item list = list\n  \\h t D . sortFunc item h (cons item list) (cons h (insertSorted sortFunc item t))\n  cons item nil"}},"arg":{"_type":"lambda","varName":"sortFunc","body":{"_type":"lambda","varName":"item","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"sortFunc"},"arg":{"_type":"ref","varName":"item"}},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"item"}},"arg":{"_type":"ref","varName":"list"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"insertSorted"},"arg":{"_type":"ref","varName":"sortFunc"}},"arg":{"_type":"ref","varName":"item"}},"arg":{"_type":"ref","varName":"t"}}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"item"}},"arg":{"_type":"ref","varName":"nil"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"token"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"token txt pos = \\f . f txt pos"}},"arg":{"_type":"anno","name":"dataType","data":"token","body":{"_type":"lambda","varName":"txt","body":{"_type":"lambda","varName":"pos","body":{"_type":"anno","name":"type","data":"token","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"txt"}},"arg":{"_type":"ref","varName":"pos"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"tokenString"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"tokenString tok = tok \\t p . t"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"p","body":{"_type":"ref","varName":"t"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"tokenPos"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"tokenPos tok = tok \\t p . p"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"p","body":{"_type":"ref","varName":"p"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isToken"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"isToken t = hasType t token"}},"arg":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"hasType"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"token"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parens"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"parens start end content = \\f . f start end content"}},"arg":{"_type":"anno","name":"dataType","data":"parens","body":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"content","body":{"_type":"anno","name":"type","data":"parens","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"ref","varName":"content"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parensStart"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"parensStart p = p \\s e c . s"}},"arg":{"_type":"lambda","varName":"p","body":{"_type":"apply","func":{"_type":"ref","varName":"p"},"arg":{"_type":"lambda","varName":"s","body":{"_type":"lambda","varName":"e","body":{"_type":"lambda","varName":"c","body":{"_type":"ref","varName":"s"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parensEnd"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"parensEnd p = p \\s e c . e"}},"arg":{"_type":"lambda","varName":"p","body":{"_type":"apply","func":{"_type":"ref","varName":"p"},"arg":{"_type":"lambda","varName":"s","body":{"_type":"lambda","varName":"e","body":{"_type":"lambda","varName":"c","body":{"_type":"ref","varName":"e"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parensContent"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"parensContent p = p \\s e c . c"}},"arg":{"_type":"lambda","varName":"p","body":{"_type":"apply","func":{"_type":"ref","varName":"p"},"arg":{"_type":"lambda","varName":"s","body":{"_type":"lambda","varName":"e","body":{"_type":"lambda","varName":"c","body":{"_type":"ref","varName":"c"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isParens"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"isParens p = hasType p parens"}},"arg":{"_type":"lambda","varName":"p","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"hasType"},"arg":{"_type":"ref","varName":"p"}},"arg":{"_type":"ref","varName":"parens"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"makeParens"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"makeParens start end content =\n  and (isCons content) (isNil (tail content))\n    makeParens start end (head content)\n    or (isToken content) (isParens content)\n      content\n      parens start end content"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"content","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"content"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"content"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeParens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"content"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"content"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"content"}}},"arg":{"_type":"ref","varName":"content"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"ref","varName":"content"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parensFromToks"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"parensFromToks left right content = \\\\\n  start = tokenPos left\n  end = + (tokenPos right) (strLen (tokenString right))\n  .\n  parens start end content"}},"arg":{"_type":"lambda","varName":"left","body":{"_type":"lambda","varName":"right","body":{"_type":"lambda","varName":"content","body":{"_type":"let","varName":"start","value":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"left"}},"body":{"_type":"let","varName":"end","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"right"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"right"}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"ref","varName":"content"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"stripParens"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"stripParens p = isParens p (parensContent p) p"}},"arg":{"_type":"lambda","varName":"p","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"p"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parensContent"},"arg":{"_type":"ref","varName":"p"}}},"arg":{"_type":"ref","varName":"p"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseErr"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"parseErr msg1 msg2 = \\f . f (strCat (cons msg1 (cons msg2 nil)))"}},"arg":{"_type":"anno","name":"dataType","data":"parseErr","body":{"_type":"lambda","varName":"msg1","body":{"_type":"lambda","varName":"msg2","body":{"_type":"anno","name":"type","data":"parseErr","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"msg1"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"msg2"}},"arg":{"_type":"ref","varName":"nil"}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseErrMsg"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"parseErrMsg err = err \\m . m"}},"arg":{"_type":"lambda","varName":"err","body":{"_type":"apply","func":{"_type":"ref","varName":"err"},"arg":{"_type":"lambda","varName":"m","body":{"_type":"ref","varName":"m"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"emptyToken"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"emptyToken = regexp '^\\\\n[ \\\\i]*(#|$)'"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"regexp"},"arg":{"_type":"lit","value":"^\\n[ \\i]*(#|$)"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"makeTokens"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"makeTokens strings start = strings (\\h t D . makeMoreTokens h t start) nil"}},"arg":{"_type":"lambda","varName":"strings","body":{"_type":"lambda","varName":"start","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strings"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeMoreTokens"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"start"}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"makeMoreTokens"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"makeMoreTokens h t start = \\\\\n  next = makeTokens t (+ start (strLen h))\n  .\n  and (strMatches h emptyToken) (or (isNil t) (strStartsWith (head t) '\\n'))\n    makeTokens t (+ start (strLen h))\n    or (strStartsWith h ' ') (strStartsWith h '#')\n      next\n      and (strStartsWith h '\\n') (strStartsWith (head t) '#')\n        makeTokens (tail t) (+ start (+ (strLen h) (strLen (head t))))\n        cons (token h start) next"}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"start","body":{"_type":"let","varName":"next","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeTokens"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"h"}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strMatches"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"emptyToken"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"lit","value":"\n"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeTokens"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"h"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":" "}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"#"}}},"arg":{"_type":"ref","varName":"next"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\n"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"lit","value":"#"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeTokens"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"t"}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"start"}}},"arg":{"_type":"ref","varName":"next"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"splitTokens"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"splitTokens str pat = filter (\\s . not (eq s '')) (strSplit str pat)"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filter"},"arg":{"_type":"lambda","varName":"s","body":{"_type":"apply","func":{"_type":"ref","varName":"not"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"s"}},"arg":{"_type":"lit","value":""}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strSplit"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"tokens"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"tokens str pat = makeTokens (splitTokens str pat) 0"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeTokens"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"splitTokens"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}}},"arg":{"_type":"lit","value":0}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isString"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"isString s = == (getType s) '*string'"}},"arg":{"_type":"lambda","varName":"s","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"=="},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getType"},"arg":{"_type":"ref","varName":"s"}}},"arg":{"_type":"lit","value":"*string"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isTokenString"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"isTokenString tok str = or\n  and (isToken tok) (eq (tokenString tok) str)\n  and (isString tok) (eq tok str)"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"ref","varName":"str"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isString"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"ref","varName":"str"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isTokenStart"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"isTokenStart tok str = or\n  and (isToken tok) (strStartsWith (tokenString tok) str)\n  and (isString tok) (strStartsWith tok str)"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"ref","varName":"str"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isString"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"ref","varName":"str"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"strTokenString"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"strTokenString tok = withToken tok nil \\str pos . str"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pos","body":{"_type":"ref","varName":"str"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"withToken"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"withToken tok nonTokCase tokCase = isToken tok\n  tok tokCase\n  isString tok\n    tokCase tok -1\n    nonTokCase"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"lambda","varName":"nonTokCase","body":{"_type":"lambda","varName":"tokCase","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"ref","varName":"tokCase"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isString"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"tokCase"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lit","value":-1}}},"arg":{"_type":"ref","varName":"nonTokCase"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"withCons"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"withCons l nilCase cont = isCons l (l (\\h t D . cont h t) nilCase) nilCase"}},"arg":{"_type":"lambda","varName":"l","body":{"_type":"lambda","varName":"nilCase","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"l"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"l"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}}}}}},"arg":{"_type":"ref","varName":"nilCase"}}},"arg":{"_type":"ref","varName":"nilCase"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"ifNotErr"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"ifNotErr thing cont = hasType thing parseErr thing (cont thing)"}},"arg":{"_type":"lambda","varName":"thing","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"hasType"},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"ref","varName":"parseErr"}},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"thing"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseToks"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"parseToks toks groups =\n  isNil toks nil\n    ifNotErr (parseTok toks groups) \\list . list \\h t .\n      ifNotErr (parseToks t groups) \\res .\n        cons h\n          and (isCons res) (isBlockStart (head res))\n            cons res nil\n            res"}},"arg":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseTok"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseToks"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"lambda","varName":"res","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"res"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isBlockStart"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"res"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"res"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"ref","varName":"res"}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseTok"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"parseTok toks groups = withCons toks nil \\h t .\n  withToken h toks \\txt pos .\n    assoc txt groups\n      \\close . parseGroup h t nil close groups\n      isTokenStart h '\\n' (parseIndent h t nil groups)\n        toks"}},"arg":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"lambda","varName":"txt","body":{"_type":"lambda","varName":"pos","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"assoc"},"arg":{"_type":"ref","varName":"txt"}},"arg":{"_type":"ref","varName":"groups"}},"arg":{"_type":"lambda","varName":"close","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseGroup"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"close"}},"arg":{"_type":"ref","varName":"groups"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenStart"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\n"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseIndent"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"ref","varName":"toks"}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseGroup"}},"arg":{"_type":"lit","value":5}},"arg":{"_type":"lit","value":"parseGroup left toks gr close groups = withCons toks (parseErr 'Unterminated group starting ' (loc left))\n  \\h t . isTokenString h close\n    eq close ')'\n      cons (parensFromToks left h (reverse gr)) t\n      cons (cons left (cons (reverse gr) (cons h nil))) t\n    withToken h\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT .\n        parseGroup left restT (cons restH gr) close groups\n      \\txt pos .\n        rassoc txt groups\n          \\open . parseErr (strCat (cons 'Mismatched group: ' (cons (tokenString left) (cons txt (cons ' ' nil))))) (loc left)\n          ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseGroup left restT (cons restH gr) close groups"}},"arg":{"_type":"lambda","varName":"left","body":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"gr","body":{"_type":"lambda","varName":"close","body":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Unterminated group starting "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"left"}}}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"close"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"close"}},"arg":{"_type":"lit","value":")"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parensFromToks"},"arg":{"_type":"ref","varName":"left"}},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"reverse"},"arg":{"_type":"ref","varName":"gr"}}}},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"left"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"reverse"},"arg":{"_type":"ref","varName":"gr"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"ref","varName":"t"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseTok"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"restH","body":{"_type":"lambda","varName":"restT","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseGroup"},"arg":{"_type":"ref","varName":"left"}},"arg":{"_type":"ref","varName":"restT"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"restH"}},"arg":{"_type":"ref","varName":"gr"}}},"arg":{"_type":"ref","varName":"close"}},"arg":{"_type":"ref","varName":"groups"}}}}}}}},"arg":{"_type":"lambda","varName":"txt","body":{"_type":"lambda","varName":"pos","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"rassoc"},"arg":{"_type":"ref","varName":"txt"}},"arg":{"_type":"ref","varName":"groups"}},"arg":{"_type":"lambda","varName":"open","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"Mismatched group: "}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"left"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"txt"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":" "}},"arg":{"_type":"ref","varName":"nil"}}}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"left"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseTok"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"restH","body":{"_type":"lambda","varName":"restT","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseGroup"},"arg":{"_type":"ref","varName":"left"}},"arg":{"_type":"ref","varName":"restT"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"restH"}},"arg":{"_type":"ref","varName":"gr"}}},"arg":{"_type":"ref","varName":"close"}},"arg":{"_type":"ref","varName":"groups"}}}}}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseIndent"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"parseIndent indent toks gr groups =\n  withCons toks (cons (makeParens (tokenPos indent) (lexEnd (head gr)) (reverse gr)) nil)\n    \\h t . or (withToken h false (\\txt pos . rassoc txt groups (\\open . true) false))\n      and (isTokenStart h '\\n') (<= (strLen (tokenString h)) (strLen (tokenString indent)))\n      cons (makeParens (tokenPos indent) (tokenPos h) (reverse gr)) toks\n      ifNotErr (parseTok toks groups) \\list . list \\restH restT . parseIndent indent restT (cons restH gr) groups"}},"arg":{"_type":"lambda","varName":"indent","body":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"gr","body":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeParens"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"indent"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"lexEnd"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"gr"}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"reverse"},"arg":{"_type":"ref","varName":"gr"}}}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"false"}},"arg":{"_type":"lambda","varName":"txt","body":{"_type":"lambda","varName":"pos","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"rassoc"},"arg":{"_type":"ref","varName":"txt"}},"arg":{"_type":"ref","varName":"groups"}},"arg":{"_type":"lambda","varName":"open","body":{"_type":"ref","varName":"true"}}},"arg":{"_type":"ref","varName":"false"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenStart"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\n"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"<="},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"h"}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"indent"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeParens"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"indent"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"reverse"},"arg":{"_type":"ref","varName":"gr"}}}},"arg":{"_type":"ref","varName":"toks"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseTok"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"restH","body":{"_type":"lambda","varName":"restT","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseIndent"},"arg":{"_type":"ref","varName":"indent"}},"arg":{"_type":"ref","varName":"restT"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"restH"}},"arg":{"_type":"ref","varName":"gr"}}},"arg":{"_type":"ref","varName":"groups"}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"lit"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"lit value = \\f . f value"}},"arg":{"_type":"anno","name":"dataType","data":"lit","body":{"_type":"lambda","varName":"value","body":{"_type":"anno","name":"type","data":"lit","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"value"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"ref"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"ref name = \\f . f name"}},"arg":{"_type":"anno","name":"dataType","data":"ref","body":{"_type":"lambda","varName":"name","body":{"_type":"anno","name":"type","data":"ref","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"name"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"lambda"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"lambda name body = \\f . f name body"}},"arg":{"_type":"anno","name":"dataType","data":"lambda","body":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"body","body":{"_type":"anno","name":"type","data":"lambda","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"body"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"apply"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"apply func arg = \\f . f func arg"}},"arg":{"_type":"anno","name":"dataType","data":"apply","body":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"arg","body":{"_type":"anno","name":"type","data":"apply","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"arg"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"let"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"let name value body = \\f . f name value body"}},"arg":{"_type":"anno","name":"dataType","data":"let","body":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"value","body":{"_type":"lambda","varName":"body","body":{"_type":"anno","name":"type","data":"let","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"value"}},"arg":{"_type":"ref","varName":"body"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"anno"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"anno name data body = \\f . f name data body"}},"arg":{"_type":"anno","name":"dataType","data":"anno","body":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"data","body":{"_type":"lambda","varName":"body","body":{"_type":"anno","name":"type","data":"anno","body":{"_type":"lambda","varName":"f","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"f"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"data"}},"arg":{"_type":"ref","varName":"body"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"withParens"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"withParens p err cont = isParens p (p cont) err"}},"arg":{"_type":"lambda","varName":"p","body":{"_type":"lambda","varName":"err","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"p"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"p"},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"ref","varName":"err"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"setParens"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"setParens p func = isParens p\n  p \\start end content . parens start end (func content)\n  func p"}},"arg":{"_type":"lambda","varName":"p","body":{"_type":"lambda","varName":"func","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"p"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"p"},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"content","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"content"}}}}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"p"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"withStripped"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"withStripped list cont = withParens list (cont list) \\start end content . withStripped content cont"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withParens"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"list"}}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"content","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withStripped"},"arg":{"_type":"ref","varName":"content"}},"arg":{"_type":"ref","varName":"cont"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"position"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"position thing = isToken thing (tokenPos thing)\n  isParens thing (parensStart thing)\n    isCons thing (position (head thing))\n      -1"}},"arg":{"_type":"lambda","varName":"thing","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"thing"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parensStart"},"arg":{"_type":"ref","varName":"thing"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"thing"}}}},"arg":{"_type":"lit","value":-1}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"lexEnd"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"lexEnd thing = isToken thing (+ (tokenPos thing) (strLen (tokenString thing)))\n  isParens thing (parensEnd thing)\n    isCons thing (lexEnd (last thing))\n      -1"}},"arg":{"_type":"lambda","varName":"thing","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"thing"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"thing"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parensEnd"},"arg":{"_type":"ref","varName":"thing"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"thing"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"lexEnd"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"last"},"arg":{"_type":"ref","varName":"thing"}}}},"arg":{"_type":"lit","value":-1}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"loc"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"loc thing = \\\\\n  p = position thing\n  l = eq p -1 'an unknown location' p\n  .\n  strCat (cons 'at ' (cons l nil))"}},"arg":{"_type":"lambda","varName":"thing","body":{"_type":"let","varName":"p","value":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"thing"}},"body":{"_type":"let","varName":"l","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"p"}},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"lit","value":"an unknown location"}},"arg":{"_type":"ref","varName":"p"}},"body":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"at "}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"l"}},"arg":{"_type":"ref","varName":"nil"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"scrub"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"scrub str = strFromList (scrubList (strToList str))"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"ref","varName":"strFromList"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"scrubList"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strToList"},"arg":{"_type":"ref","varName":"str"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"scrubList"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"scrubList list = list\n  \\h t D . \\\\\n    next = scrubList t\n    .\n    eq h '\\\\' (cons h (cons (head t) (scrubList (tail t))))\n      eq h '\\\"' (cons '\\\\' (cons '\\\"' next))\n        cons h next\n  nil"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"let","varName":"next","value":{"_type":"apply","func":{"_type":"ref","varName":"scrubList"},"arg":{"_type":"ref","varName":"t"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"scrubList"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"t"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\""}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\""}},"arg":{"_type":"ref","varName":"next"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"next"}}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createAst"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"createAst inList names cont = withStripped inList \\list .\n  isToken list (createLitOrRef (tokenString list) names cont)\n    list\n      \\h t D .\n        isTokenString h '\\\\\\\\' (createLet h t names cont)\n          isTokenString h '\\\\@' (createAnno h t names cont)\n            isTokenString h '\\\\' (createLambda h t names cont)\n              createApply list names cont\n      cont nil"}},"arg":{"_type":"lambda","varName":"inList","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withStripped"},"arg":{"_type":"ref","varName":"inList"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createLitOrRef"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"list"}}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\\\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createLet"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\\@"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAnno"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createLambda"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createApply"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}}}}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"nil"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"strMatches"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"strMatches str pat = isCons (strMatch str pat)"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strMatch"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"digit"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"digit = regexp '^[0-9]+$'"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"regexp"},"arg":{"_type":"lit","value":"^[0-9]+$"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"backslashCodes"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"backslashCodes = 'bfnrt'"}},"arg":{"_type":"lit","value":"bfnrt"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"backslashValues"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"backslashValues = '\\b\\f\\n\\r\\t'"}},"arg":{"_type":"lit","value":"\b\f\n\r\t"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"convertStringEscape"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"convertStringEscape char codes values =\n  eq codes ''\n    char\n    eq char (strAt codes 0)\n      strAt values 0\n      convertStringEscape char (strSubstring codes 1 0) (strSubstring values 1 0)"}},"arg":{"_type":"lambda","varName":"char","body":{"_type":"lambda","varName":"codes","body":{"_type":"lambda","varName":"values","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"codes"}},"arg":{"_type":"lit","value":""}},"arg":{"_type":"ref","varName":"char"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"char"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"codes"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"values"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"convertStringEscape"},"arg":{"_type":"ref","varName":"char"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strSubstring"},"arg":{"_type":"ref","varName":"codes"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strSubstring"},"arg":{"_type":"ref","varName":"values"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":0}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"convertStringEscapes"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"convertStringEscapes orig str cont =\n  eq str ''\n    cont str\n    eq (strAt str 0) '\\\\'\n      eq (strLen str) 1 (parseErr \"Error, backslash without character in string: \" orig)\n        convertStringEscapes orig (strSubstring str 2 0) \\rest . cont\n          strAdd\n            convertStringEscape (strAt str 1) backslashCodes backslashValues\n            rest\n      convertStringEscapes orig (strSubstring str 1 0) \\rest . cont\n        strAdd\n          strAt str 0\n          rest"}},"arg":{"_type":"lambda","varName":"orig","body":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":""}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"str"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"str"}}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Error, backslash without character in string: "}},"arg":{"_type":"ref","varName":"orig"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"convertStringEscapes"},"arg":{"_type":"ref","varName":"orig"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strSubstring"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAdd"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"convertStringEscape"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":1}}},"arg":{"_type":"ref","varName":"backslashCodes"}},"arg":{"_type":"ref","varName":"backslashValues"}}},"arg":{"_type":"ref","varName":"rest"}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"convertStringEscapes"},"arg":{"_type":"ref","varName":"orig"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strSubstring"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAdd"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"ref","varName":"rest"}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseString"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"parseString str cont =\n  neq (strAt str 0) (strAt str -1) (parseErr \"Badly terminated string: \" str)\n    convertStringEscapes str (strSubstring str 1 -1) cont"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"neq"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":-1}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Badly terminated string: "}},"arg":{"_type":"ref","varName":"str"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"convertStringEscapes"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strSubstring"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":-1}}},"arg":{"_type":"ref","varName":"cont"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createLitOrRef"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"createLitOrRef tok names cont =\n  contains names tok\n    cont (ref tok)\n    or (strStartsWith tok '\\\"') (strStartsWith tok \"'\")\n      parseString tok \\str . cont (lit str)\n      or (and (>= (strAt tok 0) '0') (<= (strAt tok 0) '9')) (strStartsWith tok '-')\n        jsonParse tok (\\err . cont (ref tok)) (\\item . cont (lit item))\n        cont (ref tok)"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"ref"},"arg":{"_type":"ref","varName":"tok"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lit","value":"\""}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lit","value":"'"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseString"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"lit"},"arg":{"_type":"ref","varName":"str"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">="},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"lit","value":"0"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"<="},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strAt"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"lit","value":"9"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strStartsWith"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lit","value":"-"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"jsonParse"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"lambda","varName":"err","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"ref"},"arg":{"_type":"ref","varName":"tok"}}}}},"arg":{"_type":"lambda","varName":"item","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"lit"},"arg":{"_type":"ref","varName":"item"}}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"ref"},"arg":{"_type":"ref","varName":"tok"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createLambda"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"createLambda start list names cont = \\\\\n  err = parseErr \"Lambda needs a variable name, a dot, and a body \" (loc start)\n  .\n  withCons list err \\name rest .\n    withToken name err \\n p .\n      withCons rest err \\dot body .\n        # are these partial applications too hard to read?\n        isTokenString dot '.' (createAst body) (createLambda start rest)\n          cons n names\n          \\bodyAst . cont (lambda n bodyAst)"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"let","varName":"err","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Lambda needs a variable name, a dot, and a body "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"err"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"err"}},"arg":{"_type":"lambda","varName":"n","body":{"_type":"lambda","varName":"p","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"ref","varName":"err"}},"arg":{"_type":"lambda","varName":"dot","body":{"_type":"lambda","varName":"body","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"dot"}},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"body"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createLambda"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"rest"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"n"}},"arg":{"_type":"ref","varName":"names"}}},"arg":{"_type":"lambda","varName":"bodyAst","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"lambda"},"arg":{"_type":"ref","varName":"n"}},"arg":{"_type":"ref","varName":"bodyAst"}}}}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createAnno"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"createAnno start list names cont =\n  withCons list (parseErr \"No annotation name or data in annotation \" (loc start)) \\name rest .\n    withCons rest (parseErr \"No data for annotation \" (loc start)) \\data rest . \\\\\n      finish data body = createAst body names \\bodyAst .\n        cleanTokens start name \\name .\n          cleanTokens start data \\data .\n            cont (anno name data bodyAst)\n      .\n      isTokenString data '.'\n        finish nil rest\n        withStripped data \\data .\n          withCons rest (parseErr \"No body for annotation \" (loc start)) \\dot body .\n            isTokenString dot '.'\n              finish data body\n              parseErr \"Annotation expects dot after name and data \" (loc start)"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"No annotation name or data in annotation "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"No data for annotation "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}}},"arg":{"_type":"lambda","varName":"data","body":{"_type":"lambda","varName":"rest","body":{"_type":"let","varName":"finish","value":{"_type":"lambda","varName":"data","body":{"_type":"lambda","varName":"body","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"body"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"bodyAst","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cleanTokens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cleanTokens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"data"}},"arg":{"_type":"lambda","varName":"data","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"anno"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"data"}},"arg":{"_type":"ref","varName":"bodyAst"}}}}}}}}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"data"}},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"finish"},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"rest"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withStripped"},"arg":{"_type":"ref","varName":"data"}},"arg":{"_type":"lambda","varName":"data","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"No body for annotation "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}}},"arg":{"_type":"lambda","varName":"dot","body":{"_type":"lambda","varName":"body","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"dot"}},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"finish"},"arg":{"_type":"ref","varName":"data"}},"arg":{"_type":"ref","varName":"body"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Annotation expects dot after name and data "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}}}}}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"bodyStructPat"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"bodyStructPat = regexp '\\\\|\\\\\\\\|\\\\@'"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"regexp"},"arg":{"_type":"lit","value":"\\|\\\\|\\@"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createApply"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"createApply inList names cont = withStripped inList \\list .\n  withCons list (parseErr \"Funcion apply expecting a non-empty list \" (loc inList)) \\h t .\n    createAst h names \\func . chainApply func t names cont"}},"arg":{"_type":"lambda","varName":"inList","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withStripped"},"arg":{"_type":"ref","varName":"inList"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Funcion apply expecting a non-empty list "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"inList"}}}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"chainApply"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"blockStarts"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"blockStarts = cons '\\\\' (cons '\\\\\\\\' (cons '\\\\@' nil))"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\@"}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"chainApply"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"chainApply func list names cont = withCons list (cont func) \\argItem rest .\n  and (isToken argItem) (contains blockStarts (tokenString argItem))\n    createAst list names \\arg . cont (apply func arg)\n    createAst argItem names \\arg . chainApply (apply func arg) rest names cont"}},"arg":{"_type":"lambda","varName":"func","body":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"func"}}},"arg":{"_type":"lambda","varName":"argItem","body":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"argItem"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"blockStarts"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"argItem"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"arg","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"apply"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"arg"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"argItem"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"arg","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"chainApply"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"apply"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"arg"}}},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"cleanTokens"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"cleanTokens start toks cont = isToken toks\n  cont (tokenString toks)\n  withCons toks (cont toks) \\head tail .\n    cleanTokens start head \\head .\n      cleanTokens start tail \\tail .\n        cont (cons head tail)"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"toks"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"toks"}}},"arg":{"_type":"lambda","varName":"head","body":{"_type":"lambda","varName":"tail","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cleanTokens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"head"}},"arg":{"_type":"lambda","varName":"head","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cleanTokens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"tail"}},"arg":{"_type":"lambda","varName":"tail","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head"}},"arg":{"_type":"ref","varName":"tail"}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createLet"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"createLet start list names cont = withCons list\n  parseErr \"No variable or body for let \" (loc start)\n  \\binding body . eq body nil (createAst binding name cont)\n    getLetNames start list names \\newNames .\n      createSublets start binding body newNames cont"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"No variable or body for let "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}}},"arg":{"_type":"lambda","varName":"binding","body":{"_type":"lambda","varName":"body","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"body"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"binding"}},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getLetNames"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"newNames","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createSublets"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"binding"}},"arg":{"_type":"ref","varName":"body"}},"arg":{"_type":"ref","varName":"newNames"}},"arg":{"_type":"ref","varName":"cont"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"getLetNames"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"getLetNames start list names cont = \\\\\n  err = parseErr \"Let expected binding \" (loc start)\n  .\n  withCons list (cont names) \\binding body .\n    isTokenString binding '.' (cont names)\n      withParens binding err \\start end def .\n        withCons def err \\name rest .\n          withToken name err \\str pos .\n            getLetNames start body (cons str names) cont"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"let","varName":"err","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Let expected binding "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"names"}}},"arg":{"_type":"lambda","varName":"binding","body":{"_type":"lambda","varName":"body","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"binding"}},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"names"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withParens"},"arg":{"_type":"ref","varName":"binding"}},"arg":{"_type":"ref","varName":"err"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"def","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"def"}},"arg":{"_type":"ref","varName":"err"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"err"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pos","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getLetNames"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"body"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"names"}}},"arg":{"_type":"ref","varName":"cont"}}}}}}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createSublets"}},"arg":{"_type":"lit","value":5}},"arg":{"_type":"lit","value":"createSublets start binding body names cont =\n  isTokenString binding '.' (createAst body names cont)\n    withCons body (parseErr \"Let expected a body \" (loc start)) \\bodyH bodyT .\n      getNameAndDef (parensStart binding) (parensContent binding) names \\name def .\n        createSublets start bodyH bodyT names \\bodyAst .\n          cont (let (tokenString name) def bodyAst)"}},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"binding","body":{"_type":"lambda","varName":"body","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"binding"}},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"body"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"body"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Let expected a body "}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"start"}}}},"arg":{"_type":"lambda","varName":"bodyH","body":{"_type":"lambda","varName":"bodyT","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getNameAndDef"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parensStart"},"arg":{"_type":"ref","varName":"binding"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parensContent"},"arg":{"_type":"ref","varName":"binding"}}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"def","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createSublets"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"bodyH"}},"arg":{"_type":"ref","varName":"bodyT"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"bodyAst","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"let"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"name"}}},"arg":{"_type":"ref","varName":"def"}},"arg":{"_type":"ref","varName":"bodyAst"}}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"getNameAndDef"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"getNameAndDef pos binding names cont =\n  withCons (tail binding) (parseErr \"Let expected binding at \" pos) \\snd sndT .\n    isTokenString snd '=' (createAst sndT names \\def . cont (head binding) def)\n      getLetLambda pos (tail binding) nil names \\lamb . cont (head binding) lamb"}},"arg":{"_type":"lambda","varName":"pos","body":{"_type":"lambda","varName":"binding","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"binding"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Let expected binding at "}},"arg":{"_type":"ref","varName":"pos"}}},"arg":{"_type":"lambda","varName":"snd","body":{"_type":"lambda","varName":"sndT","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"snd"}},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"sndT"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"def","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"binding"}}},"arg":{"_type":"ref","varName":"def"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getLetLambda"},"arg":{"_type":"ref","varName":"pos"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"binding"}}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"lamb","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"binding"}}},"arg":{"_type":"ref","varName":"lamb"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"getLetLambda"}},"arg":{"_type":"lit","value":5}},"arg":{"_type":"lit","value":"getLetLambda pos def args names cont =\n  withCons def (parseErr \"Let expected binding at \" pos) \\arg rest .\n    not (isToken arg) (parseErr \"Let expected binding at \" pos)\n      isTokenString arg '='\n        createAst (cons (token '\\\\' pos) (append (reverse args) (cons (token '.' (position arg)) rest))) names cont\n        getLetLambda pos rest (cons arg args) names cont"}},"arg":{"_type":"lambda","varName":"pos","body":{"_type":"lambda","varName":"def","body":{"_type":"lambda","varName":"args","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"def"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Let expected binding at "}},"arg":{"_type":"ref","varName":"pos"}}},"arg":{"_type":"lambda","varName":"arg","body":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"not"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"arg"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Let expected binding at "}},"arg":{"_type":"ref","varName":"pos"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"arg"}},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"ref","varName":"pos"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"reverse"},"arg":{"_type":"ref","varName":"args"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"arg"}}}},"arg":{"_type":"ref","varName":"rest"}}}}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getLetLambda"},"arg":{"_type":"ref","varName":"pos"}},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"arg"}},"arg":{"_type":"ref","varName":"args"}}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"cont"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parenGroups"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"parenGroups = cons (cons '(' ')') nil"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"("}},"arg":{"_type":"lit","value":")"}}},"arg":{"_type":"ref","varName":"nil"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"scanLineG"}},"arg":{"_type":"lit","value":5}},"arg":{"_type":"lit","value":"scanLineG str pat groups onDef onExpr = \\\\\n  toks = tokens str pat\n  groupToks = foldr (\\el value . el \\h t . cons h (cons t value)) (cons '=' blockStarts) groups\n  .\n  # check if it's a definition\n  find (\\tok . or (contains groupToks (tokenString tok)) (isCons (strMatch (tokenString tok) '^\\n'))) toks (\\item . isTokenString item '=') false\n    toks \\name rest . \\\\\n      parseIt func = \\\\\n        parsed = parseToks (checkSetDataType func rest name) groups\n        .\n        onDef (ifNotErr parsed \\list . createDef list name (arity rest 0) str)\n      .\n      isTokenString (head rest) '='\n        isTokenString (head (tail rest)) '\\\\'\n          parseIt (setTypeAnno (tail rest) (tokenString name))\n          parseIt (tail rest)\n        transformDef name rest \\def .\n          parseIt (cons (token '\\\\' (- (position (head rest)) 1)) def)\n    ifNotErr (parseToks toks groups) \\list . onExpr list"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"lambda","varName":"groups","body":{"_type":"lambda","varName":"onDef","body":{"_type":"lambda","varName":"onExpr","body":{"_type":"let","varName":"toks","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"tokens"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}},"body":{"_type":"let","varName":"groupToks","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldr"},"arg":{"_type":"lambda","varName":"el","body":{"_type":"lambda","varName":"value","body":{"_type":"apply","func":{"_type":"ref","varName":"el"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"value"}}}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"ref","varName":"blockStarts"}}},"arg":{"_type":"ref","varName":"groups"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"find"},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"groupToks"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"tok"}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strMatch"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"lit","value":"^\n"}}}}}},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"lambda","varName":"item","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"item"}},"arg":{"_type":"lit","value":"="}}}},"arg":{"_type":"ref","varName":"false"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"toks"},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"rest","body":{"_type":"let","varName":"parseIt","value":{"_type":"lambda","varName":"func","body":{"_type":"let","varName":"parsed","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseToks"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"checkSetDataType"},"arg":{"_type":"ref","varName":"func"}},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"ref","varName":"name"}}},"arg":{"_type":"ref","varName":"groups"}},"body":{"_type":"apply","func":{"_type":"ref","varName":"onDef"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"ref","varName":"parsed"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createDef"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"arity"},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"ref","varName":"str"}}}}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"rest"}}},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"rest"}}}},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parseIt"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setTypeAnno"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"rest"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"name"}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parseIt"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"rest"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"transformDef"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"rest"}},"arg":{"_type":"lambda","varName":"def","body":{"_type":"apply","func":{"_type":"ref","varName":"parseIt"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"-"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"rest"}}}},"arg":{"_type":"lit","value":1}}}},"arg":{"_type":"ref","varName":"def"}}}}}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseToks"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"onExpr"},"arg":{"_type":"ref","varName":"list"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseLineG"}},"arg":{"_type":"lit","value":6}},"arg":{"_type":"lit","value":"parseLineG str pat names groups onDef onExpr = \\\\\n  astCallback cb = \\list . createAst list names \\ast . cb ast\n  .\n  scanLineG str pat groups (astCallback onDef) (astCallback onExpr)"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"groups","body":{"_type":"lambda","varName":"onDef","body":{"_type":"lambda","varName":"onExpr","body":{"_type":"let","varName":"astCallback","value":{"_type":"lambda","varName":"cb","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"ast","body":{"_type":"apply","func":{"_type":"ref","varName":"cb"},"arg":{"_type":"ref","varName":"ast"}}}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"scanLineG"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}},"arg":{"_type":"ref","varName":"groups"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"astCallback"},"arg":{"_type":"ref","varName":"onDef"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"astCallback"},"arg":{"_type":"ref","varName":"onExpr"}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"transformDef"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"transformDef name toks cont = withCons toks (parseErr \"Bad definition, expecting tokens\" (loc name)) \\h t .\n  isTokenString h '='\n    isTokenString (head t) '\\\\'\n      cont (cons (token '.' (position h)) (setTypeAnno t (tokenString name)))\n      cont (cons (token '.' (position h)) t)\n    transformDef name t \\list . cont (cons h list)"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"Bad definition, expecting tokens"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"name"}}}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"h"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setTypeAnno"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"name"}}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"h"}}}},"arg":{"_type":"ref","varName":"t"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"transformDef"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"list"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"setTypeAnno"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"setTypeAnno toks name = \\\\\n  tok = \\str . token str (position toks)\n  .\n  cons (tok '\\\\@') (cons (tok 'type') (cons (tok name) (cons (tok '.') toks)))"}},"arg":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"name","body":{"_type":"let","varName":"tok","value":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"toks"}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lit","value":"\\@"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lit","value":"type"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"ref","varName":"name"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lit","value":"."}}},"arg":{"_type":"ref","varName":"toks"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"setDataTypeAnno"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"setDataTypeAnno toks name = \\\\\n  tok = \\str . token str (position toks)\n  .\n  cons (tok '\\\\@') (cons (tok 'dataType') (cons (tok (tokenString name)) (cons (tok '.') toks)))"}},"arg":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"name","body":{"_type":"let","varName":"tok","value":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"toks"}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lit","value":"\\@"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lit","value":"dataType"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"name"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lit","value":"."}}},"arg":{"_type":"ref","varName":"toks"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"createDef"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"createDef def name arity src = \\\\\n  tok str = token str (position def)\n  .\n  jsonStringify (tokenString name) (\\err . parseErr (strCat (cons \"Bad function name \" (cons (loc name) nil))) err) \\nameStr .\n    jsonStringify src (\\err . parseErr (strCat (cons \"Bad source \" (cons (loc name) nil))) err) \\srcStr .\n      cons (tok 'define') (cons (tok nameStr) (cons (tok (strString arity)) (cons (tok srcStr) (cons def nil))))"}},"arg":{"_type":"lambda","varName":"def","body":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"arity","body":{"_type":"lambda","varName":"src","body":{"_type":"let","varName":"tok","value":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"def"}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"jsonStringify"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"name"}}},"arg":{"_type":"lambda","varName":"err","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"Bad function name "}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"name"}}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"ref","varName":"err"}}}},"arg":{"_type":"lambda","varName":"nameStr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"jsonStringify"},"arg":{"_type":"ref","varName":"src"}},"arg":{"_type":"lambda","varName":"err","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"Bad source "}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"loc"},"arg":{"_type":"ref","varName":"name"}}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"ref","varName":"err"}}}},"arg":{"_type":"lambda","varName":"srcStr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"lit","value":"define"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"ref","varName":"nameStr"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strString"},"arg":{"_type":"ref","varName":"arity"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tok"},"arg":{"_type":"ref","varName":"srcStr"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"def"}},"arg":{"_type":"ref","varName":"nil"}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"checkSetDataType"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"checkSetDataType toks curToks name = withCons curToks toks \\h t .\n  isTokenString h '='\n    isTokenString (head t) '\\\\'\n      setDataTypeAnno toks name\n      toks\n    checkSetDataType toks t name"}},"arg":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"curToks","body":{"_type":"lambda","varName":"name","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"curToks"}},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setDataTypeAnno"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"name"}}},"arg":{"_type":"ref","varName":"toks"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"checkSetDataType"},"arg":{"_type":"ref","varName":"toks"}},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"name"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"arity"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"arity toks n = isTokenString (head toks) '=' n (arity (tail toks) (+ n 1))"}},"arg":{"_type":"lambda","varName":"toks","body":{"_type":"lambda","varName":"n","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"toks"}}},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"ref","varName":"n"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"arity"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"toks"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"ref","varName":"n"}},"arg":{"_type":"lit","value":1}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"tokListStr"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"tokListStr toks = jsonStringify (join (map (\\t . tokenString t) toks) ' ')"}},"arg":{"_type":"lambda","varName":"toks","body":{"_type":"apply","func":{"_type":"ref","varName":"jsonStringify"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"join"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"map"},"arg":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"t"}}}},"arg":{"_type":"ref","varName":"toks"}}},"arg":{"_type":"lit","value":" "}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"linePat"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"linePat = regexp '\\\\r?\\\\n(?=[^ ]|$)'"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"regexp"},"arg":{"_type":"lit","value":"\\r?\\n(?=[^ ]|$)"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"emptyLinePat"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"emptyLinePat = regexp '^[ \\\\i]*\\\\#.*|^[ \\\\i]*$|^\\\\r?\\\\n[ \\\\i]*$'"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"regexp"},"arg":{"_type":"lit","value":"^[ \\i]*\\#.*|^[ \\i]*$|^\\r?\\n[ \\i]*$"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"lineScrub"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"lineScrub = regexpFlags '\\\\r\\\\n' 'g'"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"regexpFlags"},"arg":{"_type":"lit","value":"\\r\\n"}},"arg":{"_type":"lit","value":"g"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"linesForFile"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"linesForFile text = filter\n  \\line . isNil (strMatch line emptyLinePat)\n  strSplit (strReplace text lineScrub '\\n') linePat"}},"arg":{"_type":"lambda","varName":"text","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filter"},"arg":{"_type":"lambda","varName":"line","body":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strMatch"},"arg":{"_type":"ref","varName":"line"}},"arg":{"_type":"ref","varName":"emptyLinePat"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strSplit"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strReplace"},"arg":{"_type":"ref","varName":"text"}},"arg":{"_type":"ref","varName":"lineScrub"}},"arg":{"_type":"lit","value":"\n"}}},"arg":{"_type":"ref","varName":"linePat"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"defPat"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"defPat = regexp '^[^ =]+.* =( |$)'"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"regexp"},"arg":{"_type":"lit","value":"^[^ =]+.* =( |$)"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"namesForLines"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"namesForLines lines = foldl\n  \\result line . \\\\\n    m = strMatch line defPat\n    .\n    isNil m result (cons (head (tail m)) result)\n  nil\n  lines"}},"arg":{"_type":"lambda","varName":"lines","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldl"},"arg":{"_type":"lambda","varName":"result","body":{"_type":"lambda","varName":"line","body":{"_type":"let","varName":"m","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strMatch"},"arg":{"_type":"ref","varName":"line"}},"arg":{"_type":"ref","varName":"defPat"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"m"}},"arg":{"_type":"ref","varName":"result"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"m"}}}},"arg":{"_type":"ref","varName":"result"}}}}}}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"lines"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"runParseFilters"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"runParseFilters filters line = filters\n  \\h t D . bind (h line) \\filtered . runParseFilters t filtered\n  line"}},"arg":{"_type":"lambda","varName":"filters","body":{"_type":"lambda","varName":"line","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filters"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"h"},"arg":{"_type":"ref","varName":"line"}}},"arg":{"_type":"lambda","varName":"filtered","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"runParseFilters"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"filtered"}}}}}}}},"arg":{"_type":"ref","varName":"line"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isBlockStart"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"isBlockStart tok = and\n  isToken tok\n  contains blockStarts (tokenString tok)"}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"tok"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"blockStarts"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"tok"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"macroSub"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"macroSub macs expr = postProcessMacro -1 -1 (baseMacroSub macs expr)"}},"arg":{"_type":"lambda","varName":"macs","body":{"_type":"lambda","varName":"expr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"postProcessMacro"},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"expr"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"consifyMacroValue"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"consifyMacroValue value = isCons value value (cons value nil)"}},"arg":{"_type":"lambda","varName":"value","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"value"}},"arg":{"_type":"ref","varName":"value"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"value"}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"baseMacroSub"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"baseMacroSub macs expr = isToken expr\n  expr\n  isParens expr\n    expr \\start end content . \\\\\n      result = baseMacroSub macs content\n      .\n      isToken result result (parens start end result)\n    withCons expr expr \\h t .\n      isBlockStart h\n        cons h\n          isTokenString h '\\\\\\\\'\n            macroSubLet macs t\n            macroSubBody '.' macs t\n        withToken h\n          \\\\\n            subH = baseMacroSub macs h\n            .\n            withToken subH\n              cons subH (map (baseMacroSub macs) t)\n              \\tok pos . baseMacroSub macs (cons subH t)\n          #d \"TOK: \" h (\\tok pos . assoc tok macs\n          \\tok pos . assoc tok macs\n            \\def . baseMacroSub macs (def t)\n            cons h (map (baseMacroSub macs) t)"}},"arg":{"_type":"lambda","varName":"macs","body":{"_type":"lambda","varName":"expr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"expr"},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"content","body":{"_type":"let","varName":"result","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"content"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"result"}},"arg":{"_type":"ref","varName":"result"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"ref","varName":"result"}}}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withCons"},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isBlockStart"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"\\\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"macroSubLet"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"macroSubBody"},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"t"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"let","varName":"subH","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"h"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"withToken"},"arg":{"_type":"ref","varName":"subH"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"subH"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"map"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}}},"arg":{"_type":"ref","varName":"t"}}}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"lambda","varName":"pos","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"subH"}},"arg":{"_type":"ref","varName":"t"}}}}}}}},"arg":{"_type":"lambda","varName":"tok","body":{"_type":"lambda","varName":"pos","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"assoc"},"arg":{"_type":"ref","varName":"tok"}},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"lambda","varName":"def","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"def"},"arg":{"_type":"ref","varName":"t"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"map"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}}},"arg":{"_type":"ref","varName":"t"}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"macroSubLet"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"macroSubLet macs list = list\n  \\h t D . isTokenString h '.'\n    cons h (baseMacroSub macs t)\n    cons (setParens h \\content . macroSubBody '=' macs content) (macroSubLet macs t)\n  # Don't bother with parse errors at this point -- ast generator will detect them\n  nil"}},"arg":{"_type":"lambda","varName":"macs","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"baseMacroSub"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"t"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setParens"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lambda","varName":"content","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"macroSubBody"},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"content"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"macroSubLet"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"t"}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"macroSubBody"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"macroSubBody char macs list = list\n  \\h t D . cons h\n    isTokenString h char baseMacroSub (macroSubBody char)\n      macs\n      t\n  nil"}},"arg":{"_type":"lambda","varName":"char","body":{"_type":"lambda","varName":"macs","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"char"}},"arg":{"_type":"ref","varName":"baseMacroSub"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"macroSubBody"},"arg":{"_type":"ref","varName":"char"}}},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"t"}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"postProcessMacro"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"postProcessMacro before after expr = isString expr\n  token expr (eq after -1 before after)\n  isParens expr\n    expr \\start end contents . parens start end (postProcessMacro start end contents)\n    isCons expr\n      expr \\h t .\n        isToken h\n          cons h (postProcessMacro (+ 1 (+ (tokenPos h) (strLen (tokenString h)))) -1 t)\n          \\\\\n            posStart = position h\n            posEnd = position t\n            t2 = postProcessMacro -1 after t\n            h2 = postProcessMacro before -1 h\n            .\n            eq posStart -1\n              cons (postProcessMacro before (position t2) h) t2\n              cons h2 (postProcessMacro (+ 1 (lexEnd h2)) after t)\n      expr"}},"arg":{"_type":"lambda","varName":"before","body":{"_type":"lambda","varName":"after","body":{"_type":"lambda","varName":"expr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isString"},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"after"}},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"ref","varName":"before"}},"arg":{"_type":"ref","varName":"after"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"expr"},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"contents","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"postProcessMacro"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"ref","varName":"contents"}}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"expr"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"expr"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"postProcessMacro"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"lit","value":1}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenPos"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"h"}}}}}},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"ref","varName":"t"}}}},"arg":{"_type":"let","varName":"posStart","value":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"h"}},"body":{"_type":"let","varName":"posEnd","value":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"t"}},"body":{"_type":"let","varName":"t2","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"postProcessMacro"},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"ref","varName":"after"}},"arg":{"_type":"ref","varName":"t"}},"body":{"_type":"let","varName":"h2","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"postProcessMacro"},"arg":{"_type":"ref","varName":"before"}},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"ref","varName":"h"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"eq"},"arg":{"_type":"ref","varName":"posStart"}},"arg":{"_type":"lit","value":-1}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"postProcessMacro"},"arg":{"_type":"ref","varName":"before"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"position"},"arg":{"_type":"ref","varName":"t2"}}},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"ref","varName":"t2"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h2"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"postProcessMacro"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"+"},"arg":{"_type":"lit","value":1}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"lexEnd"},"arg":{"_type":"ref","varName":"h2"}}}},"arg":{"_type":"ref","varName":"after"}},"arg":{"_type":"ref","varName":"t"}}}}}}}}}}}}},"arg":{"_type":"ref","varName":"expr"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"defMacro"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"defMacro name def = bind (getValue 'macroDefs') \\macs . setValue 'macroDefs' (acons name def macs)"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"def","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"macroDefs"}}},"arg":{"_type":"lambda","varName":"macs","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"macroDefs"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"acons"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"def"}},"arg":{"_type":"ref","varName":"macs"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"delimiterListPrefix"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"delimiterListPrefix = \"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"|'(?:\\\\\\\\.|[^'])*'|\\\\n *|#.*| +\""}},"arg":{"_type":"lit","value":"\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\n *|#.*| +"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"regexpEscapePat"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"regexpEscapePat = regexpFlags '[\\\\-\\\\[\\\\]/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\\\^\\\\$\\\\|]' 'g'"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"regexpFlags"},"arg":{"_type":"lit","value":"[\\-\\[\\]/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]"}},"arg":{"_type":"lit","value":"g"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"addToken"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"addToken del = bind (getValue 'tokenList')\n  \\dels . contains dels del\n    false\n    \\\\\n      newDels = insertSorted (\\a b . > (strLen a) (strLen b)) del dels\n      .\n      bind (setValue 'tokenList' newDels)\n        \\_ . computeTokenPat newDels"}},"arg":{"_type":"lambda","varName":"del","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenList"}}},"arg":{"_type":"lambda","varName":"dels","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"dels"}},"arg":{"_type":"ref","varName":"del"}},"arg":{"_type":"ref","varName":"false"}},"arg":{"_type":"let","varName":"newDels","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"insertSorted"},"arg":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"a"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"b"}}}}}},"arg":{"_type":"ref","varName":"del"}},"arg":{"_type":"ref","varName":"dels"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenList"}},"arg":{"_type":"ref","varName":"newDels"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"ref","varName":"computeTokenPat"},"arg":{"_type":"ref","varName":"newDels"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"computeTokenPat"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"computeTokenPat dels = \\\\\n  delPats = map (\\item . strReplace item regexpEscapePat \"\\\\$&\") dels\n  newPat = strCat (cons '(' (cons (join (cons delimiterListPrefix delPats) '|') (cons ')' nil)))\n  .\n  setValue 'tokenPat' newPat"}},"arg":{"_type":"lambda","varName":"dels","body":{"_type":"let","varName":"delPats","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"map"},"arg":{"_type":"lambda","varName":"item","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"strReplace"},"arg":{"_type":"ref","varName":"item"}},"arg":{"_type":"ref","varName":"regexpEscapePat"}},"arg":{"_type":"lit","value":"\\$&"}}}},"arg":{"_type":"ref","varName":"dels"}},"body":{"_type":"let","varName":"newPat","value":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"("}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"join"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"delimiterListPrefix"}},"arg":{"_type":"ref","varName":"delPats"}}},"arg":{"_type":"lit","value":"|"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":")"}},"arg":{"_type":"ref","varName":"nil"}}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenPat"}},"arg":{"_type":"ref","varName":"newPat"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"addTokenGroup"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"addTokenGroup open close = bind (addToken open)\n  \\_ . bind (addToken close)\n    \\_ . bind (getValue 'tokenGroups')\n      \\gr . setValue 'tokenGroups' (acons open close gr)"}},"arg":{"_type":"lambda","varName":"open","body":{"_type":"lambda","varName":"close","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"addToken"},"arg":{"_type":"ref","varName":"open"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"addToken"},"arg":{"_type":"ref","varName":"close"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenGroups"}}},"arg":{"_type":"lambda","varName":"gr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenGroups"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"acons"},"arg":{"_type":"ref","varName":"open"}},"arg":{"_type":"ref","varName":"close"}},"arg":{"_type":"ref","varName":"gr"}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parse"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"parse str pat = ifNotErr (parseIndent (token '\\n' 0) (tokens str pat) nil parenGroups) \\list . list \\h t . stripParens h"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseIndent"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"lit","value":"\n"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"tokens"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"parenGroups"}}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"ref","varName":"stripParens"},"arg":{"_type":"ref","varName":"h"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseG"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"parseG str pat groups = ifNotErr (parseIndent (token '\\n' 0) (tokens str pat) nil groups) \\list . list \\h t . stripParens h"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"ifNotErr"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseIndent"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"token"},"arg":{"_type":"lit","value":"\n"}},"arg":{"_type":"lit","value":0}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"tokens"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"ref","varName":"stripParens"},"arg":{"_type":"ref","varName":"h"}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseToAst"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"parseToAst str pat = createAst (parse str pat) nil id"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parse"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"id"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseM"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"parseM str =\n  bind (getValue 'tokenPat')\n    \\tokPat . bind (getValue 'tokenGroups')\n      \\groups . parseG str tokPat groups"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenPat"}}},"arg":{"_type":"lambda","varName":"tokPat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenGroups"}}},"arg":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseG"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"tokPat"}},"arg":{"_type":"ref","varName":"groups"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"scanLine"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"scanLine str pat onDef onExpr = scanLineG str pat parenGroups onDef onExpr"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"lambda","varName":"onDef","body":{"_type":"lambda","varName":"onExpr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"scanLineG"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}},"arg":{"_type":"ref","varName":"parenGroups"}},"arg":{"_type":"ref","varName":"onDef"}},"arg":{"_type":"ref","varName":"onExpr"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseLine"}},"arg":{"_type":"lit","value":5}},"arg":{"_type":"lit","value":"parseLine str pat names onDef onExpr = parseLineG str pat names parenGroups onDef onExpr"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"lambda","varName":"pat","body":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"onDef","body":{"_type":"lambda","varName":"onExpr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseLineG"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"pat"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"parenGroups"}},"arg":{"_type":"ref","varName":"onDef"}},"arg":{"_type":"ref","varName":"onExpr"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseLineM"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"parseLineM str = bind (getValue 'tokenPat')\n  \\tokPat . bind (getValue 'tokenGroups')\n    \\groups . parseLineG str tokPat nil groups id id"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenPat"}}},"arg":{"_type":"lambda","varName":"tokPat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenGroups"}}},"arg":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseLineG"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"tokPat"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"groups"}},"arg":{"_type":"ref","varName":"id"}},"arg":{"_type":"ref","varName":"id"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"macroSubM"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"macroSubM expr =\n  bind (getValue 'macroDefs')\n    \\macs . macroSub macs expr"}},"arg":{"_type":"lambda","varName":"expr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"macroDefs"}}},"arg":{"_type":"lambda","varName":"macs","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"macroSub"},"arg":{"_type":"ref","varName":"macs"}},"arg":{"_type":"ref","varName":"expr"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"macroParse"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"macroParse str =\n  bind (parseM str)\n    \\ex . macroSubM ex"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parseM"},"arg":{"_type":"ref","varName":"str"}}},"arg":{"_type":"lambda","varName":"ex","body":{"_type":"apply","func":{"_type":"ref","varName":"macroSubM"},"arg":{"_type":"ref","varName":"ex"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"tokensM"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"tokensM str =\n  bind (getValue 'tokenPat')\n    \\delimiterPat . tokens str delimiterPat"}},"arg":{"_type":"lambda","varName":"str","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenPat"}}},"arg":{"_type":"lambda","varName":"delimiterPat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"tokens"},"arg":{"_type":"ref","varName":"str"}},"arg":{"_type":"ref","varName":"delimiterPat"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseLines"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"parseLines lines result = lines\n  \\h t D . bind (parseLineM h)\n    \\ast . parseLines t (cons ast result)\n  reverse result"}},"arg":{"_type":"lambda","varName":"lines","body":{"_type":"lambda","varName":"result","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"lines"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"parseLineM"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"lambda","varName":"ast","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseLines"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"ast"}},"arg":{"_type":"ref","varName":"result"}}}}}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"reverse"},"arg":{"_type":"ref","varName":"result"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"parseFile"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"parseFile text = parseLines (linesForFile text) nil"}},"arg":{"_type":"lambda","varName":"text","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseLines"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"linesForFile"},"arg":{"_type":"ref","varName":"text"}}},"arg":{"_type":"ref","varName":"nil"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"simpleScanLine"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"simpleScanLine line = bind (getValue 'tokenPat')\n  \\tokenPat . bind (getValue 'tokenGroups')\n    \\groups . scanLineG line tokenPat groups id id"}},"arg":{"_type":"lambda","varName":"line","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenPat"}}},"arg":{"_type":"lambda","varName":"tokenPat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenGroups"}}},"arg":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"scanLineG"},"arg":{"_type":"ref","varName":"line"}},"arg":{"_type":"ref","varName":"tokenPat"}},"arg":{"_type":"ref","varName":"groups"}},"arg":{"_type":"ref","varName":"id"}},"arg":{"_type":"ref","varName":"id"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"scanLineM"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"scanLineM line = bind (getValue 'tokenPat')\n  \\tokenPat . bind (getValue 'tokenGroups')\n    \\groups . bind (getValue 'parseFilters')\n      \\filters . bind (getValue 'macroDefs')\n        \\macros . bind (runParseFilters filters (scanLineG line tokenPat groups id id))\n          \\scanned . macroSub macros scanned"}},"arg":{"_type":"lambda","varName":"line","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenPat"}}},"arg":{"_type":"lambda","varName":"tokenPat","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenGroups"}}},"arg":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"parseFilters"}}},"arg":{"_type":"lambda","varName":"filters","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"macroDefs"}}},"arg":{"_type":"lambda","varName":"macros","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"runParseFilters"},"arg":{"_type":"ref","varName":"filters"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"scanLineG"},"arg":{"_type":"ref","varName":"line"}},"arg":{"_type":"ref","varName":"tokenPat"}},"arg":{"_type":"ref","varName":"groups"}},"arg":{"_type":"ref","varName":"id"}},"arg":{"_type":"ref","varName":"id"}}}},"arg":{"_type":"lambda","varName":"scanned","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"macroSub"},"arg":{"_type":"ref","varName":"macros"}},"arg":{"_type":"ref","varName":"scanned"}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"newParseLine"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"newParseLine names line = bind (scanLineM line)\n  \\scanned . createAst scanned names \\ast . ast"}},"arg":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"line","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"scanLineM"},"arg":{"_type":"ref","varName":"line"}}},"arg":{"_type":"lambda","varName":"scanned","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"createAst"},"arg":{"_type":"ref","varName":"scanned"}},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"lambda","varName":"ast","body":{"_type":"ref","varName":"ast"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"runLine"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"runLine names line = bind (newParseLine names line)\n  \\ast . bind (runAst ast)\n    \\result . cons ast result"}},"arg":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"line","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"newParseLine"},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"line"}}},"arg":{"_type":"lambda","varName":"ast","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"runAst"},"arg":{"_type":"ref","varName":"ast"}}},"arg":{"_type":"lambda","varName":"result","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"ast"}},"arg":{"_type":"ref","varName":"result"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"runLines"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"runLines names lines = lines\n  \\h t D . bind (runLine names h)\n    \\line . bind (runLines names t)\n      \\rest . cons line rest\n  nil"}},"arg":{"_type":"lambda","varName":"names","body":{"_type":"lambda","varName":"lines","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"lines"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"runLine"},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"lambda","varName":"line","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"runLines"},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"line"}},"arg":{"_type":"ref","varName":"rest"}}}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"runFile"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"runFile text = \\\\\n  lines = linesForFile text\n  names = namesForLines lines\n  .\n  runLines names lines"}},"arg":{"_type":"lambda","varName":"text","body":{"_type":"let","varName":"lines","value":{"_type":"apply","func":{"_type":"ref","varName":"linesForFile"},"arg":{"_type":"ref","varName":"text"}},"body":{"_type":"let","varName":"names","value":{"_type":"apply","func":{"_type":"ref","varName":"namesForLines"},"arg":{"_type":"ref","varName":"lines"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"runLines"},"arg":{"_type":"ref","varName":"names"}},"arg":{"_type":"ref","varName":"lines"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"load"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"load file = bind (readFile file)\n  \\result . result\n    \\err . err\n    \\contents . bind (getValue 'stdTokenPacks')\n      \\stds . bind (getValue 'activeTokenPacks')\n        \\activePacks . bind (resetTokenPacks stds)\n          \\_ . bind (runFile contents)\n            \\_ . isNil activePacks\n              bind (getValue 'stdTokenPacks')\n                \\stds . resetTokenPacks stds\n              resetTokenPacks activePacks"}},"arg":{"_type":"lambda","varName":"file","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"readFile"},"arg":{"_type":"ref","varName":"file"}}},"arg":{"_type":"lambda","varName":"result","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"result"},"arg":{"_type":"lambda","varName":"err","body":{"_type":"ref","varName":"err"}}},"arg":{"_type":"lambda","varName":"contents","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"stdTokenPacks"}}},"arg":{"_type":"lambda","varName":"stds","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"activeTokenPacks"}}},"arg":{"_type":"lambda","varName":"activePacks","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"resetTokenPacks"},"arg":{"_type":"ref","varName":"stds"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"runFile"},"arg":{"_type":"ref","varName":"contents"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"activePacks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"stdTokenPacks"}}},"arg":{"_type":"lambda","varName":"stds","body":{"_type":"apply","func":{"_type":"ref","varName":"resetTokenPacks"},"arg":{"_type":"ref","varName":"stds"}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"resetTokenPacks"},"arg":{"_type":"ref","varName":"activePacks"}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"require"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"require file = bind (getValue 'requiredFiles')\n  \\files . contains files file nil\n    bind (load file)\n      \\_ . bind (setValue 'requiredFiles' (cons file files))\n        \\_ . nil"}},"arg":{"_type":"lambda","varName":"file","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"requiredFiles"}}},"arg":{"_type":"lambda","varName":"files","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"files"}},"arg":{"_type":"ref","varName":"file"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"load"},"arg":{"_type":"ref","varName":"file"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"requiredFiles"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"file"}},"arg":{"_type":"ref","varName":"files"}}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"ref","varName":"nil"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"defTokenPack"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"defTokenPack name pack = bind (getValue 'tokenPacks')\n  \\packs . setValue 'tokenPacks' (acons name pack packs)"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"lambda","varName":"pack","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenPacks"}}},"arg":{"_type":"lambda","varName":"packs","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenPacks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"acons"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"pack"}},"arg":{"_type":"ref","varName":"packs"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"useTokenPack"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"useTokenPack name = bind (getValue 'tokenPacks')\n  \\packs . bind (getValue 'tokenGroups')\n    \\groups . bind (getValue 'tokenList')\n      \\tokens . bind (getValue 'activeTokenPacks')\n        \\activePacks . bind (getValue 'parseFilters')\n          \\filters . assoc name packs\n            \\pack . \\\\\n              groupToks = foldl (\\value el . el \\h t . cons h (cons t value)) nil (head (tail pack))\n              newToks = quicksort (\\a b . > (strLen a) (strLen b)) (append (head pack) (append groupToks tokens))\n              .\n              bind (setValue 'tokenList' newToks)\n                \\_ . bind (setValue 'tokenGroups' (append (head (tail pack)) groups))\n                  \\_ . bind (setValue 'parseFilters' (append filters (head (tail (tail pack)))))\n                    \\_ . bind (computeTokenPat newToks)\n                      \\_ . setValue 'activeTokenPacks' (cons name activePacks)\n            nil"}},"arg":{"_type":"lambda","varName":"name","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenPacks"}}},"arg":{"_type":"lambda","varName":"packs","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenGroups"}}},"arg":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenList"}}},"arg":{"_type":"lambda","varName":"tokens","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"activeTokenPacks"}}},"arg":{"_type":"lambda","varName":"activePacks","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"parseFilters"}}},"arg":{"_type":"lambda","varName":"filters","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"assoc"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"packs"}},"arg":{"_type":"lambda","varName":"pack","body":{"_type":"let","varName":"groupToks","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldl"},"arg":{"_type":"lambda","varName":"value","body":{"_type":"lambda","varName":"el","body":{"_type":"apply","func":{"_type":"ref","varName":"el"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"value"}}}}}}}}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"pack"}}}},"body":{"_type":"let","varName":"newToks","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"quicksort"},"arg":{"_type":"lambda","varName":"a","body":{"_type":"lambda","varName":"b","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"a"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strLen"},"arg":{"_type":"ref","varName":"b"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"pack"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"ref","varName":"groupToks"}},"arg":{"_type":"ref","varName":"tokens"}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenList"}},"arg":{"_type":"ref","varName":"newToks"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenGroups"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"pack"}}}},"arg":{"_type":"ref","varName":"groups"}}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"parseFilters"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"ref","varName":"filters"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"pack"}}}}}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"computeTokenPat"},"arg":{"_type":"ref","varName":"newToks"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"activeTokenPacks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"name"}},"arg":{"_type":"ref","varName":"activePacks"}}}}}}}}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"resetTokenPacks"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"resetTokenPacks packs = bind (setValue 'tokenGroups' nil)\n  \\_ . bind (setValue 'tokenList' nil)\n    \\_ . bind (setValue 'activeTokenPacks' nil)\n      \\_ . bind (setValue 'parseFilters' nil)\n        \\_ . foldr1\n          \\packCmd result . bind packCmd \\_ . result\n          map useTokenPack packs"}},"arg":{"_type":"lambda","varName":"packs","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenGroups"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenList"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"activeTokenPacks"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"parseFilters"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldr1"},"arg":{"_type":"lambda","varName":"packCmd","body":{"_type":"lambda","varName":"result","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"ref","varName":"packCmd"}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"ref","varName":"result"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"map"},"arg":{"_type":"ref","varName":"useTokenPack"}},"arg":{"_type":"ref","varName":"packs"}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"resetStdTokenPacks"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"resetStdTokenPacks = bind (getValue 'stdTokenPacks')\n  \\stds . bind (resetTokenPacks stds)\n    \\_ . setValue 'activeTokenPacks' nil"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"stdTokenPacks"}}},"arg":{"_type":"lambda","varName":"stds","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"resetTokenPacks"},"arg":{"_type":"ref","varName":"stds"}}},"arg":{"_type":"lambda","varName":"_","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"activeTokenPacks"}},"arg":{"_type":"ref","varName":"nil"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"addStdTokenPacks"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"addStdTokenPacks morePacks = bind (getValue 'stdTokenPacks')\n  \\stds . setValue 'stdTokenPacks' (append stds morePacks)"}},"arg":{"_type":"lambda","varName":"morePacks","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"stdTokenPacks"}}},"arg":{"_type":"lambda","varName":"stds","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"stdTokenPacks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"ref","varName":"stds"}},"arg":{"_type":"ref","varName":"morePacks"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"addParseFilter"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"addParseFilter filt = bind (getValue 'parseFilters')\n  \\filters . setValue 'parseFilters' (append filters (cons filt nil))"}},"arg":{"_type":"lambda","varName":"filt","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"parseFilters"}}},"arg":{"_type":"lambda","varName":"filters","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"parseFilters"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"append"},"arg":{"_type":"ref","varName":"filters"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"filt"}},"arg":{"_type":"ref","varName":"nil"}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"d"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"d label value expr = log (strCat (cons label (cons value nil))) expr"}},"arg":{"_type":"lambda","varName":"label","body":{"_type":"lambda","varName":"value","body":{"_type":"lambda","varName":"expr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"log"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strCat"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"label"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"value"}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"ref","varName":"expr"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"dd"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"dd label arg = d label arg arg"}},"arg":{"_type":"lambda","varName":"label","body":{"_type":"lambda","varName":"arg","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"d"},"arg":{"_type":"ref","varName":"label"}},"arg":{"_type":"ref","varName":"arg"}},"arg":{"_type":"ref","varName":"arg"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"macroDefs"}},"arg":{"_type":"ref","varName":"nil"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"requiredFiles"}},"arg":{"_type":"ref","varName":"nil"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"tokenPacks"}},"arg":{"_type":"ref","varName":"nil"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"activeTokenPacks"}},"arg":{"_type":"ref","varName":"nil"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"stdTokenPacks"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"std"}},"arg":{"_type":"ref","varName":"nil"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defTokenPack"},"arg":{"_type":"lit","value":"std"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\@"}},"arg":{"_type":"ref","varName":"nil"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"acons"},"arg":{"_type":"lit","value":"("}},"arg":{"_type":"lit","value":")"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"ref","varName":"resetStdTokenPacks"},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"addTokenGroup"},"arg":{"_type":"lit","value":"["}},"arg":{"_type":"lit","value":"]"}},
  {"_type":"apply","func":{"_type":"ref","varName":"addToken"},"arg":{"_type":"lit","value":"|"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"listify"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"listify list = list\n  \\h t D . isTokenString h '|'\n    cons t nil\n    cons (cons 'cons' (cons h (listify t))) nil\n  cons 'nil' nil"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"|"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"cons"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"listify"},"arg":{"_type":"ref","varName":"t"}}}}},"arg":{"_type":"ref","varName":"nil"}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"nil"}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defMacro"},"arg":{"_type":"lit","value":"["}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"ref","varName":"listify"},"arg":{"_type":"ref","varName":"h"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"listFilter"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"listFilter code = bind (getValue 'listMacros')\n  \\listMacros . filterApplies code \\list . list \\h t .\n    and (isToken h) (contains listMacros (tokenString h))\n      listFilterTail list\n      list"}},"arg":{"_type":"lambda","varName":"code","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"listMacros"}}},"arg":{"_type":"lambda","varName":"listMacros","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplies"},"arg":{"_type":"ref","varName":"code"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"listMacros"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"h"}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"listFilterTail"},"arg":{"_type":"ref","varName":"list"}}},"arg":{"_type":"ref","varName":"list"}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"listFilterTail"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"listFilterTail list = list\n  \\h t D . isTokenString h '|'\n    > (length t) 2\n      cons h (cons (removeLast t) (cons (last t) nil))\n      list\n    cons h (listFilterTail t)\n  nil"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"|"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"length"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"removeLast"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"last"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"ref","varName":"list"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"listFilterTail"},"arg":{"_type":"ref","varName":"t"}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"filterApplies"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"filterApplies code func = isParens code\n  code \\start end contents . parens start end (filterApplies contents func)\n  isCons code\n    \\\\\n      filtered = filterApplyElements code func\n      .\n      and (isCons filtered) (isBlockStart (head filtered))\n        filtered\n        func filtered\n    code"}},"arg":{"_type":"lambda","varName":"code","body":{"_type":"lambda","varName":"func","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"code"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"code"},"arg":{"_type":"lambda","varName":"start","body":{"_type":"lambda","varName":"end","body":{"_type":"lambda","varName":"contents","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parens"},"arg":{"_type":"ref","varName":"start"}},"arg":{"_type":"ref","varName":"end"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplies"},"arg":{"_type":"ref","varName":"contents"}},"arg":{"_type":"ref","varName":"func"}}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"code"}},"arg":{"_type":"let","varName":"filtered","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplyElements"},"arg":{"_type":"ref","varName":"code"}},"arg":{"_type":"ref","varName":"func"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"filtered"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isBlockStart"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"filtered"}}}},"arg":{"_type":"ref","varName":"filtered"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"func"},"arg":{"_type":"ref","varName":"filtered"}}}}},"arg":{"_type":"ref","varName":"code"}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"filterApplyElements"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"filterApplyElements code func = code\n  \\h t D . isBlockStart h\n    cons h (filterBody t func)\n    cons (filterApplies h func)\n      and (isCons t) (isBlockStart (head t))\n        cons (filterApplyElements t func) nil\n        filterApplyElements t func\n  nil"}},"arg":{"_type":"lambda","varName":"code","body":{"_type":"lambda","varName":"func","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"code"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isBlockStart"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterBody"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"func"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplies"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"func"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isBlockStart"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"t"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplyElements"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"func"}}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplyElements"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"func"}}}}}}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"filterBody"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"filterBody code func = code \\h t . cons h\n  isTokenString h '.'\n    filterApplies t func\n    filterBody t func"}},"arg":{"_type":"lambda","varName":"code","body":{"_type":"lambda","varName":"func","body":{"_type":"apply","func":{"_type":"ref","varName":"code"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplies"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"func"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterBody"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"func"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"listMacros"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"["}},"arg":{"_type":"ref","varName":"nil"}}},
  {"_type":"apply","func":{"_type":"ref","varName":"addParseFilter"},"arg":{"_type":"ref","varName":"listFilter"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defTokenPack"},"arg":{"_type":"lit","value":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"|"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"ref","varName":"nil"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"["}},"arg":{"_type":"lit","value":"]"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"or["}},"arg":{"_type":"lit","value":"]"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"and["}},"arg":{"_type":"lit","value":"]"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"concat["}},"arg":{"_type":"lit","value":"]"}}},"arg":{"_type":"ref","varName":"nil"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"listFilter"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"addTokenGroup"},"arg":{"_type":"lit","value":"or["}},"arg":{"_type":"lit","value":"]"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"addTokenGroup"},"arg":{"_type":"lit","value":"and["}},"arg":{"_type":"lit","value":"]"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"addTokenGroup"},"arg":{"_type":"lit","value":"concat["}},"arg":{"_type":"lit","value":"]"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"listMacroFoldOp"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"listMacroFoldOp op emptyCase list = list \\h t . foldr\n    \\case result . [op case result]\n    emptyCase\n    h"}},"arg":{"_type":"lambda","varName":"op","body":{"_type":"lambda","varName":"emptyCase","body":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"foldr"},"arg":{"_type":"lambda","varName":"case","body":{"_type":"lambda","varName":"result","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"op"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"case"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"result"}},"arg":{"_type":"ref","varName":"nil"}}}}}}},"arg":{"_type":"ref","varName":"emptyCase"}},"arg":{"_type":"ref","varName":"h"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defMacro"},"arg":{"_type":"lit","value":"or["}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"listMacroFoldOp"},"arg":{"_type":"lit","value":"or"}},"arg":{"_type":"lit","value":"false"}},"arg":{"_type":"ref","varName":"list"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defMacro"},"arg":{"_type":"lit","value":"and["}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"listMacroFoldOp"},"arg":{"_type":"lit","value":"and"}},"arg":{"_type":"lit","value":"true"}},"arg":{"_type":"ref","varName":"list"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defMacro"},"arg":{"_type":"lit","value":"concat["}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"strCat"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"flatten"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"listify"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"list"}}}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"ref","varName":"nil"}}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"listMacros"}}},"arg":{"_type":"lambda","varName":"lm","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"concat["}},"arg":{"_type":"ref","varName":"lm"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"infix"}},"arg":{"_type":"lit","value":1}},"arg":{"_type":"lit","value":"infix code = bind (getValue 'infixPrecedence')\n  \\prec . bind (getValue 'infixRightAssociative')\n    \\right . bind (getValue 'tokenGroups')\n      \\groups . filterApplies\n        code\n        \\expr . infixRearrange prec right (map (\\cell . tail cell) groups) expr"}},"arg":{"_type":"lambda","varName":"code","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"infixPrecedence"}}},"arg":{"_type":"lambda","varName":"prec","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"infixRightAssociative"}}},"arg":{"_type":"lambda","varName":"right","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"bind"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"getValue"},"arg":{"_type":"lit","value":"tokenGroups"}}},"arg":{"_type":"lambda","varName":"groups","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"filterApplies"},"arg":{"_type":"ref","varName":"code"}},"arg":{"_type":"lambda","varName":"expr","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"infixRearrange"},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"right"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"map"},"arg":{"_type":"lambda","varName":"cell","body":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"cell"}}}},"arg":{"_type":"ref","varName":"groups"}}},"arg":{"_type":"ref","varName":"expr"}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"infixRearrange"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"infixRearrange prec right closes list = \\\\\n  len = length list\n  head1 = head list\n  tail1 = tail list\n  head2 = head tail1\n  tail2 = tail tail1\n  head3 = head tail2\n  opPrec = getPrec prec head2\n  .\n  < len 2\n    list\n    isInfix opPrec head1 head2 len\n      or (== len 2) (not (isInfixArg closes head3))\n        [[head2 head1] | tail2]\n        infixRearrange prec right closes (absorbArgument opPrec prec right closes head1 head2 tail2 head3 (- len 2))\n      [head1 | infixRearrange prec right closes tail1]"}},"arg":{"_type":"lambda","varName":"prec","body":{"_type":"lambda","varName":"right","body":{"_type":"lambda","varName":"closes","body":{"_type":"lambda","varName":"list","body":{"_type":"let","varName":"len","value":{"_type":"apply","func":{"_type":"ref","varName":"length"},"arg":{"_type":"ref","varName":"list"}},"body":{"_type":"let","varName":"head1","value":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"list"}},"body":{"_type":"let","varName":"tail1","value":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"list"}},"body":{"_type":"let","varName":"head2","value":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"tail1"}},"body":{"_type":"let","varName":"tail2","value":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"tail1"}},"body":{"_type":"let","varName":"head3","value":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"tail2"}},"body":{"_type":"let","varName":"opPrec","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getPrec"},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"head2"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"<"},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isInfix"},"arg":{"_type":"ref","varName":"opPrec"}},"arg":{"_type":"ref","varName":"head1"}},"arg":{"_type":"ref","varName":"head2"}},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"=="},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"lit","value":2}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"not"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isInfixArg"},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"ref","varName":"head3"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head2"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head1"}},"arg":{"_type":"ref","varName":"nil"}}}},"arg":{"_type":"ref","varName":"tail2"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"infixRearrange"},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"right"}},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"absorbArgument"},"arg":{"_type":"ref","varName":"opPrec"}},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"right"}},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"ref","varName":"head1"}},"arg":{"_type":"ref","varName":"head2"}},"arg":{"_type":"ref","varName":"tail2"}},"arg":{"_type":"ref","varName":"head3"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"-"},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"lit","value":2}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head1"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"infixRearrange"},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"right"}},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"ref","varName":"tail1"}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"absorbArgument"}},"arg":{"_type":"lit","value":9}},"arg":{"_type":"lit","value":"absorbArgument opPrec prec right closes head1 head2 tail2 head3 len = \\\\\n  tail3 = tail tail2\n  head4 = head tail3\n  tail4 = tail tail3\n  head5 = head tail4\n  .\n  infixShouldEatNext opPrec prec (contains right (strTokenString head2)) head3 head4 head5 closes len\n    [head1 head2 | absorbArgument (getPrec prec head4) prec right closes head3 head4 tail4 head5 (- len 2)]\n    [[head2 head1 head3] | tail3]"}},"arg":{"_type":"lambda","varName":"opPrec","body":{"_type":"lambda","varName":"prec","body":{"_type":"lambda","varName":"right","body":{"_type":"lambda","varName":"closes","body":{"_type":"lambda","varName":"head1","body":{"_type":"lambda","varName":"head2","body":{"_type":"lambda","varName":"tail2","body":{"_type":"lambda","varName":"head3","body":{"_type":"lambda","varName":"len","body":{"_type":"let","varName":"tail3","value":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"tail2"}},"body":{"_type":"let","varName":"head4","value":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"tail3"}},"body":{"_type":"let","varName":"tail4","value":{"_type":"apply","func":{"_type":"ref","varName":"tail"},"arg":{"_type":"ref","varName":"tail3"}},"body":{"_type":"let","varName":"head5","value":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"tail4"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"infixShouldEatNext"},"arg":{"_type":"ref","varName":"opPrec"}},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"right"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"strTokenString"},"arg":{"_type":"ref","varName":"head2"}}}},"arg":{"_type":"ref","varName":"head3"}},"arg":{"_type":"ref","varName":"head4"}},"arg":{"_type":"ref","varName":"head5"}},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head1"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head2"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"absorbArgument"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getPrec"},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"head4"}}},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"right"}},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"ref","varName":"head3"}},"arg":{"_type":"ref","varName":"head4"}},"arg":{"_type":"ref","varName":"tail4"}},"arg":{"_type":"ref","varName":"head5"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"-"},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"lit","value":2}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head2"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head1"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"head3"}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"ref","varName":"tail3"}}}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isInfixArg"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"isInfixArg closes item = or[\n  isParens item\n  isCons item\n  and[\n    isToken item\n    not (contains closes (tokenString item))\n    not (isBlockStart item)]]"}},"arg":{"_type":"lambda","varName":"closes","body":{"_type":"lambda","varName":"item","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isParens"},"arg":{"_type":"ref","varName":"item"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"item"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"item"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"not"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"item"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"not"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"isBlockStart"},"arg":{"_type":"ref","varName":"item"}}}},"arg":{"_type":"ref","varName":"true"}}}}},"arg":{"_type":"ref","varName":"false"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"isInfix"}},"arg":{"_type":"lit","value":4}},"arg":{"_type":"lit","value":"isInfix opPrec head1 head2 len = and[\n  > len 1\n  > opPrec -1\n  isInfixArg nil head1]"}},"arg":{"_type":"lambda","varName":"opPrec","body":{"_type":"lambda","varName":"head1","body":{"_type":"lambda","varName":"head2","body":{"_type":"lambda","varName":"len","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">"},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"lit","value":1}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">"},"arg":{"_type":"ref","varName":"opPrec"}},"arg":{"_type":"lit","value":-1}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isInfixArg"},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"head1"}}},"arg":{"_type":"ref","varName":"true"}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"getPrec"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":"getPrec prec token = \\\\\n  str = tokenString token\n  .\n  isToken token\n    findIndex (\\level . contains level str) prec\n    -1"}},"arg":{"_type":"lambda","varName":"prec","body":{"_type":"lambda","varName":"token","body":{"_type":"let","varName":"str","value":{"_type":"apply","func":{"_type":"ref","varName":"tokenString"},"arg":{"_type":"ref","varName":"token"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isToken"},"arg":{"_type":"ref","varName":"token"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"findIndex"},"arg":{"_type":"lambda","varName":"level","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"contains"},"arg":{"_type":"ref","varName":"level"}},"arg":{"_type":"ref","varName":"str"}}}},"arg":{"_type":"ref","varName":"prec"}}},"arg":{"_type":"lit","value":-1}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"infixShouldEatNext"}},"arg":{"_type":"lit","value":8}},"arg":{"_type":"lit","value":"infixShouldEatNext opPrec prec isRight curArg nextOp nextArg closes len = \\\\\n  nextPrec = getPrec prec nextOp\n  .\n  and[\n    > len 2\n    isInfix nextPrec curArg nextOp len\n    or (> opPrec nextPrec) (and (== opPrec nextPrec) isRight)\n    isInfixArg closes nextArg]"}},"arg":{"_type":"lambda","varName":"opPrec","body":{"_type":"lambda","varName":"prec","body":{"_type":"lambda","varName":"isRight","body":{"_type":"lambda","varName":"curArg","body":{"_type":"lambda","varName":"nextOp","body":{"_type":"lambda","varName":"nextArg","body":{"_type":"lambda","varName":"closes","body":{"_type":"lambda","varName":"len","body":{"_type":"let","varName":"nextPrec","value":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"getPrec"},"arg":{"_type":"ref","varName":"prec"}},"arg":{"_type":"ref","varName":"nextOp"}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">"},"arg":{"_type":"ref","varName":"len"}},"arg":{"_type":"lit","value":2}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isInfix"},"arg":{"_type":"ref","varName":"nextPrec"}},"arg":{"_type":"ref","varName":"curArg"}},"arg":{"_type":"ref","varName":"nextOp"}},"arg":{"_type":"ref","varName":"len"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"or"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":">"},"arg":{"_type":"ref","varName":"opPrec"}},"arg":{"_type":"ref","varName":"nextPrec"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"=="},"arg":{"_type":"ref","varName":"opPrec"}},"arg":{"_type":"ref","varName":"nextPrec"}}},"arg":{"_type":"ref","varName":"isRight"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"and"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isInfixArg"},"arg":{"_type":"ref","varName":"closes"}},"arg":{"_type":"ref","varName":"nextArg"}}},"arg":{"_type":"ref","varName":"true"}}}}}}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":":"}},"arg":{"_type":"lit","value":2}},"arg":{"_type":"lit","value":": x y = cons x y"}},"arg":{"_type":"lambda","varName":"x","body":{"_type":"lambda","varName":"y","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"x"}},"arg":{"_type":"ref","varName":"y"}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"iprec"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"iprec = [['*' '/' '%'] ['+' '-'] [':'] ['<' '>' '<=' '>='] ['==' '!=']]"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"*"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"/"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"%"}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"+"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"-"}},"arg":{"_type":"ref","varName":"nil"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":":"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"<"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":">"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"<="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":">="}},"arg":{"_type":"ref","varName":"nil"}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"=="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"!="}},"arg":{"_type":"ref","varName":"nil"}}}},"arg":{"_type":"ref","varName":"nil"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"rightAssoc"}},"arg":{"_type":"lit","value":0}},"arg":{"_type":"lit","value":"rightAssoc = [':']"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":":"}},"arg":{"_type":"ref","varName":"nil"}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"infixPrecedence"}},"arg":{"_type":"ref","varName":"iprec"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"setValue"},"arg":{"_type":"lit","value":"infixRightAssociative"}},"arg":{"_type":"ref","varName":"rightAssoc"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defTokenPack"},"arg":{"_type":"lit","value":"infix"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"flatten"},"arg":{"_type":"ref","varName":"iprec"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"infix"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"ref","varName":"useTokenPack"},"arg":{"_type":"lit","value":"infix"}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defMacro"},"arg":{"_type":"lit","value":"do"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"handleDo"},"arg":{"_type":"ref","varName":"list"}},"arg":{"_type":"ref","varName":"false"}},"arg":{"_type":"ref","varName":"id"}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"handleDo"}},"arg":{"_type":"lit","value":3}},"arg":{"_type":"lit","value":"handleDo list inLet cont = list\n  \\h t D . isNil t\n    cont (inLet ['.' h] [h])\n    doClause (stripParens h) h nil inLet \\newInLet chain .\n      handleDo t newInLet \\rest . cont (chain rest)\n  cont nil"}},"arg":{"_type":"lambda","varName":"list","body":{"_type":"lambda","varName":"inLet","body":{"_type":"lambda","varName":"cont","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"list"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"inLet"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"nil"}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"nil"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"doClause"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"stripParens"},"arg":{"_type":"ref","varName":"h"}}},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"inLet"}},"arg":{"_type":"lambda","varName":"newInLet","body":{"_type":"lambda","varName":"chain","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"handleDo"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"newInLet"}},"arg":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"chain"},"arg":{"_type":"ref","varName":"rest"}}}}}}}}}}}}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"nil"}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"define"},"arg":{"_type":"lit","value":"doClause"}},"arg":{"_type":"lit","value":5}},"arg":{"_type":"lit","value":"doClause steppingClause clause prefix inLet cont = \\\\\n  makeBind var monad = cont false \\rest . inLet (cons '.') id\n    ['bind' monad ['\\\\' var '.' | rest]]\n  .\n  isCons steppingClause\n    steppingClause \\h t . isTokenString h '='\n      inLet\n        cont true \\rest . [clause | rest]\n        cont true \\rest . ['\\\\\\\\' clause | rest]\n      isTokenString h '<-'\n        isNil t\n          parseErr \"No monad in do-clause: \" clause\n          prefix\n            \\ph pt D . isNil pt\n              makeBind (isNil prefix '_' (head prefix)) t\n              parseErr \"More than one variable in do-clause: \" clause\n            makeBind '_' t\n        doClause t clause [h | prefix] inLet cont\n    makeBind '_' clause"}},"arg":{"_type":"lambda","varName":"steppingClause","body":{"_type":"lambda","varName":"clause","body":{"_type":"lambda","varName":"prefix","body":{"_type":"lambda","varName":"inLet","body":{"_type":"lambda","varName":"cont","body":{"_type":"let","varName":"makeBind","value":{"_type":"lambda","varName":"var","body":{"_type":"lambda","varName":"monad","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"false"}},"arg":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"inLet"},"arg":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"."}}},"arg":{"_type":"ref","varName":"id"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"bind"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"monad"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"var"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"."}},"arg":{"_type":"ref","varName":"rest"}}}}},"arg":{"_type":"ref","varName":"nil"}}}}}}}}},"body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isCons"},"arg":{"_type":"ref","varName":"steppingClause"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"steppingClause"},"arg":{"_type":"lambda","varName":"h","body":{"_type":"lambda","varName":"t","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"="}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"inLet"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"true"}},"arg":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"clause"}},"arg":{"_type":"ref","varName":"rest"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cont"},"arg":{"_type":"ref","varName":"true"}},"arg":{"_type":"lambda","varName":"rest","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"\\\\"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"clause"}},"arg":{"_type":"ref","varName":"rest"}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isTokenString"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"lit","value":"<-"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"No monad in do-clause: "}},"arg":{"_type":"ref","varName":"clause"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"prefix"},"arg":{"_type":"lambda","varName":"ph","body":{"_type":"lambda","varName":"pt","body":{"_type":"lambda","varName":"D","body":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"pt"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeBind"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"isNil"},"arg":{"_type":"ref","varName":"prefix"}},"arg":{"_type":"lit","value":"_"}},"arg":{"_type":"apply","func":{"_type":"ref","varName":"head"},"arg":{"_type":"ref","varName":"prefix"}}}},"arg":{"_type":"ref","varName":"t"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"parseErr"},"arg":{"_type":"lit","value":"More than one variable in do-clause: "}},"arg":{"_type":"ref","varName":"clause"}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeBind"},"arg":{"_type":"lit","value":"_"}},"arg":{"_type":"ref","varName":"t"}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"doClause"},"arg":{"_type":"ref","varName":"t"}},"arg":{"_type":"ref","varName":"clause"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"h"}},"arg":{"_type":"ref","varName":"prefix"}}},"arg":{"_type":"ref","varName":"inLet"}},"arg":{"_type":"ref","varName":"cont"}}}}}}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"makeBind"},"arg":{"_type":"lit","value":"_"}},"arg":{"_type":"ref","varName":"clause"}}}}}}}}}},
  {"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"defTokenPack"},"arg":{"_type":"lit","value":"do"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"<-"}},"arg":{"_type":"ref","varName":"nil"}}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"ref","varName":"nil"}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"apply","func":{"_type":"ref","varName":"addStdTokenPacks"},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"list"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"infix"}},"arg":{"_type":"apply","func":{"_type":"apply","func":{"_type":"ref","varName":"cons"},"arg":{"_type":"lit","value":"do"}},"arg":{"_type":"ref","varName":"nil"}}}}},
  {"_type":"ref","varName":"resetStdTokenPacks"}
]
// Generated by CoffeeScript 1.6.3
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var BS, DEL, ENTER, HL_TAGS, Headline, Keyword, Meat, Results, Source, TAB, backspace, bindContent, boundarySpan, checkExtraNewline, checkLast, checkSourceMod, checkStart, cleanHeadline, collapseNode, contentSpan, defaultEnv, displaySource, editDiv, executeSource, findDomPosition, findOrgNode, fixupNodes, followingSpan, getLeft, getRight, getStyle, getTags, getTextLine, getTextPosition, getType, handleMutation, headlineRE, id, idCount, inCollapsible, isBoundary, isCollapsed, isCollapsible, isDocNode, isEmptyCollapsible, isSourceNode, lazy, lz, markupGuts, markupNode, markupOrg, modifying, newResults, nextOrgId, nodes, optionalBoundary, orgAttrs, orgEnv, parseOrgMode, parseTags, resolve, root, rz, setTags, show, sourceDiv, styleCache, trailingNL, _ref, _ref1, _ref2;

  getType = require('./ast').getType;

  _ref = root = module.exports = require('./base'), resolve = _ref.resolve, lazy = _ref.lazy, defaultEnv = _ref.defaultEnv;

  rz = resolve;

  lz = lazy;

  _ref1 = require('./browserSupport'), TAB = _ref1.TAB, ENTER = _ref1.ENTER, BS = _ref1.BS, DEL = _ref1.DEL;

  _ref2 = require('./org'), parseOrgMode = _ref2.parseOrgMode, Headline = _ref2.Headline, Meat = _ref2.Meat, Keyword = _ref2.Keyword, Source = _ref2.Source, Results = _ref2.Results, headlineRE = _ref2.headlineRE, HL_TAGS = _ref2.HL_TAGS, parseTags = _ref2.parseTags;

  editDiv = null;

  sourceDiv = null;

  modifying = false;

  styleCache = {};

  idCount = 0;

  nodes = {};

  nextOrgId = function() {
    return 'org-node-' + idCount++;
  };

  getStyle = function(node) {
    var style;
    if (!node.id) {
      node.id = nextOrgId();
    }
    style = styleCache[node.orgModeId];
    if (!style) {
      style = styleCache[node.orgModeId] = getComputedStyle(node);
    }
    return style;
  };

  isCollapsed = function(node) {
    var type;
    type = node.nodeType;
    return type === 7 || type === 8 || (type === 3 && (node.data === '' || isCollapsed(node.parentNode))) || /^(script|style)$/i.test(node.nodeName) || (type === 1 && (node.classList.contains('collapsed') || (node.getAttribute('data-org-type') === 'text' && isCollapsed(node.parentNode)) || getStyle(node).display === 'none'));
  };

  markupOrg = function(text) {
    var org;
    nodes = {};
    if (text[text.length - 1] !== '\n') {
      text = text + '\n';
    }
    org = parseOrgMode(text);
    console.log("ORG:\n" + (JSON.stringify(org.toJsonObject(), null, '  ')));
    window.ORG = org;
    return markupNode(org, '', true);
  };

  boundarySpan = "<span data-org-type='boundary'>\n</span>";

  orgAttrs = function(org) {
    org.nodeId = nextOrgId();
    nodes[org.nodeId] = org;
    return "id='" + org.nodeId + "' data-org-type='" + org.type + "'";
  };

  markupNode = function(org, newline, start) {
    var content, pos;
    if (org instanceof Source || org instanceof Results) {
      pos = org.contentPos - org.offset - 1;
      content = org.text.substring(pos);
      return "<span " + (orgAttrs(org)) + "><span data-org-type='text'>" + (org.text.substring(0, pos)) + "</span>" + (contentSpan(content)) + "</span>";
    } else if (org instanceof Headline) {
      return "<span " + (orgAttrs(org)) + "'>" + (contentSpan(org.text, 'text')) + (markupGuts(org, checkStart(start, org.text))) + "</span>";
    } else {
      return "<span " + (orgAttrs(org)) + "'>" + org.text + "</span>";
    }
  };

  checkStart = function(start, text) {
    return start && (!text || text === '\n');
  };

  isSourceNode = function(node) {
    return (node != null ? typeof node.getAttribute === "function" ? node.getAttribute('data-org-type') : void 0 : void 0) === 'source';
  };

  isDocNode = function(node) {
    return node != null ? typeof node.hasAttribute === "function" ? node.hasAttribute('maindoc') : void 0 : void 0;
  };

  markupGuts = function(org, start) {
    var c, newline, nl, p, prev, s;
    if (!org.children.length) {
      return '';
    } else {
      newline = '\n';
      prev = start ? null : org;
      return ((function() {
        var _i, _len, _ref3, _results;
        _ref3 = org.children;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          c = _ref3[_i];
          nl = newline;
          newline = '';
          s = start;
          start = false;
          p = prev;
          prev = c;
          _results.push(optionalBoundary(p, c) + markupNode(c, nl, s));
        }
        return _results;
      })()).join("");
    }
  };

  optionalBoundary = function(prev, node) {
    if (prev && (prev.block || node.block)) {
      return boundarySpan;
    } else {
      return '';
    }
  };

  contentSpan = function(str, type) {
    str = str[str.length - 1] === '\n' ? str.substring(0, str.length - 1) : str;
    if (str) {
      return "<span" + (type ? " data-org-type='" + type + "'" : '') + ">" + str + "</span>";
    } else {
      return '';
    }
  };

  trailingNL = function(str) {
    if (str[str.length - 1] === '\n') {
      return '\n';
    } else {
      return '';
    }
  };

  fixupNodes = function(node) {
    var n, _i, _len, _ref3, _results;
    _ref3 = $(node).find('[data-org-type="headline"]');
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      n = _ref3[_i];
      _results.push(setTags(n));
    }
    return _results;
  };

  bindContent = function(div, givenSourceDiv) {
    editDiv = div;
    sourceDiv = givenSourceDiv;
    fixupNodes(div);
    div.addEventListener('keydown', function(e) {
      var br, c, el, inCollapsedText, n, par, r, s;
      c = e.charCode || e.keyCode || e.which;
      s = window.getSelection();
      r = s.getRangeAt(0);
      if (c === TAB) {
        e.preventDefault();
        collapseNode();
      } else if (String.fromCharCode(c) === 'C' && e.altKey) {
        executeSource(div, getSelection().focusNode);
      } else if (c === ENTER) {
        e.preventDefault();
        n = s.focusNode;
        el = r.startContainer;
        par = el.parentNode;
        inCollapsedText = r.collapsed && el.nodeType === 3 && par.getAttribute('data-org-type') === 'text' && par.parentElement.classList.contains('collapsed') && el.nextSibling === null;
        if (inCollapsedText && r.startOffset === el.length) {
          return;
        } else if (n.nodeType === 3 && r.collapsed && r.startOffset === n.length && n.parentNode.getAttribute('data-org-type') === 'text') {
          br = document.createTextNode('\n');
          $(br).prependTo(followingSpan(n.parentNode));
          r.setStart(br, br.length);
          r.setEnd(br, br.length);
        } else {
          window.N = n;
          r.insertNode(br = document.createTextNode(checkExtraNewline(r, n, div)));
          br.parentNode.normalize();
        }
        r.collapse();
        s.removeAllRanges();
        s.addRange(r);
      } else if (c === DEL || c === BS) {
        el = r.startContainer;
        par = el.parentNode;
        inCollapsedText = r.collapsed && el.nodeType === 3 && par.getAttribute('data-org-type') === 'text' && par.parentElement.classList.contains('collapsed') && el.nextSibling === null;
        if (inCollapsedText && ((c === DEL && r.startOffset === el.length - 1) || (c === BS && r.startOffset === el.length))) {
          e.preventDefault();
          el.data = el.data.substring(0, el.data.length - 1);
          r.setStart(el, el.data.length);
          r.setEnd(el, el.data.length);
          s.removeAllRanges();
          s.addRange(r);
        } else if (c === DEL && inCollapsedText && r.startOffset >= el.length - 1) {
          e.preventDefault();
        } else if (c === BS) {
          backspace(e);
        }
      }
      return checkSourceMod();
    });
    div.addEventListener('DOMCharacterDataModified', handleMutation, true);
    div.addEventListener('DOMSubtreeModified', handleMutation, true);
    return displaySource();
  };

  collapseNode = function() {
    var node;
    node = inCollapsible(getSelection().focusNode);
    if (node) {
      if (!isEmptyCollapsible(node)) {
        modifying = true;
        $(node).toggleClass('collapsed');
        styleCache = {};
        return modifying = false;
      } else {
        return status("EMPTY ENTRY");
      }
    }
  };

  isBoundary = function(node) {
    return (node.nodeType === 1 && node.getAttribute('data-org-type') === 'boundary' && node) || (node.nodeType === 3 && isBoundary(node.parentElement));
  };

  backspace = function(e) {
    var boundary, r, s;
    s = rangy.getSelection();
    r = s.getRangeAt(0);
    if (r.collapsed && r.startOffset === 0) {
      r.moveStart('character', -1);
      if (boundary = isBoundary(r.startContainer)) {
        r.setStartBefore(boundary, 0);
        r.move('character', -1);
        if (isCollapsed(r.startContainer)) {
          console.log("PREVENTING BACKSPACE");
          return e.preventDefault();
        }
      }
    }
  };

  checkSourceMod = function() {};

  orgEnv = function(parent, node) {
    var org, pos, r, results, src;
    org = parseOrgMode(parent.textContent);
    pos = getTextPosition(parent, node, 0);
    src = org.findNodeAt(pos);
    results = src.next;
    if (!(results instanceof Results)) {
      results = results instanceof Meat && results.text.match(/^[ \n]*$/) ? results.next : newResults(parent, src);
    }
    r = inCollapsible(findDomPosition(parent, results.offset).startContainer).lastChild;
    r.innerHTML = '\n';
    return {
      write: function(str) {
        console.log("RESULT: " + str);
        return r.textContent += ": " + (str.replace(/\n/, '\n: ')) + "\n";
      }
    };
  };

  orgEnv.__proto__ = defaultEnv;

  newResults = function(parent, src) {
    var pos, r, sel, srcEnd, text;
    text = src.top().allText();
    srcEnd = src.end();
    text = text.substring(0, srcEnd) + "#+RESULTS:\n\n" + text.substring(srcEnd);
    sel = getSelection();
    r = sel.getRangeAt(0);
    pos = getTextPosition(parent, r.startContainer, r.startOffset);
    parent.innerHTML = markupOrg(text);
    r = findDomPosition(parent, pos);
    sel.removeAllRanges();
    sel.addRange(r);
    return findOrgNode(parent, srcEnd + 1);
  };

  id = lz(function(x) {
    return rz(x);
  });

  getLeft = function(x) {
    return x(id)(id);
  };

  getRight = function(x) {
    return x(id)(id);
  };

  show = function(obj) {
    if (typeof L_show !== "undefined" && L_show !== null) {
      return rz(L_show)(lz(obj));
    } else {
      return console.log(obj);
    }
  };

  executeSource = function(parent, node) {
    var env, m, result, txt;
    if (isSourceNode(node)) {
      txt = $(node).text().substring($(node).find('[data-org-type="text"]').text().length);
      m = txt.match(/(^|\n)#\+end_src/i);
      if (m) {
        result = rz(L_baseLoadString)('notebook')(txt.substring(0, m.index));
        env = orgEnv(parent, node);
        return runMonad(result, env, function(res) {
          res = res.head().tail();
          if (getType(res) === 'left') {
            return orgEnv.write("PARSE ERROR: " + (getLeft(res)));
          } else {
            return env.write(show(getRight(res)));
          }
        });
      } else {
        return console.log("No end for src block");
      }
    } else {
      return !isDocNode(node) && executeSource(parent, node.parentElement);
    }
  };

  followingSpan = function(node) {
    var _ref3;
    return (_ref3 = node.nextElementSibling) != null ? _ref3 : $('<span></span>').appendTo(node.parentNode)[0];
  };

  checkExtraNewline = function(range, n, parent) {
    if (range.collapsed && n.nodeType === 3 && range.startOffset === n.length && n.textContent[n.length - 1] !== '\n') {
      return checkLast(n, parent);
    } else {
      return '\n';
    }
  };

  checkLast = function(n, parent) {
    if (n === parent) {
      return '\n\n';
    } else if (n.nextSibling) {
      return '\n';
    } else {
      return checkLast(n.parentNode, parent);
    }
  };

  getTags = function(headline) {
    if (headline.getAttribute('dirty')) {
      cleanHeadline(headline);
      setTags(headline);
    }
    return headline.getAttribute('data-org-tags');
  };

  setTags = function(headline) {
    var m, tags;
    m = headline.firstChild.textContent.match(headlineRE);
    tags = ((m && parseTags(m[HL_TAGS])) || []).join(' ');
    if (headline.getAttribute('data-org-tags') !== tags) {
      return headline.setAttribute('data-org-tags', tags);
    }
  };

  cleanHeadline = function(node) {
    modifying = true;
    node.removeAttribute('dirty');
    return modifying = false;
  };

  handleMutation = function(evt) {
    var node;
    if (!modifying) {
      modifying = true;
      if ((node = inCollapsible(evt.srcElement)) && (node.getAttribute('data-org-type') === 'headline')) {
        node.setAttribute('dirty', 'true');
      }
      displaySource();
      return modifying = false;
    }
  };

  displaySource = function() {
    return $(sourceDiv).html('').text($(editDiv).text());
  };

  isCollapsible = function(node) {
    var _ref3;
    return (_ref3 = node.getAttribute('data-org-type')) === 'headline' || _ref3 === 'source' || _ref3 === 'results';
  };

  inCollapsible = function(node) {
    if (node.nodeType === 1) {
      if (isCollapsible(node)) {
        return node;
      } else {
        return (node.getAttribute('data-org-type') === 'text') && inCollapsible(node.parentElement);
      }
    } else {
      return node.nodeType === 3 && inCollapsible(node.parentElement);
    }
  };

  isEmptyCollapsible = function(node) {
    var firstLine;
    firstLine = getTextLine(node);
    return node.firstChild === node.lastChild;
  };

  getTextLine = function(node) {
    var c;
    c = node.firstElementChild;
    while (c) {
      if (c.getAttribute('data-org-type') === 'text') {
        return c;
      }
      c = c.nextElementSibling;
    }
    return null;
  };

  getTextPosition = function(parent, node, offset) {
    var r;
    if (node === null) {
      r = getSelection().getRangeAt(0);
      node = r.startContainer;
      offset = r.startOffset;
    }
    r = rangy.createRangyRange();
    r.setStartBefore(parent, 0);
    r.setEndBefore(node, offset);
    return r.text().length;
  };

  findOrgNode = function(parent, pos) {
    var org, orgNode;
    org = parseOrgMode(parent.textContent);
    return orgNode = org.findNodeAt(pos);
  };

  findDomPosition = function(parent, pos) {
    var r;
    r = rangy.createRangyRange();
    r.setStartBefore(parent, pos);
    r.setEndBefore(parent, pos);
    r.move('character', pos + 1);
    return r;
  };

  root.markupOrg = markupOrg;

  root.bindContent = bindContent;

  root.cleanHeadline = cleanHeadline;

  root.getTags = getTags;

}).call(this);

/*
//@ sourceMappingURL=orgSupport.map
*/

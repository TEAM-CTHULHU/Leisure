// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var DL, Leisure_lexCons, Leisure_token, LexDL, dlappend, dlempty, dlnew, lexCons, lexDlappend, lexDlempty, lexDlnew, makeToken, primLexCons, primToken, root, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = module.exports = require('./base');

  DL = (function() {
    function DL() {}

    return DL;

  })();

  dlempty = mkProto(DL, function(x) {
    return x;
  });

  dlnew = function(a) {
    return mkProto(DL, function(b) {
      return cons(a, b);
    });
  };

  dlappend = function(a, b) {
    checkType(a, DL);
    checkType(b, DL);
    return mkProto(DL, function(c) {
      return a(b(c));
    });
  };

  Leisure_lexCons = (function(_super) {
    __extends(Leisure_lexCons, _super);

    function Leisure_lexCons() {
      _ref = Leisure_lexCons.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Leisure_lexCons.prototype.head = function() {
      return this(function() {
        return function(a) {
          return function(s) {
            return function(b) {
              return function(e) {
                return a();
              };
            };
          };
        };
      });
    };

    Leisure_lexCons.prototype.tail = function() {
      return this(function() {
        return function(a) {
          return function(s) {
            return function(b) {
              return function(e) {
                return b();
              };
            };
          };
        };
      });
    };

    Leisure_lexCons.prototype.start = function() {
      return this(function() {
        return function(a) {
          return function(s) {
            return function(b) {
              return function(e) {
                return s();
              };
            };
          };
        };
      });
    };

    Leisure_lexCons.prototype.end = function() {
      return this(function() {
        return function(a) {
          return function(s) {
            return function(b) {
              return function(e) {
                return e();
              };
            };
          };
        };
      });
    };

    Leisure_lexCons.prototype.map = function(func) {
      return lexCons(func(this.head()), this.start(), this.tail().map(func), this.end());
    };

    Leisure_lexCons.prototype.withStart = function(start) {
      return lexCons(this.head(), start, this.tail(), this.end());
    };

    Leisure_lexCons.prototype.toString = function() {
      return "LexCons(" + (this.start()) + ", " + (this.end()) + ")[" + (this.toArray().join(' ')) + "]";
    };

    return Leisure_lexCons;

  })(Leisure_BaseCons);

  global.Leisure_lexCons = Leisure_lexCons;

  primLexCons = setDataType((function(a) {
    return function(start) {
      return function(b) {
        return function(end) {
          return mkProto(Leisure_lexCons, setType((function(f) {
            return f()(a)(b.start && Math.min(b.start(), start) || start)(b)(a.end && Math.max(a.end(), end) || end);
          }), 'lexCons'));
        };
      };
    };
  }), 'lexCons');

  LexDL = (function() {
    function LexDL() {}

    return LexDL;

  })();

  lexCons = function(a, start, b, end) {
    var e, s;

    s = b.start != null ? Math.min(start, b.start()) : start;
    e = a.end != null ? Math.max(end, a.end()) : end;
    return primLexCons(function() {
      return a;
    })(function() {
      return s;
    })(function() {
      return b;
    })(function() {
      return e;
    });
  };

  lexDlempty = mkProto(LexDL, function(x, end) {
    return x;
  });

  lexDlnew = function(a, start) {
    return mkProto(LexDL, function(b, end) {
      return lexCons(a, start, b, end);
    });
  };

  lexDlappend = function(a, b) {
    checkType(a, LexDL);
    checkType(b, LexDL);
    return mkProto(LexDL, function(c, end) {
      return a(b(c, end), end);
    });
  };

  Leisure_token = (function(_super) {
    __extends(Leisure_token, _super);

    function Leisure_token() {
      _ref1 = Leisure_token.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Leisure_token.prototype.tok = function() {
      return this(function() {
        return function(t) {
          return function(p) {
            return t();
          };
        };
      });
    };

    Leisure_token.prototype.start = function() {
      return this(function() {
        return function(t) {
          return function(p) {
            return p();
          };
        };
      });
    };

    Leisure_token.prototype.end = function() {
      return this.start() + this.tok().length;
    };

    Leisure_token.prototype.toString = function() {
      return "Token('" + (this.tok()) + "', " + (this.start()) + "-" + (this.end() - 1) + ")";
    };

    Leisure_token.prototype.zeroLen = function() {
      var _this = this;

      this.end = function() {
        return _this.start();
      };
      return this;
    };

    return Leisure_token;

  })(LeisureObject);

  global.Leisure_token = Leisure_token;

  primToken = setDataType((function(tok) {
    return function(pos) {
      return mkProto(Leisure_token, setType((function(f) {
        return f()(tok)(pos);
      }), 'token'));
    };
  }), 'token');

  makeToken = function(tok, rest, totalLen) {
    var tp;

    tp = totalLen - rest.length - tok.length;
    return primToken(function() {
      return tok;
    })(function() {
      return tp;
    });
  };

  define('lexCons', (function() {
    return primLexCons;
  }), 4, '\\a s b e f . f a s b e');

  define('lexStart', (function() {
    return function(l) {
      return l().start();
    };
  }), 1, '\\l . l h s t e . s');

  define('lexEnd', (function() {
    return function(l) {
      return l().end();
    };
  }), 1, '\\l . l h s t e . e');

  define('token', (function() {
    return primToken;
  }), 2, '\\tok pos f . f tok pos');

  define('tokenName', (function() {
    return function(t) {
      return t().tok();
    };
  }), 1, '\\tok . tok \\n p . n');

  define('tokenStart', (function() {
    return function(t) {
      return t().start();
    };
  }), 1, '\\tok . tok \\n p . p');

  root.dlempty = dlempty;

  root.dlnew = dlnew;

  root.dlappend = dlappend;

  root.lexCons = lexCons;

  root.lexDlempty = lexDlempty;

  root.lexDlnew = lexDlnew;

  root.lexDlappend = lexDlappend;

  root.Leisure_token = Leisure_token;

  root.Leisure_lexCons = Leisure_lexCons;

  root.ensureLeisureClass = ensureLeisureClass;

}).call(this);

/*
//@ sourceMappingURL=cons.map
*/

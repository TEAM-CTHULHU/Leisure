// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


/*
Wimpy testing framework
*/


(function() {
  var assertEq, assertFail, eq, eqArray, ifNoBrowser, initStats, log, logln, root, run, runTests, stats;

  root = module.exports = require('./base');

  stats = {};

  initStats = function() {
    return root.stats = stats = {
      successes: 0,
      failures: 0,
      failed: [],
      traces: []
    };
  };

  eq = function(a, b) {
    return a === b || (eqArray(a, b));
  };

  eqArray = function(a, b) {
    var i, _i, _ref;

    if (a.constructor !== Array || b.constructor !== Array || a.length !== b.length) {
      return false;
    } else {
      for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (!eq(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
  };

  assertEq = function(actual, expected, desc) {
    if (!eq(expected, actual)) {
      throw new Error("" + (desc ? "[" + desc + "] " : "") + "Expected <" + expected + "> but got <" + actual + ">");
    }
  };

  assertFail = function(block, msg, desc) {
    var err;

    try {
      block();
      throw new Error("" + (desc ? "[" + desc + "] " : "") + "Expected <failure " + msg + "> but it succeeded");
    } catch (_error) {
      err = _error;
      if (err.message !== msg) {
        throw new Error("" + (desc ? "[" + desc + "] " : "") + "Expected <failure " + msg + "> but got <failure " + err.message + ">");
      }
    }
  };

  log = function(arg) {
    return process.stdout.write(arg);
  };

  logln = function(arg) {
    return log("" + arg + "\n");
  };

  ifNoBrowser = function(cont) {
    if (typeof window === 'undefined') {
      return cont();
    }
  };

  run = function(name, func) {
    var err;

    try {
      func();
      ifNoBrowser(function() {
        return log('.');
      });
      return stats.successes++;
    } catch (_error) {
      err = _error;
      root.totalFailures++;
      stats.failures++;
      stats.failed.push(name);
      return stats.traces.push("" + name + ": " + err.stack);
    }
  };

  runTests = function(name, tests) {
    var failure, testFunc, testName, _i, _len, _ref;

    initStats();
    log("Testing " + name + "\n  ");
    for (testName in tests) {
      testFunc = tests[testName];
      run(testName, testFunc);
    }
    log('\n');
    if (!stats.successes) {
      logln("Failed all " + stats.failures + " " + name + " tests");
    } else if (!stats.failures) {
      logln("Succeeded all " + stats.successes + " " + name + " tests");
    } else {
      logln("Failed " + stats.failures + " out of " + (stats.successes + stats.failures) + " " + name + " tests");
    }
    if (stats.failures) {
      log('\n');
    }
    _ref = stats.traces;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      failure = _ref[_i];
      logln(failure);
    }
    return logln('');
  };

  root.totalFailures = 0;

  root.assertEq = assertEq;

  root.assertFail = assertFail;

  root.run = run;

  root.runTests = runTests;

  root.stats = stats;

  root.ifNoBrowser = ifNoBrowser;

}).call(this);

/*
//@ sourceMappingURL=testing.map
*/

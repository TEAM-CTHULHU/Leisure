// Generated by CoffeeScript 1.6.3
/*
# use an element as a Leisure notebook
# Only runs in the context of a browser
*/


(function() {
  var $, BS, DEL, DOWN_ARROW, END, ENTER, ESC, HOME, LEFT_ARROW, Leisure_anno, Nil, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, TAB, UP_ARROW, URI, Xus, acceptCode, addBoxClasses, addDefControls, addsLine, allowEvents, arrows, autoRun, basicCall, bindAll, bindNotebook, bootNotebook, box, boxClasses, buttonClasses, c, chainEvalNodes, changeTheme, changeView, checkDeleteExpr, checkHideSource, checkMutateFromModification, cleanEmptyNodes, cleanOutput, clearAst, clearOutputBox, clearUpdates, clickTest, closeWindow, codeBox, codeFocus, codeSpan, configureSaveLink, continueRangePosition, createFragment, createNode, createPeer, createSlider, debug, defaultEnv, define, delay, docFocus, envFor, errString, escapeHtml, evalBox, evalDoc, evalDocCode, evalNodes, evalOutput, evaluating, evaluationQueue, event, filename, findCurrentCodeHolder, findDefs, findUpdateSelector, focusBox, foldLeft, gen, getAnnoBody, getAnnoData, getAnnoName, getAst, getBox, getDefName, getElementCode, getElements, getExprSource, getHtml, getMDDocument, getParseErr, getRangePosition, getRangeText, getRanges, getRefName, getType, grp, handleKey, hasFunc, hasMonadOutput, head, hiddenPat, hideControlSection, hideOutputSource, hideSlider, highlightNotebookFunction, highlightPosition, id, identity, ignoreDeleteOutputBox, init, initNotebook, insertControls, isDef, isLeisureCode, isMonad, isOutput, isSlider, lazy, leisureContextString, linePat, linkSource, loadProgram, loaded, lz, makeId, makeLabel, makeMonad, makeOption, makeOutputBox, makeOutputControls, makeRange, makeSyncMonad, makeTestBox, makeTestCase, markPartialApplies, markupButton, markupButtons, markupDefs, mergeLeisureCode, nameSub, nextId, nextSibling, nodeEnd, nodeFor, nonprintable, numberEnd, numberStart, oldBrackets, owner, patchFuncAst, peer, peerGetDocument, peerGetFunctions, peerNotifySelection, postLoadQueue, prepExpr, presentLeisureCode, presentValue, previousBoxRangeInternal, previousBoxRangeStart, previousSibling, primconcatNodes, printable, printableControlCharacters, processLine, psgn, queueAfterLoad, remove, removeBoxClasses, removeOldDefs, replaceContents, replaceRange, replicate, req, resolve, root, runAuto, runMonad, runTest, runTests, rz, saveProgram, setAst, setFilename, setMinMax, setSnapper, setUpdate, showAst, showError, showFilename, showFilenames, showOutputSource, showResult, showSliderButton, showSource, skipLeftOverOutputBox, slider, snapshot, svgMeasure, svgMeasureText, tail, testPat, textNode, toDefBox, toExprBox, toggleEdit, unwrap, update, updatePat, wrapRange, xusEnv, _, _ref, _ref1, _ref2, _ref3,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  console.log("LOADING NOTEBOOK");

  _ref = root = module.exports = require('./base'), resolve = _ref.resolve, lazy = _ref.lazy;

  rz = resolve;

  lz = lazy;

  _ref1 = root = module.exports = require('./ast'), nameSub = _ref1.nameSub, getRefName = _ref1.getRefName, define = _ref1.define, foldLeft = _ref1.foldLeft, Nil = _ref1.Nil, getType = _ref1.getType, getAnnoName = _ref1.getAnnoName, getAnnoData = _ref1.getAnnoData, getAnnoBody = _ref1.getAnnoBody, Leisure_anno = _ref1.Leisure_anno;

  _ref2 = require('./runtime'), isMonad = _ref2.isMonad, runMonad = _ref2.runMonad, makeMonad = _ref2.makeMonad, makeSyncMonad = _ref2.makeSyncMonad, identity = _ref2.identity, defaultEnv = _ref2.defaultEnv, basicCall = _ref2.basicCall;

  gen = require('./gen').gen;

  _ref3 = require('./browserSupport'), ENTER = _ref3.ENTER, svgMeasure = _ref3.svgMeasure, svgMeasureText = _ref3.svgMeasureText, createNode = _ref3.createNode;

  URI = window.URI;

  Xus = window.Xus;

  $ = window.$;

  _ = require('./lodash.min');

  window.global = window;

  debug = false;

  BS = 8;

  TAB = 9;

  ENTER = 13;

  ESC = 27;

  PAGE_UP = 33;

  PAGE_DOWN = 34;

  END = 35;

  HOME = 36;

  LEFT_ARROW = 37;

  UP_ARROW = 38;

  RIGHT_ARROW = 39;

  DOWN_ARROW = 40;

  DEL = 46;

  arrows = [37, 38, 39, 40];

  updatePat = /(^|\n)(#@update )([^\n]+)(?:^|\n)/;

  peer = null;

  nextId = 0;

  filename = null;

  event = function() {
    var args, widget;
    widget = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return basicCall(args, envFor(widget), identity);
  };

  defaultEnv.readFile = function(fileName, cont) {
    var uri;
    uri = new URI(document.location.href, fileName);
    console.log("\n\n@@@@READ FILE: " + uri + "\n\n");
    return $.get(String(uri)).done(function(data) {
      return cont(null, data);
    }).fail(function(err) {
      return cont(err, null);
    });
  };

  defaultEnv.writeFile = function(fileName, data, cont) {};

  snapshot = function(el, pgm) {};

  setSnapper = function(snapFunc) {
    return snapshot = snapFunc;
  };

  delay = function(func) {
    return window.setTimeout(func, 1);
  };

  getParseErr = getHtml = function(x) {
    return x(lz(function(value) {
      return rz(value);
    }));
  };

  escapeHtml = function(str) {
    if (typeof str === 'string') {
      return str.replace(/[<>]/g, function(c) {
        switch (c) {
          case '<':
            return '&lt;';
          case '>':
            return '&gt;';
        }
      });
    } else {
      return str;
    }
  };

  presentValue = function(v) {
    var content;
    if ((getType(v)) === 'svgNode') {
      content = v(function() {
        return id;
      });
      return _svgPresent()(function() {
        return content;
      })(function() {
        return id;
      });
    } else if ((getType(v)) === 'html') {
      return getHtml(v);
    } else if ((getType(v)) === 'parseErr') {
      return "PARSE ERROR: " + (getParseErr(v));
    } else {
      return escapeHtml(String(v));
    }
  };

  bootNotebook = function(el) {
    if ((document.getElementById('channelList')) == null) {
      document.body.appendChild(createNode("<datalist id='channelList'>\n   <option value=''></option>\n   <option value='app'>app</option>\n   <option value='compile'>compile</option>\n   <option value='editorFocus'>editorFocus</option>\n</datalist>"));
    }
    return createPeer();
  };

  closeWindow = function() {
    console.log("CLOSING WINDOW");
    window.open('', '_self', '');
    return window.close();
  };

  createPeer = function() {
    var k, param, params, server, v, _i, _len, _ref4, _ref5;
    root.xusServer = server = new Xus.Server();
    server.exit = function() {
      return closeWindow();
    };
    peer = root.peer = Xus.createDirectPeer(server);
    peer.server = server;
    peer.listen('leisure/selection/contents', true, function(key, value) {
      var node, r, s;
      if (key === 'leisure/selection/contents') {
        s = window.getSelection();
        if (s.rangeCount && s.toString() !== value) {
          r = s.getRangeAt(0);
          r.deleteContents();
          node = textNode(value.toString());
          r.insertNode(node);
          s.removeAllRanges();
          r.selectNode(node);
          return s.addRange(r);
        }
      }
    });
    peer.set('leisure/evalExpr', null, 'transient');
    peer.listen('leisure/evalExpr', false, function(key, value) {
      var env, expr, result;
      if (key === 'leisure/evalExpr' && (value != null)) {
        expr = value[0], result = value[1];
        console.log("EVAL: " + expr + ", RESULT: " + result);
        env = xusEnv(result, expr);
        return processLine(expr, env, function() {
          return typeof env.cleanup === "function" ? env.cleanup() : void 0;
        });
      }
    });
    peer.set('leisure/document', peerGetDocument);
    peer.set('leisure/functions', peerGetFunctions);
    peer.set('leisure/storage', []);
    if (Boot.documentFragment) {
      params = {};
      _ref4 = Boot.documentFragment.substring(1).split('&');
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        param = _ref4[_i];
        _ref5 = param.split('='), k = _ref5[0], v = _ref5[1];
        params[k.toLowerCase()] = decodeURIComponent(v);
      }
      if (params.xusproxy != null) {
        return Xus.xusToProxy(server, params.xusproxy);
      }
    }
  };

  replaceContents = function(uri, contents) {
    if (!contents) {
      contents = uri;
      uri = null;
    }
    if (uri) {
      setFilename(uri.toString());
    }
    document.body.setAttribute('doc', '');
    window.leisureAutoRunAll = true;
    window.markup(contents);
    return bindAll();
  };

  bindAll = function() {
    var node, _i, _len, _ref4;
    _ref4 = document.querySelectorAll("[leisurenode='code']");
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      node = _ref4[_i];
      node.setAttribute('contentEditable', 'true');
      bindNotebook(node);
      changeTheme(node, 'thin');
      evalDoc(node);
    }
    return showFilenames();
  };

  xusEnv = function(resultVar, expr) {
    var env, result;
    result = '';
    env = {
      debug: debug,
      finishedEvent: function() {},
      owner: null,
      require: req,
      write: function(msg) {
        return result += "" + msg + "\n";
      },
      prompt: function(msg, cont) {
        return result += "Attempt to prompt with " + msg;
      },
      processResult: function(res, ast) {
        result += res;
        return peer.set(resultVar, JSON.stringify(result));
      },
      presentValue: function(x) {
        return x;
      },
      fileSettings: {
        uri: new URI(document.location.href)
      },
      err: function(err) {
        result += err.leisureContext ? "ERROR: " + err + ":\n" + (leisureContextString(err)) + "\n" + err.stack : "Couldn't parse: " + expr;
        return peer.set(resultVar, result);
      }
    };
    env.__proto__ = root.defaultEnv;
    return env;
  };

  peerGetDocument = function() {
    var nodes;
    nodes = document.querySelectorAll("[leisurenode='code']");
    if (nodes.length > 1 || Notebook.md) {
      return getMDDocument();
    } else {
      return getSimpleDocument();
    }
  };

  peerGetFunctions = function() {
    return (_.uniq(window.leisureFuncNames.toArray().sort(), true)).sort();
  };

  getMDDocument = function() {
    var md, node, _i, _len, _ref4, _ref5;
    md = '';
    _ref4 = document.querySelectorAll('[doc] [leisureNode]');
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      node = _ref4[_i];
      md += isLeisureCode(node) ? "```\n" + (getElementCode(node)) + "\n```\n" : (_ref5 = node.md) != null ? _ref5 : '';
    }
    return md;
  };

  makeId = function(el) {
    if (!el.id) {
      return el.id = "Leisure-" + (nextId++);
    }
  };

  allowEvents = true;

  init = false;

  bindNotebook = function(el) {
    if (!init) {
      init = true;
      defaultEnv.presentValue = presentValue;
      defaultEnv.write = function(msg) {
        return console.log(msg);
      };
      defaultEnv.owner = document.body;
      defaultEnv.finishedEvent = function(evt, channel) {
        return update(channel != null ? channel : 'app', defaultEnv);
      };
      defaultEnv.debug = debug;
    }
    if (el.bound == null) {
      makeId(el);
      el.bound = true;
      el.addEventListener('DOMCharacterDataModified', (function(evt) {
        if (allowEvents && !el.replacing) {
          return delay(function() {
            return checkMutateFromModification(evt);
          });
        }
      }), true);
      el.addEventListener('DOMSubtreeModified', (function(evt) {
        if (allowEvents && !el.replacing) {
          return delay(function() {
            return checkMutateFromModification(evt);
          });
        }
      }), true);
      el.addEventListener('mousedown', (function(e) {
        if (!isSlider(e.srcElement)) {
          return delay(function() {
            return highlightPosition(e);
          });
        }
      }), true);
      el.addEventListener('mousemove', (function(e) {
        if (!isSlider(e.srcElement)) {
          return delay(function() {
            return highlightPosition(e);
          });
        }
      }), true);
      el.addEventListener('mouseup', (function(e) {
        if (!isSlider(e.srcElement)) {
          return delay(function() {
            return highlightPosition(e);
          });
        }
      }), true);
      el.addEventListener('keydown', function(e) {
        var c, r, s;
        c = e.charCode || e.keyCode || e.which;
        if (c === DEL || c === BS) {
          s = window.getSelection();
          r = s.getRangeAt(0);
          if (c === BS) {
            checkDeleteExpr(getBox(r.startContainer));
            if (skipLeftOverOutputBox(el, r)) {
              return e.preventDefault();
            }
          } else if (c === DEL) {
            checkDeleteExpr(getBox(r.startContainer));
            if (ignoreDeleteOutputBox(el, r)) {
              return e.preventDefault();
            }
          }
        }
        if (printable(c)) {
          clearAst(getBox(window.getSelection().focusNode));
        }
        if ((__indexOf.call(arrows, c) >= 0) || printable(c)) {
          delay(function() {
            return highlightPosition(e);
          });
        }
        if (e.ctrlKey && c === ENTER) {
          return handleKey("C-ENTER");
        } else if (e.altKey && c === ENTER) {
          return handleKey("M-ENTER");
        } else if (c === TAB) {
          handleKey("TAB");
          return e.preventDefault();
        }
      });
      el.addEventListener('keypress', function(e) {
        var br, bx, r, s, sp;
        s = window.getSelection();
        r = s.getRangeAt(0);
        if ((e.charCode || e.keyCode || e.which) === ENTER) {
          br = textNode('\n');
          r.insertNode(br);
          r = document.createRange();
          r.setStart(br, 1);
          s.removeAllRanges();
          s.addRange(r);
          return e.preventDefault();
        } else if (r.startContainer.parentNode === el) {
          sp = codeSpan('\n', 'codeExpr');
          sp.setAttribute('generatedNL', '');
          bx = box(s.getRangeAt(0), 'codeMainExpr', true);
          bx.appendChild(sp);
          makeOutputBox(bx);
          r = document.createRange();
          r.setStart(sp, 0);
          s.removeAllRanges();
          return s.addRange(r);
        }
      });
      el.addEventListener('focus', (function() {
        if (allowEvents) {
          return findCurrentCodeHolder();
        }
      }), true);
      el.addEventListener('blur', (function() {
        if (allowEvents) {
          return findCurrentCodeHolder();
        }
      }), true);
      if (window.leisureAutoRunAll) {
        autoRun(el, true);
        return window.setTimeout((function() {
          return runTests(el);
        }), 1);
      } else {
        return el.autorunState = false;
      }
    }
  };

  checkDeleteExpr = function(node) {
    var out;
    if (isOutput(node && node.output)) {
      out = node.output;
      return window.setTimeout((function() {
        if (!node.textContent.trim()) {
          node.parentNode.removeChild(node);
        }
        if ((node.parentNode == null) && ((out != null ? out.parentNode : void 0) != null)) {
          return out.parentNode.removeChild(out);
        }
      }), 1);
    }
  };

  skipLeftOverOutputBox = function(el, r) {
    var box, s;
    el.normalize();
    box = previousBoxRangeInternal(r) || previousBoxRangeStart(r);
    if (isOutput(box)) {
      s = window.getSelection();
      r.selectNode(box);
      r.collapse(true);
      s.removeAllRanges();
      s.addRange(r);
      return true;
    } else {
      return false;
    }
  };

  previousBoxRangeInternal = function(r) {
    return r.startContainer.nodeType === 1 && r.startOffset > 0 && r.startContainer.childNodes[r.startOffset - 1];
  };

  previousBoxRangeStart = function(r) {
    return r.startContainer.nodeType === 3 && r.startOffset === 0 && previousSibling(r.startContainer);
  };

  ignoreDeleteOutputBox = function(el, r) {
    var n;
    el.normalize();
    if (r.startContainer.nodeType === 3 && r.startOffset === r.startContainer.length) {
      n = r.startContainer;
      while (n && n.nextSibling === null) {
        n = n.parentNode;
      }
      return isOutput(n != null ? n.nextSibling : void 0);
    } else {
      return false;
    }
  };

  isOutput = function(el) {
    return (el != null ? el.nodeType : void 0) === 1 && el.hasAttribute('LeisureOutput');
  };

  isLeisureCode = function(el) {
    return (el != null ? el.nodeType : void 0) === 1 && el.getAttribute('leisureNode') === 'code';
  };

  peerNotifySelection = function(el, str) {};

  printableControlCharacters = (function() {
    var _i, _len, _ref4, _results;
    _ref4 = "\r\i\n\b";
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      c = _ref4[_i];
      _results.push(c.charCodeAt(0));
    }
    return _results;
  })();

  printable = function(code) {
    return (code > 0xf && code < 37) || code > 40 || __indexOf.call(printableControlCharacters, code) >= 0;
  };

  nonprintable = null;

  (function() {
    var i, s, _i;
    s = '';
    for (i = _i = 0; 0 <= 0xf ? _i <= 0xf : _i >= 0xf; i = 0 <= 0xf ? ++_i : --_i) {
      s += String.fromCharCode(i);
    }
    s.replace(/[\i\r\f]/g, '');
    return nonprintable = new RegExp("[" + s + "]");
  })();

  handleKey = function(key) {
    var box;
    switch (key) {
      case "C-ENTER":
      case "TAB":
        box = getBox(window.getSelection().focusNode);
        if ((box.getAttribute('codeMainExpr')) != null) {
          return evalOutput(box.output);
        } else if ((box.getAttribute('codeMain')) != null) {
          return acceptCode(box);
        }
        break;
      case "M-ENTER":
        box = getBox(window.getSelection().focusNode);
        if ((box.getAttribute('codeMainExpr')) != null) {
          return clearOutputBox(box.output);
        }
    }
  };

  clearAst = function(box) {
    var cbox;
    cbox = getBox(box);
    return cbox != null ? cbox.ast = null : void 0;
  };

  oldBrackets = [null, Nil];

  cleanEmptyNodes = function(el) {
    var next, prev, _ref4;
    if (el.nodeType === 3 && (el.parentNode != null)) {
      return cleanEmptyNodes(el.parentNode);
    } else {
      prev = el.previousSibling;
      next = el.nextSibling;
      if (el.nodeType === 1 && el.textContent.trim() === '' && ((_ref4 = el.parentNode) != null ? _ref4.hasAttribute('doc') : void 0)) {
        el.parentNode.removeChild(el);
      }
      if (next === nextSibling(prev)) {
        return mergeLeisureCode(prev, next);
      }
    }
  };

  presentLeisureCode = function(node, doEval) {
    node.setAttribute('contentEditable', 'true');
    Notebook.bindNotebook(node);
    Notebook.changeTheme(node, 'thin');
    if (doEval) {
      return evalDoc(node);
    } else {
      return initNotebook(node);
    }
  };

  mergeLeisureCode = function(el1, el2) {
    var newCode, r;
    if (el1 && el2) {
      if (el1.nodeType === 1 && el2.nodeType === 3) {
        el1.appendChild(el2);
        return el1.normalize();
      } else if (el1.nodeType === 3 && el2.nodeType === 1) {
        el2.insertBefore(el1, el2.firstChild);
        return el2.normalize();
      } else if (el1.hasAttribute('leisureNode') && el1.getAttribute('leisureNode') === el2.getAttribute('leisureNode')) {
        newCode = textNode(el1.md = el1.getAttribute('leisureNode') === 'code' ? "" + (getElementCode(el1)) + "\n" + (getElementCode(el2)) : "" + el1.md + "\n" + el2.md);
        r = document.createRange();
        r.selectNodeContents(el2);
        el1.appendChild(textNode('\n'));
        el1.appendChild(r.extractContents());
        return el2.parentNode.removeChild(el2);
      }
    }
  };

  highlightPosition = function(e) {
    var ast, b, brackets, changed, i, node, parent, pos, r, ranges, s, span, _i, _j, _k, _len, _len1, _len2, _ref4, _ref5, _ref6;
    parent = null;
    s = window.getSelection();
    if (s.rangeCount) {
      if (cleanEmptyNodes(s.getRangeAt(0).startContainer)) {
        return;
      }
      focusBox(s.focusNode);
      parent = getBox(s.focusNode);
      if ((_ref4 = s.getRangeAt(0)) != null ? _ref4.collapsed : void 0) {
        if (!parent || isOutput(parent)) {
          return;
        }
        if (parent.parentNode && (ast = getAst(parent))) {
          r = s.getRangeAt(0);
          r.setStart(parent, 0);
          pos = getRangeText(r).length;
          changed = false;
          if (false) {
            brackets = Leisure.bracket(ast.leisureBase, pos);
            if (oldBrackets[0] !== parent || !oldBrackets[1].equals(brackets)) {
              oldBrackets = [parent, brackets];
              _ref5 = document.querySelectorAll("[LeisureBrackets]");
              for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
                node = _ref5[_i];
                unwrap(node);
              }
              _ref6 = parent.querySelectorAll(".partialApply");
              for (_j = 0, _len1 = _ref6.length; _j < _len1; _j++) {
                node = _ref6[_j];
                unwrap(node);
              }
              parent.normalize();
              markPartialApplies(parent);
              b = brackets;
              ranges = [];
              while (b !== Nil) {
                ranges.push(makeRange(parent, b.head().head(), b.head().tail().head()));
                b = b.tail();
              }
              for (i = _k = 0, _len2 = ranges.length; _k < _len2; i = ++_k) {
                r = ranges[i];
                span = document.createElement('span');
                span.setAttribute('LeisureBrackets', '');
                span.setAttribute('class', i === 0 ? 'LeisureFunc' : 'LeisureArg');
                wrapRange(r, span);
              }
              changed = true;
            }
          }
          if (e instanceof KeyboardEvent) {
            if (hideSlider()) {
              pos += 1;
            }
          } else if (e instanceof MouseEvent && e.type === 'mousedown' && (e.target === parent || parent.contains(e.target)) && showSliderButton(parent, pos, e)) {
            changed = true;
            pos += 1;
          }
          if (changed) {
            window.EVT = e;
            s.removeAllRanges();
            s.addRange(makeRange(parent, pos));
          }
        }
      }
      return peerNotifySelection(parent, s.toString());
    }
  };

  numberEnd = /(?:^|.*[^0-9.])([0-9]+\.?[0-9]*|\.[0-9]*)$/;

  numberStart = /^([0-9]+\.[0-9]+|[0-9]+|\.[0-9]+)/;

  slider = [];

  showSliderButton = function(parent, pos, e) {
    var changed, len, m, oldPos, r, sParent, sPos, sValue, span, text;
    if (slider.length) {
      hideSlider();
      return false;
    } else {
      text = parent.textContent;
      oldPos = pos;
      changed = 0;
      if (m = text.substring(0, pos).match(numberEnd)) {
        pos -= m[1].length;
      }
      if (m = text.substring(pos).match(numberStart)) {
        len = m[1].length;
        if (oldPos <= pos + len) {
          sParent = slider[0], sPos = slider[1], sValue = slider[2];
          if (parent !== sParent || pos !== sPos || m[1] !== sValue) {
            hideSlider();
            r = makeRange(parent, pos, pos + m[1].length);
            span = createNode("<span class='leisureRangeNumber ui-widget-content'></span>");
            wrapRange(r, span);
            changed = 1;
            span.normalize();
            slider = [parent, pos, m[1], span];
            createSlider();
          }
        }
        return changed;
      } else {
        return hideSlider();
      }
    }
  };

  isSlider = function(el) {
    while (el !== document) {
      if (el.hasAttribute('slider')) {
        return true;
      }
      el = el.parentNode;
    }
    return false;
  };

  createSlider = function() {
    var d, div, inside, max, min, parent, pos, sl, sliding, span, value;
    parent = slider[0], pos = slider[1], value = slider[2], span = slider[3], div = slider[4];
    if (div) {
      return;
    }
    inside = false;
    sliding = false;
    d = createNode("<div style='z-index: 1; position: absolute; width: 200px; background: white; border: solid green 1px' slider contentEditable='false'></div>");
    slider.push(d);
    d.style.top = "" + (span.offsetTop + span.offsetHeight + 5) + "px";
    d.style.minTop = '0px';
    d.style.left = "" + (Math.max(0, (span.offsetLeft + span.offsetWidth) / 2 - 100)) + "px";
    d.addEventListener('mouseover', function(e) {
      if (!inside) {
        return inside = true;
      }
    });
    d.addEventListener('mouseout', function(e) {
      if (e.toElement !== d && !d.contains(e.toElement)) {
        inside = false;
        if (!sliding) {
          return hideSlider();
        }
      }
    });
    value = Number(value);
    min = value < 0 ? value * 2 : value / 2;
    max = value === 0 ? 10 : value * 2;
    sl = $(d).slider({
      animate: 'fast',
      start: function() {
        sliding = true;
        return delay(function() {
          return allowEvents = false;
        });
      },
      stop: function(event, ui) {
        setMinMax(sl);
        allowEvents = true;
        sliding = false;
        if (!inside) {
          return hideSlider();
        }
      },
      slide: function(event, ui) {
        var ast, _ref4;
        if (span.firstChild) {
          span.firstChild.nodeValue = String(ui.value);
        }
        if (isDef(parent)) {
          parent.ast = null;
          acceptCode(parent);
          ast = getAst(parent);
          if ((_ref4 = parent.ast) != null ? _ref4.leisureName : void 0) {
            return update("sel-" + parent.ast.leisureName);
          }
        } else {
          makeId(parent);
          if (!parent.getAttribute(parent.output, 'leisureUpdate')) {
            setUpdate(parent.output, "id-" + parent.id + " compile", true);
          }
          update("id-" + parent.id);
          return update("compile");
        }
      },
      value: value
    });
    setMinMax(sl, value);
    parent.insertBefore(d, parent.firstChild);
    return d.focus();
  };

  psgn = function(x) {
    if (x < 0) {
      return -1;
    } else {
      return 1;
    }
  };

  setMinMax = function(sl, value) {
    var max, min, step, _ref4;
    value = value || sl.slider("value");
    min = 0;
    max = (1 <= (_ref4 = Math.abs(value)) && _ref4 < 50) || value === 0 ? 100 * psgn(value) : value * 2;
    if (Math.round(value) === value) {
      step = Math.round((max - min) / 100);
      step = step - step % (max - min);
    } else {
      step = (max - min) / 100;
    }
    sl.slider("option", "min", min);
    sl.slider("option", "max", max);
    return sl.slider("option", "step", step);
  };

  hideSlider = function() {
    var div, parent, sPos, sValue, span;
    if (slider.length) {
      parent = slider[0], sPos = slider[1], sValue = slider[2], span = slider[3], div = slider[4];
      unwrap(span);
      if (div) {
        remove(div);
      }
      parent.normalize();
      slider = [];
      return 2;
    } else {
      return 0;
    }
  };

  wrapRange = function(range, node) {
    var contents, err;
    try {
      return range.surroundContents(node);
    } catch (_error) {
      err = _error;
      contents = range.cloneContents();
      replaceRange(range, node);
      return node.appendChild(contents);
    }
  };

  replaceRange = function(range, node) {
    range.deleteContents();
    return range.insertNode(node);
  };

  getRangeText = function(r) {
    return r.cloneContents().textContent;
  };

  getBox = function(node) {
    while ((node != null) && ((typeof node.getAttribute === "function" ? node.getAttribute('LeisureBox') : void 0) == null)) {
      node = node.parentElement;
    }
    return node;
  };

  checkMutateFromModification = function(evt) {
    var b, b2;
    b = getBox(evt.target);
    b2 = getBox(window.getSelection().focusNode);
    if (b && b === b2) {
      if ((isDef(b)) && b.classList.contains('codeMainExpr')) {
        toDefBox(b);
      } else if (!(isDef(b)) && b.classList.contains('codeMain')) {
        toExprBox(b);
      }
      return replicate(b);
    }
  };

  replicate = function(b) {
    if (b.replicator) {
      return delay(function() {
        return b.replicator.replicate(b);
      });
    }
  };

  buttonClasses = 'ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only'.split(' ');

  boxClasses = {
    codeMainExpr: ['codeMainExpr', 'ui-widget', 'ui-widget-content', 'ui-corner-all'],
    codeMain: ['codeMain', 'ui-widget', 'ui-widget-content', 'ui-corner-all'],
    codeMainTest: ['codeMainTest'],
    output: ['output', 'ui-corner-all']
  };

  addBoxClasses = function(box, type) {
    var cl, _i, _len, _ref4, _results;
    box.setAttribute(type, '');
    _ref4 = boxClasses[type];
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      cl = _ref4[_i];
      _results.push(box.classList.add(cl));
    }
    return _results;
  };

  removeBoxClasses = function(box, type) {
    var cl, _i, _len, _ref4, _results;
    box.removeAttribute(type);
    _ref4 = boxClasses[type];
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      cl = _ref4[_i];
      _results.push(box.classList.remove(cl));
    }
    return _results;
  };

  toExprBox = function(b) {
    var node, _i, _j, _len, _len1, _ref4, _ref5;
    removeBoxClasses(b, 'codeMain');
    addBoxClasses(b, 'codeMainExpr');
    _ref4 = b.querySelectorAll('[codename]');
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      node = _ref4[_i];
      unwrap(node);
    }
    _ref5 = b.querySelectorAll('.astbutton');
    for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
      node = _ref5[_j];
      remove(node);
    }
    return makeOutputBox(b);
  };

  toDefBox = function(b) {
    if (b.output) {
      remove(b.output);
    }
    removeBoxClasses(b, 'codeMainExpr');
    addBoxClasses(b, 'codeMain');
    return addDefControls(b);
  };

  addDefControls = function(box) {
    var btn;
    btn = createNode("<button onclick='Notebook.showAst(this.parentNode)' class='astbutton' title='Show AST'></button>");
    markupButton(btn);
    return box.appendChild(btn);
  };

  remove = function(node) {
    var _ref4;
    return (_ref4 = node.parentNode) != null ? _ref4.removeChild(node) : void 0;
  };

  showAst = function(box) {
    var name, node, output;
    name = (getAst(box)).leisureName;
    if (box.astOut != null) {
      remove(box.astOut.output);
      remove(box.astOut);
      return box.astOut = null;
    } else if (name != null) {
      node = codeBox('codeMainExpr');
      box.astOut = node;
      node.setAttribute('leisureOutput', '');
      box.parentNode.insertBefore(node, box.nextSibling);
      node.textContent = "#@update sel-" + name + "\ntreeForNotebook " + name;
      output = makeOutputBox(node);
      toggleEdit(output);
      return evalOutput(output, true);
    }
  };

  highlightNotebookFunction = function(funcName, start, stop) {
    var box, offset, sel;
    box = document.body.querySelector("[leisurefunc=" + funcName + "]");
    offset = 0;
    sel = window.getSelection();
    sel.removeAllRanges();
    return sel.addRange(makeRange(box, start + offset, stop + offset));
  };

  isDef = function(box) {
    var defType, leading, m, matched, name, txt;
    txt = box.textContent;
    if ((m = txt.match(L_defPat()))) {
      matched = m[0], leading = m[1], name = m[2], defType = m[3];
      return (defType != null ? defType.length : void 0) > 0;
    }
    return false;
  };

  initNotebook = function(el) {
    var pgm;
    el.replacing = true;
    removeOldDefs(el);
    pgm = markupDefs(el, findDefs(el));
    el.normalize();
    el.replacing = false;
    if (!el.hasAttribute('noLeisureBar')) {
      insertControls(el);
      el.testResults.innerHTML = pgm[2];
    }
    snapshot(el, pgm);
    return pgm;
  };

  makeLabel = function(text, c) {
    var node;
    node = document.createElement('SPAN');
    node.innerHTML = text;
    node.setAttribute('class', c);
    return node;
  };

  makeOption = function(name) {
    var opt;
    opt = document.createElement('OPTION');
    opt.text = name;
    return opt;
  };

  createFragment = function(txt) {
    var frag, scratch;
    scratch = document.createElement('DIV');
    scratch.innerHTML = txt;
    frag = document.createDocumentFragment();
    while (scratch.firstChild) {
      frag.appendChild(scratch.firstChild);
    }
    return frag;
  };

  insertControls = function(el) {
    var controlDiv, saveButton, spacer, testButton, themeSelect, viewSelect, _ref4, _ref5;
    controlDiv = createNode("<div LeisureOutput contentEditable='false' class='leisure_bar'><div class=\"leisure_bar_contents\">\n  <button leisureId='saveButton' class=\"leisure_start\">Save</button>\n  <button leisureId='testButton'>Run Tests</button> <span leisureId='testResults' class=\"notrun\"></span>\n  <input type='checkbox' leisureId='autorunTests'><b>Auto</b></input>\n  <span class=\"leisure_theme\">Theme: </span>\n  <select leisureId='themeSelect'>\n    <option value=thin>Thin</option>\n    <option value=gaudy>Gaudy</option>\n    <option value=cthulhu>Cthulhu</option>\n  </select>\n  <span>View: </span>\n  <select leisureId='viewSelect'>\n    <option value=coding>Coding</option>\n    <option value=debugging>Debugging</option>\n    <option value=testing>Testing</option>\n    <option value=running>Running</option>\n  </select>\n</div>");
    spacer = createNode("<div LeisureOutput  contentEditable='false' class='leisure_space'></div>");
    el.insertBefore(spacer, el.firstChild);
    el.insertBefore(controlDiv, el.firstChild);
    _ref4 = getElements(el, ['downloadLink', 'viewLink', 'saveButton', 'testButton', 'testResults', 'autorunTests', 'themeSelect', 'viewSelect']), el.leisureDownloadLink = _ref4[0], el.leisureViewLink = _ref4[1], saveButton = _ref4[2], testButton = _ref4[3], el.testResults = _ref4[4], el.autorun = _ref4[5], themeSelect = _ref4[6], viewSelect = _ref4[7];
    controlDiv.addEventListener('click', function(evt) {
      if (document.body.classList.contains('hideControls')) {
        return document.body.classList.remove('hideControls');
      } else {
        return document.body.classList.add('hideControls');
      }
    });
    saveButton.addEventListener('click', function(evt) {
      return saveProgram(el);
    });
    testButton.addEventListener('click', function() {
      return runTests(el);
    });
    themeSelect.value = (_ref5 = el.leisureTheme) != null ? _ref5 : 'thin';
    themeSelect.addEventListener('change', function(evt) {
      return changeTheme(el, evt.target.value);
    });
    viewSelect.addEventListener('change', function(evt) {
      return changeView(el, evt.target.value);
    });
    el.autorun.checked = el.autorunState;
    el.autorun.addEventListener('change', function(evt) {
      el.autorunState = el.autorun.checked;
      if (el.autorunState) {
        return runTests(el);
      }
    });
    return markupButtons(controlDiv);
  };

  saveProgram = function() {
    return write(filename, getMDDocument(), (function() {
      return alert("Saving " + filename);
    }), function(err) {
      console.log(err);
      alert(err.stack);
      throw err;
    });
  };

  showFilename = function(el) {
    if (el && filename) {
      el.innerHTML = "Save: " + (filename.pathName());
      return el.title = filename.toString();
    }
  };

  showFilenames = function() {
    var node, _i, _len, _ref4, _results;
    _ref4 = document.body.querySelectorAll('[leisureId=saveButton]');
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      node = _ref4[_i];
      _results.push(showFilename(node));
    }
    return _results;
  };

  setFilename = function(newName) {
    console.log("SET FILENAME: " + newName);
    filename = newName instanceof URI ? newName : new URI(document.location.href, newName);
    return showFilenames();
  };

  markupButtons = function(el) {
    var btn, _i, _len, _ref4, _results;
    _ref4 = el.querySelectorAll('button');
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      btn = _ref4[_i];
      _results.push(markupButton(btn));
    }
    return _results;
  };

  markupButton = function(btn) {
    var cl, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = buttonClasses.length; _i < _len; _i++) {
      cl = buttonClasses[_i];
      _results.push(btn.classList.add(cl));
    }
    return _results;
  };

  getElements = function(el, ids) {
    var els, id, node, _i, _j, _len, _len1, _ref4, _results;
    els = {};
    _ref4 = el.querySelectorAll('[leisureId]');
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      node = _ref4[_i];
      els[node.getAttribute('leisureId')] = node;
    }
    _results = [];
    for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
      id = ids[_j];
      _results.push(els[id]);
    }
    return _results;
  };

  escapeHtml = function(str) {
    if (typeof str === 'string') {
      return str.replace(/[<>]/g, function(c) {
        switch (c) {
          case '<':
            return '&lt;';
          case '>':
            return '&gt;';
        }
      });
    } else {
      return str;
    }
  };

  loadProgram = function(el, files) {
    var fr;
    el = getBox;
    fr = new FileReader();
    fr.onloadend = function(evt) {
      el.innerHTML = escapeHtml(fr.result);
      return initNotebook(el);
    };
    return fr.readAsBinaryString(files.item(0));
  };

  configureSaveLink = function(el) {
    var blob, builder;
    window.URL = window.URL || window.webkitURL;
    builder = new WebKitBlobBuilder();
    builder.append(getElementCode(el));
    blob = builder.getBlob('text/plain');
    el.leisureDownloadLink.href = window.URL.createObjectURL(blob);
    return el.leisureViewLink.href = window.URL.createObjectURL(blob);
  };

  getElementCode = function(el) {
    var r;
    r = document.createRange();
    r.selectNode(el);
    c = r.cloneContents().firstChild;
    removeOldDefs(c);
    return c.textContent;
  };

  runTests = function(el) {
    var failed, passed, resultsClass, test, _i, _len, _ref4;
    passed = 0;
    failed = 0;
    _ref4 = el.querySelectorAll('.codeMainTest');
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      test = _ref4[_i];
      if (runTest(test)) {
        passed++;
      } else {
        failed++;
      }
    }
    if (el.testResults) {
      resultsClass = el.testResults.classList;
      resultsClass.remove('notrun');
      if (!failed) {
        resultsClass.remove('failed');
        resultsClass.add('passed');
        return el.testResults.innerHTML = passed;
      } else {
        resultsClass.remove('passed');
        resultsClass.add('failed');
        return el.testResults.innerHTML = "" + passed + "/" + failed;
      }
    }
  };

  changeTheme = function(el, value) {
    var theme;
    theme = value;
    el.leisureTheme = theme;
    return el.className = theme;
  };

  changeView = function(el, value) {
    debug = value === 'debugging';
    return alert('new view: ' + value + ", debug: " + debug);
  };

  unwrap = function(node) {
    var parent;
    parent = node.parentNode;
    if (parent) {
      while (node.firstChild != null) {
        parent.insertBefore(node.firstChild, node);
      }
      return parent.removeChild(node);
    }
  };

  removeOldDefs = function(el) {
    var extracted, m, node, txt, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref4, _ref5, _ref6;
    el.leisureDownloadLink = null;
    el.leisureViewLink = null;
    extracted = [];
    _ref4 = el.querySelectorAll("[LeisureOutput]");
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      node = _ref4[_i];
      remove(node);
    }
    _ref5 = el.querySelectorAll("[generatednl]");
    for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
      node = _ref5[_j];
      txt = node.lastChild;
      if (txt.nodeType === 3 && txt.data[txt.data.length - 1] === '\n') {
        txt.data = txt.data.substring(0, txt.data.length - 1);
      }
    }
    _ref6 = el.querySelectorAll("[Leisure]");
    for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {
      node = _ref6[_k];
      if (addsLine(node) && (node.firstChild != null)) {
        extracted.push(node.firstChild);
      }
      unwrap(node);
    }
    for (_l = 0, _len3 = extracted.length; _l < _len3; _l++) {
      node = extracted[_l];
      if ((node.parentNode != null) && !addsLine(node) && (node.previousSibling != null) && !addsLine(node.previousSibling)) {
        node.parentNode.insertBefore(text('\n'), node);
      }
    }
    el.textContent = el.textContent.replace(/\uFEFF/g, '');
    txt = el.lastChild;
    if ((txt != null ? txt.nodeType : void 0) === 3 && (m = txt.data.match(/(^|[^\n])(\n+)$/))) {
      return txt.data = txt.data.substring(0, txt.data.length - m[2].length);
    }
  };

  markupDefs = function(el, defs) {
    var auto, bod, body, bx, def, i, main, name, notebookAutoNodes, pgm, s, test, tests, totalTests, _i, _j, _len, _len1, _ref4, _ref5;
    pgm = '';
    auto = '';
    totalTests = 0;
    notebookAutoNodes = [];
    for (_i = 0, _len = defs.length; _i < _len; _i++) {
      i = defs[_i];
      main = i.main, name = i.name, def = i.def, body = i.body, tests = i.tests;
      if (name) {
        bx = box(main, 'codeMain', true);
        bx.appendChild(codeSpan(name, 'codeName'));
        bx.appendChild(textNode(def));
        bod = codeSpan(textNode(body), 'codeBody');
        bod.appendChild(textNode('\n'));
        bod.setAttribute('generatedNL', '');
        bx.appendChild(bod);
        bx.addEventListener('blur', (function() {
          return evalDoc(el);
        }), true);
        markPartialApplies(bx);
        addDefControls(bx);
        pgm += "" + name + " " + def + " " + body + "\n";
      } else if (main != null) {
        bx = box(main, 'codeMainExpr', true);
        s = codeSpan(textNode(body), 'codeExpr');
        s.setAttribute('generatedNL', '');
        s.appendChild(textNode('\n'));
        bx.appendChild(s);
        markPartialApplies(bx);
        if (((_ref4 = main.leisureAuto) != null ? _ref4.mode : void 0) === 'silent') {
          auto += "" + body + "\n";
        } else {
          if (((_ref5 = main.leisureAuto) != null ? _ref5.mode : void 0) === 'notebook') {
            notebookAutoNodes.push(bx);
          }
          makeOutputBox(bx);
        }
      }
      for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
        test = tests[_j];
        replaceRange(test, makeTestBox(test.leisureTest));
        totalTests++;
      }
    }
    return [pgm, auto, totalTests, notebookAutoNodes];
  };

  getDefName = function(ast) {
    if (ast instanceof Leisure_anno && getAnnoName(ast) === 'definition') {
      return getAnnoData(ast);
    } else {
      return null;
    }
  };

  getAst = function(bx, def) {
    var defName, _ref4;
    if (bx.ast != null) {
      patchFuncAst(bx.ast);
      bx.setAttribute('leisureFunc', (_ref4 = bx.ast.leisureName) != null ? _ref4 : '');
      return bx.ast;
    } else {
      def = def || bx.textContent;
      defName = getDefName(runMonad(rz(L_newParseLine)(lz(Nil))(lz(def))));
      setAst(bx, (defName ? {
        leisureName: defName,
        leisureSource: def
      } : {}));
      return bx.ast;
    }
  };

  setAst = function(bx, ast) {
    bx.ast = ast;
    return patchFuncAst(ast);
  };

  patchFuncAst = function(ast) {
    var parent;
    if ((ast != null ? ast.leisureName : void 0) != null) {
      parent = window[nameSub(ast.leisureName)];
      if (parent != null) {
        parent.ast = ast;
        parent.src = ast.leisureSource;
        return update("ast-" + ast.leisureName);
      }
    }
  };

  markPartialApplies = function(bx, def) {};

  textNode = function(text) {
    return document.createTextNode(text);
  };

  nodeFor = function(text) {
    if (typeof text === 'string') {
      return textNode(text);
    } else {
      return text;
    }
  };

  evalOutput = function(exBox, nofocus, cont) {
    var selector, stopUpdates, updateSelector, _ref4;
    exBox = getBox(exBox);
    if (!nofocus) {
      focusBox(exBox);
    }
    cleanOutput(exBox, true);
    selector = findUpdateSelector(exBox.source);
    if (selector) {
      exBox.setAttribute('leisureUpdate', selector);
    }
    makeOutputControls(exBox);
    _ref4 = getElements(exBox.firstChild, ['chooseUpdate', 'stopUpdates']), updateSelector = _ref4[0], stopUpdates = _ref4[1];
    updateSelector.addEventListener('change', function(evt) {
      return setUpdate(exBox, evt.target.value, true);
    });
    updateSelector.addEventListener('keydown', function(e) {
      c = e.charCode || e.keyCode || e.which;
      if (c === ENTER) {
        e.preventDefault();
        return updateSelector.blur();
      }
    });
    updateSelector.value = (exBox.getAttribute('leisureUpdate')) || '';
    exBox.updateSelector = updateSelector;
    return evalBox(exBox.source, exBox, cont);
  };

  findUpdateSelector = function(box) {
    var def, defType, leading, matched, name, u;
    if (def = box.textContent.match(rz(L_defPat))) {
      matched = def[0], leading = def[1], name = def[2], defType = def[3];
      if (u = leading.match(updatePat)) {
        return u[3];
      }
    }
  };

  getExprSource = function(box) {
    var b, s;
    s = window.getSelection();
    b = getBox(s.focusNode);
    if (b !== box || !s.rangeCount || s.getRangeAt(0).collapsed) {
      return box.textContent;
    } else {
      return getRangeText(s.getRangeAt(0));
    }
  };

  setUpdate = function(el, channel, preserveSource) {
    var ast, def, defType, index, leading, matched, name, r, txt, u;
    el.setAttribute('leisureUpdate', channel);
    if (channel) {
      el.classList.add('ui-state-highlight');
    } else {
      el.classList.remove('ui-state-highlight');
    }
    ast = getAst(el.source);
    txt = el.source.textContent;
    if (!preserveSource && (def = txt.match(rz(L_defPat)))) {
      matched = def[0], leading = def[1], name = def[2], defType = def[3];
      index = def.index;
      if (u = leading.match(updatePat)) {
        index += u.index + u[1].length + u[2].length;
        r = makeRange(el.source, index, index + u[3].length);
        r.deleteContents();
      } else {
        r = makeRange(el.source, index + leading.length, index + leading.length);
      }
      r.insertNode(textNode(channel));
      return el.source.normalize();
    }
  };

  hasMonadOutput = function(box) {
    var _ref4, _ref5;
    return ((_ref4 = box.firstElementChild) != null ? (_ref5 = _ref4.nextElementSibling) != null ? _ref5.nextElementSibling : void 0 : void 0) != null;
  };

  checkHideSource = function(box) {
    var hs;
    if (!box.hideOutputSource && hasMonadOutput(box)) {
      box.hideOutputSource = true;
      hs = createNode("<button class='editToggle' style='float:right'></button>");
      markupButton(hs);
      hs.addEventListener('click', function() {
        return toggleEdit(hs);
      });
      return box.firstElementChild.appendChild(hs);
    }
  };

  makeOutputControls = function(exBox) {
    if (exBox.firstChild.firstChild === exBox.firstChild.lastChild) {
      exBox.firstChild.insertBefore(createFragment("<button onclick='Notebook.clearOutputBox(this)'>X</button>"), exBox.firstChild.firstChild);
      exBox.firstChild.appendChild(createFragment("<button onclick='Notebook.makeTestCase(this)' leisureId='makeTestCase'>Make test\ncase</button><b>Update: </b><input type='text'\nplaceholder='Click for updating' list='channelList' leisureId='chooseUpdate'></input><button\nonclick='Notebook.clearUpdates(this)' leisureId='stopUpdates'>Stop Updates</button>"));
      markupButtons(exBox);
      return exBox.classList.add('fatControls');
    }
  };

  showOutputSource = function(output) {
    output.classList.remove('hidingSource');
    return output.source.style.display = '';
  };

  hideOutputSource = function(output) {
    console.log("HIDE: " + output);
    output.classList.add('hidingSource');
    return output.source.style.display = 'none';
  };

  toggleEdit = function(toggleButton) {
    var output;
    output = getBox(toggleButton);
    if (output.classList.contains('hidingSource')) {
      return showOutputSource(output);
    } else {
      return hideOutputSource(output);
    }
  };

  clearUpdates = function(widget, preserveSource) {
    var exBox;
    exBox = getBox(widget);
    exBox.updateSelector.value = '';
    return setUpdate(exBox, '', preserveSource);
  };

  update = function(type, env) {
    var node, _i, _len, _ref4, _results;
    env = env != null ? env : defaultEnv;
    _ref4 = env.owner.querySelectorAll("[leisureUpdate~='" + type + "']");
    _results = [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      node = _ref4[_i];
      _results.push(evalOutput(node, true));
    }
    return _results;
  };

  clearOutputBox = function(exBox) {
    clearUpdates(exBox, true);
    return cleanOutput(exBox);
  };

  cleanOutput = function(exBox, preserveControls) {
    var fc, _results;
    exBox = getBox(exBox);
    exBox.classList.remove('fatControls');
    if (!preserveControls) {
      exBox.hideOutputSource = null;
      fc = exBox.firstChild;
      fc.removeChild(fc.firstChild);
      while (fc.firstChild !== fc.lastChild) {
        fc.removeChild(fc.lastChild);
      }
    }
    _results = [];
    while (exBox.firstChild !== exBox.lastChild) {
      _results.push(exBox.removeChild(exBox.lastChild));
    }
    return _results;
  };

  makeTestCase = function(exBox) {
    var box, output, source, test;
    output = getBox(exBox);
    source = output.source;
    test = {
      expr: source.textContent.trim(),
      expected: escapeHtml(Parse.print(output.result))
    };
    box = makeTestBox(test, owner(exBox));
    source.parentNode.insertBefore(box, source);
    remove(source);
    remove(output);
    box.parentNode.insertBefore(textNode('\uFEFF'), box);
    box.parentNode.insertBefore(textNode('\uFEFF'), box.nextSibling);
    if (owner(box).autorunState) {
      return clickTest(box);
    }
  };

  makeTestBox = function(test, owner, src) {
    var bx, s;
    src = src != null ? src : "#@test " + (JSON.stringify(test.expr)) + "\n#@expected " + (JSON.stringify(test.expected));
    s = codeSpan(src, 'codeTest');
    s.appendChild(textNode('\n'));
    s.setAttribute('generatedNL', '');
    bx = codeBox('codeMainTest');
    bx.testSrc = s;
    bx.setAttribute('class', 'codeMainTest notrun');
    bx.setAttribute('contenteditable', 'false');
    bx.appendChild(s);
    bx.addEventListener('click', (function() {
      return clickTest(bx);
    }), true);
    bx.test = test;
    return bx;
  };

  clickTest = function(bx) {
    var exprBox, r, sp;
    if (bx.classList.contains('notrun')) {
      return runTest(bx);
    } else {
      r = document.createRange();
      r.setStartBefore(bx);
      r.setEndAfter(bx);
      r.deleteContents();
      sp = codeSpan(bx.test.expr, 'codeExpr');
      sp.setAttribute('generatedNL', '');
      exprBox = box(r, 'codeMainExpr', true);
      exprBox.appendChild(sp);
      return makeOutputBox(exprBox);
    }
  };

  runTest = function(bx) {
    var passed, test;
    test = bx.test;
    passed = true;
    processLine(prepExpr(test.expr), {
      values: {},
      require: req,
      write: function(str) {
        return console.log(str);
      },
      debug: debug,
      prompt: function(msg, cont) {
        return cont(null);
      },
      processResult: function(result, ast) {
        return passed = showResult(bx, escapeHtml(String(result)), escapeHtml(test.expected));
      },
      err: function() {
        return passed = false;
      },
      presentValue: function(x) {
        return x;
      }
    }, identity);
    return passed;
  };

  showResult = function(bx, actual, expected) {
    var cl;
    cl = bx.classList;
    cl.remove('notrun');
    if (actual === expected) {
      cl.remove('failed');
      cl.add('passed');
      bx.testSrc.innerHTML = "#@test " + (JSON.stringify(bx.test.expr)) + "\n#@expected " + (JSON.stringify(bx.test.expected));
    } else {
      cl.remove('passed');
      cl.add('failed');
      bx.testSrc.innerHTML = "#@test " + (JSON.stringify(bx.test.expr)) + "\n#@expected " + (JSON.stringify(bx.test.expected)) + "\n#@result " + (JSON.stringify(actual));
      console.log("expected <" + expected + "> but got <" + actual + ">");
    }
    return actual === expected;
  };

  prepExpr = function(txt) {
    return txt;
  };

  envFor = function(box) {
    var env, exBox, widget;
    exBox = getBox(box);
    widget = null;
    env = {
      fileSettings: {},
      debug: debug,
      finishedEvent: function(evt, channel) {
        return update(channel != null ? channel : 'app', this);
      },
      owner: owner(box),
      box: box,
      require: req,
      write: function(msg) {
        var div;
        div = document.createElement('div');
        div.classList.add('outputDiv');
        div.innerHTML = "" + msg + "\n";
        exBox.appendChild(div);
        checkHideSource(exBox);
        return markupButtons(exBox);
      },
      getWidget: function() {
        if (!widget) {
          widget = document.createElement("DIV");
          exBox.appendChild(widget);
        }
        return widget;
      },
      destroyWidget: function() {
        if (widget) {
          return remove(widget);
        }
      },
      prompt: function(msg, cont) {
        return cont(window.prompt(msg));
      },
      processResult: function(result, ast) {
        box.result = result;
        return setAst(box, ast);
      },
      presentValue: presentValue,
      err: function(err) {
        var btn, _ref4;
        btn = box.querySelector('[leisureId="makeTestCase"]');
        if (btn) {
          remove(btn);
        }
        return this.write("<div class='errorDiv'>" + escapeHtml("ERROR: " + (err.leisureContext ? "" + err + ":\n" + (leisureContextString(err)) + "\n" : '') + ((_ref4 = err.stack) != null ? _ref4 : err)) + "</div>");
      },
      cleanup: function() {
        this.destroyWidget();
        if (root.lastEnv === env) {
          return root.lastEnv = null;
        }
      }
    };
    env.__proto__ = defaultEnv;
    env.fileSettings.uri = new URI(document.location.href);
    root.lastEnv = env;
    return env;
  };

  leisureContextString = function(err) {
    var func, offset;
    return ((function() {
      var _i, _len, _ref4, _ref5, _results;
      _ref4 = err.leisureContext.toArray();
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        _ref5 = _ref4[_i], func = _ref5[0], offset = _ref5[1];
        _results.push(linkSource(func, offset));
      }
      return _results;
    })()).join('\n');
  };

  linkSource = function(funcName, offset) {};

  showSource = function(funcName, offset) {};

  makeOutputBox = function(source) {
    var cl, node, _i, _len, _ref4;
    node = document.createElement('div');
    node.setAttribute('LeisureOutput', '');
    node.setAttribute('Leisure', '');
    node.setAttribute('LeisureBox', '');
    _ref4 = boxClasses.output;
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      cl = _ref4[_i];
      node.classList.add(cl);
    }
    node.setAttribute('contentEditable', 'false');
    node.source = source;
    source.output = node;
    node.innerHTML = "<div class='controls'><button onclick='Notebook.evalOutput(this)'>-&gt;</button></div>";
    markupButtons(node);
    source.parentNode.insertBefore(node, source.nextSibling);
    return node;
  };

  codeSpan = function(text, boxType) {
    var node;
    node = document.createElement('span');
    node.setAttribute(boxType, '');
    node.setAttribute('Leisure', '');
    node.setAttribute('class', boxType);
    if (text) {
      node.appendChild(nodeFor(text));
    }
    return node;
  };

  codeBox = function(boxType) {
    var node;
    node = document.createElement('div');
    addBoxClasses(node, boxType);
    node.setAttribute('LeisureBox', '');
    node.setAttribute('Leisure', '');
    node.addEventListener('compositionstart', function(e) {
      return checkMutateFromModification(e);
    });
    return node;
  };

  box = function(range, boxType, empty) {
    var node;
    node = codeBox(boxType);
    if (empty) {
      range.deleteContents();
    } else {
      node.appendChild(range.extractContents());
    }
    range.insertNode(node);
    return node;
  };

  linePat = new RegExp("(" + (rz(L_linePat).source) + ")");

  findDefs = function(el) {
    var def, ranges, rest, rng, txt;
    txt = el.textContent;
    rest = txt;
    ranges = [];
    while ((def = rest.match(rz(L_unanchoredDefPat))) && def[1].length !== rest.length) {
      rng = getRanges(el, txt, rest, def, txt.length - rest.length);
      if (rng) {
        rest = rng.next;
        if (rng) {
          ranges.push(rng);
        } else {
          break;
        }
      } else {
        break;
      }
    }
    return ranges;
  };

  testPat = /(#@test([^\n]*)\n#@expected([^\n]*))\n/m;

  getRanges = function(el, txt, rest, def, restOff) {
    var body, bodyStart, defType, endPat, ex, exEnd, leadOff, leading, leadingSpaces, lm, m, m2, mainEnd, mainStart, matchStart, matched, name, nameEnd, nameRaw, next, outerRange, r, rest1, t, tOff, tests, textStart, _ref4, _ref5, _ref6, _ref7;
    _ref4 = m = def, matched = _ref4[0], leading = _ref4[1], nameRaw = _ref4[2], defType = _ref4[3];
    if (!rest.trim()) {
      return null;
    } else if (m == null) {
      return [makeRange(el, restOff, txt.length), null, null, [], ''];
    } else {
      tests = [];
      matchStart = restOff + m.index;
      if (defType == null) {
        name = null;
      } else if (nameRaw[0] === ' ') {
        name = null;
        defType = null;
      } else {
        name = nameRaw.trim() || null;
      }
      rest1 = rest.substring((defType ? matched : leading).length);
      endPat = rest1.match(/\n+[^\s]|\n?$/);
      next = endPat ? rest1.substring(endPat.index) : rest1;
      mainEnd = txt.length - next.length;
      t = leading;
      leadOff = tOff = restOff;
      while (m2 = t.match(testPat)) {
        r = makeRange(el, tOff + m2.index, tOff + m2.index + m2[1].length);
        r.leisureTest = {
          expr: JSON.parse(m2[2]),
          expected: JSON.parse(m2[3])
        };
        tests.push(r);
        tOff += m2.index + m2[1].length;
        t = leading.substring(tOff - leadOff);
      }
      if (name) {
        mainStart = matchStart + ((_ref5 = leading != null ? leading.length : void 0) != null ? _ref5 : 0);
        nameEnd = mainStart + name.length;
        leadingSpaces = (rest1.match(/^\s*/))[0].length;
        bodyStart = txt.length - (rest1.length - leadingSpaces);
        outerRange = makeRange(el, mainStart, mainEnd);
        return {
          main: outerRange,
          name: txt.substring(mainStart, nameEnd),
          def: defType,
          body: txt.substring(bodyStart, mainEnd),
          tests: tests,
          next: next
        };
      } else {
        mainStart = defType === '=' ? restOff + m.index + m[0].length : matchStart + ((_ref6 = leading != null ? leading.length : void 0) != null ? _ref6 : 0);
        ex = txt.substring(mainStart, mainEnd).match(/^(.*[^ \n])[ \n]*$/);
        exEnd = ex ? mainStart + ex[1].length : mainEnd;
        body = txt.substring(mainStart, exEnd);
        if (body.trim()) {
          textStart = restOff + m.index + (t ? leading.length - t.length : 0);
          if ((t != null) && (lm = t.match(/^[ \n]+/))) {
            textStart += lm[0].length;
          }
          if (m = t.match(/(?:^|\n)#@auto( +[^\n]*)?(\n|$)/)) {
            outerRange = makeRange(el, textStart, exEnd);
            outerRange.leisureAuto = JSON.parse("{" + ((_ref7 = m[1]) != null ? _ref7 : '') + "}");
            if (outerRange.leisureAuto.mode === 'notebook') {
              outerRange.leisureNode = el;
              outerRange.leisureStart = textStart;
            }
            return {
              main: outerRange,
              name: null,
              def: null,
              body: txt.substring(textStart, exEnd),
              tests: tests,
              fullText: txt.substring(textStart, exEnd),
              next: next
            };
          } else {
            outerRange = makeRange(el, textStart, exEnd);
            return {
              main: outerRange,
              name: null,
              def: null,
              body: txt.substring(textStart, exEnd),
              tests: tests,
              next: next
            };
          }
        } else {
          return {
            main: null,
            name: null,
            def: null,
            body: null,
            tests: tests,
            next: next
          };
        }
      }
    }
  };

  makeRange = function(el, off1, off2) {
    var node, offset, range, _ref4, _ref5;
    range = document.createRange();
    _ref4 = grp(el, off1, false), node = _ref4[0], offset = _ref4[1];
    if ((offset != null) && offset > 0) {
      range.setStart(node, offset);
    } else {
      range.setStartBefore(node);
    }
    if (off2 != null) {
      _ref5 = grp(el, off2, true), node = _ref5[0], offset = _ref5[1];
      if (offset != null) {
        range.setEnd(node, offset);
      } else {
        range.setEndAfter(node);
      }
    }
    return range;
  };

  grp = function(node, charOffset, end) {
    var child, offset, ret, _ref4;
    _ref4 = ret = getRangePosition(node.firstChild, charOffset, end), child = _ref4[0], offset = _ref4[1];
    if (child) {
      return ret;
    } else if (node.lastChild) {
      return nodeEnd(node.lastChild);
    } else {
      return [node, end ? 1 : 0];
    }
  };

  getRangePosition = function(node, charOffset, end) {
    var newNode, newOff, ret, _ref4;
    if (!node) {
      return [null, charOffset];
    } else if (node.nodeType === 3) {
      if (node.length > (end ? charOffset - 1 : charOffset)) {
        return [node, charOffset];
      } else {
        ret = continueRangePosition(node, charOffset - node.length, end);
        return ret;
      }
    } else if (node.nodeName === 'BR') {
      if (charOffset === (end ? 1 : 0)) {
        return [node];
      } else {
        return continueRangePosition(node, charOffset, end);
      }
    } else if (node.firstChild != null) {
      _ref4 = getRangePosition(node.firstChild, charOffset, end), newNode = _ref4[0], newOff = _ref4[1];
      if (newNode != null) {
        return [newNode, newOff];
      } else {
        return continueRangePosition(node, newOff, end);
      }
    } else {
      return continueRangePosition(node, charOffset, end);
    }
  };

  continueRangePosition = function(node, charOffset, end) {
    var newOff;
    newOff = charOffset - ((addsLine(node)) || ((node.nextSibling != null) && (addsLine(node.nextSibling))) ? 1 : 0);
    if (end && (newOff === 1 || charOffset === 1)) {
      return nodeEnd(node);
    } else if (node.nextSibling != null) {
      return getRangePosition(node.nextSibling, newOff, end);
    } else {
      return continueRangePosition(node.parentNode, newOff, end);
    }
  };

  nodeEnd = function(node) {
    return [node, node.nodeType === 3 ? node.length : node.childNodes.length - 1];
  };

  addsLine = function(node) {
    return (node != null ? node.nodeType : void 0) === 1 && (node.nodeName === 'BR' || (getComputedStyle(node, null).display === 'block' && node.childNodes.length > 0));
  };

  req = function(file, cont) {
    var name, s;
    if (!(file.match(/\.js$/))) {
      file = "" + file + ".js";
    }
    name = file.substring(0, file.length - 3);
    s = document.createElement('script');
    s.setAttribute('src', file);
    s.addEventListener('load', function() {
      Leisure.processDefs(global[name], global);
      if (cont) {
        return cont(rz(L_false));
      }
    });
    return document.head.appendChild(s);
  };

  postLoadQueue = [];

  loaded = false;

  queueAfterLoad = function(func) {
    if (loaded) {
      return func();
    } else {
      return postLoadQueue.push(func);
    }
  };

  /*
  # handle focus manually, because grabbing focus and blur events doesn't seem to work for the parent
  */


  docFocus = null;

  codeFocus = null;

  findCurrentCodeHolder = function() {
    var _ref4;
    return focusBox((_ref4 = window.getSelection()) != null ? _ref4.focusNode : void 0);
  };

  focusBox = function(box) {
    var newCode, old, _ref4;
    newCode = null;
    while (box && (box.nodeType !== 1 || !isLeisureCode(box))) {
      if (box.nodeType === 1 && ((box.getAttribute('LeisureBox')) != null)) {
        newCode = box;
      }
      box = box.parentNode;
    }
    if (box !== docFocus) {
      if (docFocus != null) {
        docFocus.classList.remove('focused');
      }
      docFocus = box;
      if (box != null) {
        if ((_ref4 = box.classList) != null) {
          _ref4.add('focused');
        }
      }
    }
    if (newCode !== codeFocus) {
      old = codeFocus;
      codeFocus = newCode;
      if (old) {
        return acceptCode(old);
      }
    }
  };

  owner = function(box) {
    while (box && (box.nodeType !== 1 || !isLeisureCode(box))) {
      box = box.parentNode;
    }
    return box;
  };

  hiddenPat = /(^|\n)#@hidden *(\n|$)/;

  evalBox = function(box, envBox, cont) {
    var env;
    env = envBox != null ? envFor(envBox) : null;
    processLine(box.textContent, env, function(result) {
      if (env != null) {
        if (typeof env.cleanup === "function") {
          env.cleanup();
        }
      }
      return (cont != null ? cont : function(x) {
        return x;
      })(result);
    });
    getAst(box);
    if (box.output && hasMonadOutput(box.output) && box.textContent.match(hiddenPat)) {
      return hideOutputSource(box.output);
    } else if (box.textContent.match(hiddenPat)) {
      return console.log("NO MONAD, BUT MATCHES HIDDEN");
    }
  };

  acceptCode = function(box) {
    if ((box.getAttribute('codemain')) != null) {
      evalBox(box);
      update('compile');
      if (owner(box).autorunState) {
        return runTests(owner(box));
      }
    }
  };

  errString = function(err) {
    return err.stack;
  };

  evaluating = false;

  evaluationQueue = [];

  evalNodes = function(nodes) {
    if (evaluating) {
      return evaluationQueue.push(nodes);
    } else {
      return chainEvalNodes(nodes);
    }
  };

  chainEvalNodes = function(nodes) {
    evaluating = true;
    return runAuto(nodes, 0, function() {
      if (evaluationQueue.length) {
        return chainEvalNodes(evaluationQueue.shift());
      } else {
        return evaluating = false;
      }
    });
  };

  evalDoc = function(el) {
    var auto, autoNodes, e, err, pgm, x, _ref4;
    _ref4 = initNotebook(el), pgm = _ref4[0], auto = _ref4[1], x = _ref4[2], autoNodes = _ref4[3];
    try {
      if (auto || autoNodes) {
        auto = "do\n  " + ((auto != null ? auto : '#').trim().replace(/\n/g, '\n  ')) + "\n  delay\n  finishLoading";
        global.noredefs = false;
        Notebook.queueAfterLoad(function() {
          evalDocCode(el, pgm);
          if (el.autorunState) {
            runTests(el);
          }
          return evalNodes(autoNodes);
        });
        e = envFor(el);
        e.write = function() {};
        e.err = function(err) {
          return alert('bubba ' + errString(err));
        };
        return processLine(auto, e, identity);
      } else {
        return evalDocCode(el, pgm);
      }
    } catch (_error) {
      err = _error;
      return showError(err, "Error compiling " + pgm);
    }
  };

  runAuto = function(nodes, index, cont) {
    var node;
    if (index < nodes.length) {
      console.log("RUNNING AUTO: " + index);
      node = nodes[index];
      console.log("evalOutput", node, node.output);
      return evalOutput(node.output, false, function() {
        return runAuto(nodes, index + 1, cont);
      });
    } else {
      return (cont != null ? cont : function() {})();
    }
  };

  processLine = function(text, env, cont) {
    var err;
    if (text) {
      try {
        return runMonad(rz(L_newParseLine)(lz(Nil))(lz(text)), env, function(ast) {
          var err, result;
          try {
            if (getType(ast) === 'parseErr') {
              env.write(env.presentValue(ast));
              if (typeof env.processResult === "function") {
                env.processResult(ast);
              }
              return cont(ast);
            } else {
              result = eval("(" + (gen(ast)) + ")");
              env.write(env.presentValue(result));
              if (isMonad(result)) {
                return runMonad(result, env, function(result) {
                  env.processResult(result);
                  return cont(result);
                });
              } else {
                if (typeof env.processResult === "function") {
                  env.processResult(result);
                }
                return cont(result);
              }
            }
          } catch (_error) {
            err = _error;
            console.log("ERROR: " + err.stack);
            env.write(env.presentValue(err.stack));
            if (typeof env.processResult === "function") {
              env.processResult(err.stack);
            }
            return cont(err.stack);
          }
        });
      } catch (_error) {
        err = _error;
        console.log("ERROR: " + err.stack);
        env.write(env.presentValue(err.stack));
        if (typeof env.processResult === "function") {
          env.processResult(err.stack);
        }
        return cont(err.stack);
      }
    } else {
      return cont('');
    }
  };

  showError = function(e, msg) {
    console.log(msg);
    console.log(e);
    console.log(e.stack);
    return alert(e.stack);
  };

  evalDocCode = function(el, pgm) {
    return runMonad(rz(L_runFile)(lz(pgm)), defaultEnv, function(result) {
      var node, _i, _len, _ref4, _results;
      _ref4 = el.querySelectorAll('[codeMain]');
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        node = _ref4[_i];
        _results.push(getAst(node));
      }
      return _results;
    });
  };

  define('getDocument', lz(makeSyncMonad(function(env, cont) {
    return cont(peerGetDocument());
  })));

  define('getLink', function() {
    return 0;
  });

  define('replaceDocument', lz(function(str) {
    return makeSyncMonad(function(env, cont) {
      replaceContents(rz(str));
      return cont(rz(L_true));
    });
  }));

  define('gdriveOpen', lz(makeMonad(function(env, cont) {
    return GdriveStorage.runOpen(function(json) {
      var _ref4;
      if ((json != null ? json.action : void 0) === 'picked' && ((_ref4 = json.docs) != null ? _ref4.length : void 0) > 0) {
        return GdriveStorage.loadFile(json.docs[0].id, function() {
          return cont(rz(_some)(lz(json.docs[0].title)));
        });
      } else {
        return cont(rz(_none));
      }
    });
  })));

  define('getFilename', lz(makeSyncMonad(function(env, cont) {
    var _ref4;
    return cont((_ref4 = filename != null ? filename.pathName() : void 0) != null ? _ref4 : '');
  })));

  define('setURI', lz(function(uri) {
    return makeSyncMonad(function(env, cont) {
      setFilename(rz(uri));
      return cont(rz(L_true));
    });
  }));

  define('getURI', lz(makeSyncMonad(function(env, cont) {
    var _ref4;
    return cont((_ref4 = filename != null ? filename.toString() : void 0) != null ? _ref4 : '');
  })));

  define('finishLoading', lz(makeMonad(function(env, cont) {
    var i, _i, _len;
    loaded = true;
    for (_i = 0, _len = postLoadQueue.length; _i < _len; _i++) {
      i = postLoadQueue[_i];
      rz(i);
    }
    postLoadQueue = [];
    return cont(rz(L_false));
  })));

  define('markupButtons', lz(makeSyncMonad(function(env, cont) {
    if (env.box) {
      markupButtons(env.box);
    }
    return cont(rz(L_false));
  })));

  define('alert', lz(function(str) {
    return makeSyncMonad(function(env, cont) {
      window.alert(rz(str));
      return cont(rz(L_false));
    });
  }));

  define('bindEvent', lz(function(selector) {
    return function(eventName) {
      return function(func) {
        return makeSyncMonad(function(env, cont) {
          var node;
          node = env.box.querySelector(rz(selector));
          if (!node) {
            node = document.body.querySelector(rz(selector));
          }
          console.log("ADDING EVENT: " + (rz(selector)) + " " + (rz(eventName)) + " NODE: " + node);
          if (node) {
            node.addEventListener(eventName(), function(e) {
              console.log("EVENT: " + (rz(selector)) + " " + (rz(eventName)) + " " + (rz(func)));
              return runMonad(rz(func)(lz(e)), envFor(e.target), function() {});
            });
          }
          return cont(rz(L_false));
        });
      };
    };
  }));

  define('quit', lz(function() {
    return window.close();
  }));

  define('config', lz(function(expr) {
    return makeSyncMonad(function(env, cont) {
      switch (rz(expr)) {
        case 'autoTest':
          autoRun(env.owner, true);
      }
      return cont(rz(L_false));
    });
  }));

  define('notebookSelection', lz(function(func) {
    return makeSyncMonad(function(env, cont) {
      var bx, offset, p1, p2, r, r2, sel;
      sel = window.getSelection();
      bx = getBox(sel.focusNode);
      if ((bx != null) && hasFunc(bx, func)) {
        offset = 0;
        r = sel.getRangeAt(0);
        window.r = r;
        r2 = document.createRange();
        r2.setStart(bx, 0);
        r2.setEnd(r.startContainer, r.startOffset);
        p1 = r2.cloneContents().textContent.length - offset;
        if (!r.collapsed) {
          r2.setEnd(r.endContainer, r.endOffset);
        }
        p2 = r2.cloneContents().textContent.length - offset;
        return cont(rz(_some2)(lz(p1))(lz(p2)));
      } else {
        return cont(rz(_none));
      }
    });
  }));

  hasFunc = function(bx, func) {
    var ast;
    ast = getAst(bx);
    return ast === func().ast || ast === func.ast;
  };

  define('notebookAst', lz(function(func) {
    return makeSyncMonad(function(env, cont) {
      var ast, node;
      if (func.leisureName != null) {
        node = document.querySelector("[LeisureFunc=" + func.leisureName + "]");
        if (node != null) {
          ast = getAst(node);
          return cont(rz(_some)(lz(ast)));
        }
      }
      return cont(rz(_none));
    });
  }));

  autoRun = function(el, state) {
    var _ref4;
    el.autorunState = state;
    return (_ref4 = el.autorun) != null ? _ref4.checked = state : void 0;
  };

  head = function(l) {
    return l(lz(function(hh) {
      return function(tt) {
        return rz(hh);
      };
    }));
  };

  tail = function(l) {
    return l(lz(function(hh) {
      return function(tt) {
        return rz(tt);
      };
    }));
  };

  id = function(v) {
    return rz(v);
  };

  primconcatNodes = function(nodes) {
    if (nodes === rz(_nil)) {
      return "";
    } else {
      return (head(nodes))(id) + concatNodes(tail(nodes));
    }
  };

  previousSibling = function(node) {
    while ((node != null ? node.parentNode : void 0) && !node.previousSibling) {
      node = node.parentNode;
    }
    return node != null ? node.previousSibling : void 0;
  };

  nextSibling = function(node) {
    while ((node != null ? node.parentNode : void 0) && !node.nextSibling) {
      node = node.parentNode;
    }
    return node != null ? node.nextSibling : void 0;
  };

  hideControlSection = function() {
    var controlSection;
    controlSection = document.body.querySelector('[leisureSection="Leisure Controls"]');
    if (!controlSection) {
      controlSection = document.createElement('DIV');
      document.body.insertBefore(controlSection, document.body.firstChild);
      root.markupElement(controlSection, "# Leisure Controls\n\n## File Save and Load\n```\nsaveFile\n\nsaveAs 'filename'\n\nsaveAs pickFile\n\nloadFile\n\nemptyFile\n```");
      unwrap(controlSection);
    }
    controlSection.classList.add(leisure_controls);
    return controlSection.classList.add(hidden);
  };

  define('printValue', lz(function(value) {
    return makeMonad(function(env, cont) {
      if (rz(value) !== rz(L_nil)) {
        env.write("" + (env.presentValue(rz(value))) + "\n");
      }
      return cont(L_false());
    });
  }));

  defaultEnv.require = req;

  root.initNotebook = initNotebook;

  root.bindNotebook = bindNotebook;

  root.bindAll = bindAll;

  root.evalOutput = evalOutput;

  root.makeTestCase = makeTestCase;

  root.cleanOutput = cleanOutput;

  root.clearOutputBox = clearOutputBox;

  root.envFor = envFor;

  root.queueAfterLoad = queueAfterLoad;

  root.evalDoc = evalDoc;

  root.getBox = getBox;

  root.makeRange = makeRange;

  root.grp = grp;

  root.changeTheme = changeTheme;

  root.setSnapper = setSnapper;

  root.update = update;

  root.clearUpdates = clearUpdates;

  root.showAst = showAst;

  root.toggleEdit = toggleEdit;

  root.showSource = showSource;

  root.bootNotebook = bootNotebook;

  root.ENTER = ENTER;

  root.textNode = textNode;

  root.cleanEmptyNodes = cleanEmptyNodes;

  root.isLeisureCode = isLeisureCode;

  root.getElementCode = getElementCode;

  root.runTests = runTests;

  root.previousSibling = previousSibling;

  root.nextSibling = nextSibling;

  root.presentLeisureCode = presentLeisureCode;

  root.mergeLeisureCode = mergeLeisureCode;

  root.highlightNotebookFunction = highlightNotebookFunction;

  root.ESC = ESC;

  root.ENTER = ENTER;

  root.HOME = HOME;

  root.END = END;

  root.PAGE_UP = PAGE_UP;

  root.PAGE_DOWN = PAGE_DOWN;

  root.LEFT_ARROW = LEFT_ARROW;

  root.UP_ARROW = UP_ARROW;

  root.RIGHT_ARROW = RIGHT_ARROW;

  root.DOWN_ARROW = DOWN_ARROW;

  root.arrows = arrows;

  root.closeWindow = closeWindow;

  root.markupButton = markupButton;

  root.markupButtons = markupButtons;

  root.getAst = getAst;

  root.insertControls = insertControls;

  root.delay = delay;

  root.setFilename = setFilename;

  root.unwrap = unwrap;

  root.remove = remove;

  root.wrapRange = wrapRange;

  root.replaceContents = replaceContents;

  root.event = event;

}).call(this);

/*
//@ sourceMappingURL=notebook.map
*/

// Generated by CoffeeScript 1.6.2
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var Monad, Nil, ast2Json, booleanFor, codeMonad, cons, consFrom, define, getDataType, getType, getValue, head, identity, makeMonad, nextMonad, root, runMonad, setValue, strCoord, strFromList, strToList, tail, values, _, _false, _ref, _true;

  root = module.exports = require('./base');

  _ref = require('./ast'), define = _ref.define, consFrom = _ref.consFrom, cons = _ref.cons, Nil = _ref.Nil, head = _ref.head, tail = _ref.tail, getType = _ref.getType, getDataType = _ref.getDataType, ast2Json = _ref.ast2Json;

  _ = require('./lodash.min');

  identity = function(x) {
    return x;
  };

  _true = function(a) {
    return function(b) {
      return a();
    };
  };

  _false = function(a) {
    return function(b) {
      return b();
    };
  };

  booleanFor = function(bool) {
    if (bool) {
      return _true;
    } else {
      return _false;
    }
  };

  define('eq', function() {
    return function(a) {
      return function(b) {
        return booleanFor(a() === b());
      };
    };
  });

  define('hasType', function() {
    return function(data) {
      return function(func) {
        return booleanFor(getType(data()) === getDataType(func()));
      };
    };
  });

  define('+', function() {
    return function(x) {
      return function(y) {
        return x() + y();
      };
    };
  });

  define('-', function() {
    return function(x) {
      return function(y) {
        return x() - y();
      };
    };
  });

  define('*', function() {
    return function(x) {
      return function(y) {
        return x() * y();
      };
    };
  });

  define('/', function() {
    return function(x) {
      return function(y) {
        return x() / y();
      };
    };
  });

  define('lt', function() {
    return function(x) {
      return function(y) {
        return booleanFor(x() < y());
      };
    };
  });

  define('le', function() {
    return function(x) {
      return function(y) {
        return booleanFor(x() <= y());
      };
    };
  });

  define('gt', function() {
    return function(x) {
      return function(y) {
        return booleanFor(x() > y());
      };
    };
  });

  define('ge', function() {
    return function(x) {
      return function(y) {
        return booleanFor(x() >= y());
      };
    };
  });

  define('strString', function() {
    return function(data) {
      return String(data());
    };
  });

  define('strAt', function() {
    return function(str) {
      return function(index) {
        return str()[strCoord(str(), index())];
      };
    };
  });

  define('strStartsWith', function() {
    return function(str) {
      return function(prefix) {
        return booleanFor(str().substring(0, prefix().length) === prefix());
      };
    };
  });

  define('strLen', function() {
    return function(str) {
      return str().length;
    };
  });

  define('strReplace', function() {
    return function(str) {
      return function(pat) {
        return function(repl) {
          return str().replace(pat(), repl());
        };
      };
    };
  });

  strCoord = function(str, coord) {
    if (coord < 0) {
      return str.length + coord;
    } else {
      return coord;
    }
  };

  define('strSubstring', function() {
    return function(str) {
      return function(start) {
        return function(end) {
          var a, b;

          a = strCoord(str(), start());
          b = strCoord(str(), end());
          if (b < a && end() === 0) {
            b = str().length;
          }
          return str().substring(a, b);
        };
      };
    };
  });

  define('strSplit', function() {
    return function(str) {
      return function(pat) {
        return consFrom(str().split(pat() instanceof RegExp ? pat() : new RegExp(pat())));
      };
    };
  });

  define('strCat', function() {
    return function(list) {
      return list().toArray().join('');
    };
  });

  define('strAdd', function() {
    return function(s1) {
      return function(s2) {
        return s1() + s2();
      };
    };
  });

  define('strMatch', function() {
    return function(str) {
      return function(pat) {
        var groups, m, pos;

        m = str().match((pat() instanceof RegExp ? pat() : new RegExp(pat())));
        if (m) {
          groups = [];
          pos = 1;
          while (m[pos]) {
            groups.push(m[pos++]);
          }
          return consFrom([m[0], groups, m.index, m.input]);
        } else {
          return Nil;
        }
      };
    };
  });

  define('strToList', function() {
    return function(str) {
      return strToList(str());
    };
  });

  strToList = function(str) {
    if (str === '') {
      return Nil;
    } else {
      return cons(str[0], strToList(str.substring(1)));
    }
  };

  define('strFromList', function() {
    return function(list) {
      return strFromList(list());
    };
  });

  strFromList = function(list) {
    if (list instanceof Leisure_nil) {
      return '';
    } else {
      return head(list) + strFromList(tail(list));
    }
  };

  define('regexp', function() {
    return function(str) {
      return new RegExp(str());
    };
  });

  define('regexpFlags', function() {
    return function(str) {
      return function(flags) {
        return new RegExp(str(), flags());
      };
    };
  });

  define('jsonParse', function() {
    return function(str) {
      return function(failCont) {
        return function(successCont) {
          var err, p;

          try {
            p = JSON.parse(str());
            return successCont()(function() {
              return p;
            });
          } catch (_error) {
            err = _error;
            return failCont()(function() {
              return err;
            });
          }
        };
      };
    };
  });

  define('jsonStringify', function() {
    return function(obj) {
      return function(failCont) {
        return function(successCont) {
          var err, s;

          try {
            s = JSON.stringify(obj());
            return successCont()(function() {
              return s;
            });
          } catch (_error) {
            err = _error;
            return failCont()(function() {
              return err;
            });
          }
        };
      };
    };
  });

  define('log', function() {
    return function(str) {
      return function(res) {
        global.LOG = String(str());
        console.log(String(str()));
        return res();
      };
    };
  });

  makeMonad = function(guts) {
    var m;

    m = function() {};
    m.__proto__ = Monad.prototype;
    m.cmd = guts;
    m.type = 'monad';
    return m;
  };

  nextMonad = function(cont) {
    return cont;
  };

  runMonad = function(monad, env, cont) {
    var err;

    try {
      if (monad.cmd != null) {
        return monad.cmd(env != null ? env : root.defaultEnv, nextMonad(cont != null ? cont : function(x) {
          return x;
        }));
      } else {
        return cont(monad);
      }
    } catch (_error) {
      err = _error;
      return console.log("ERROR RUNNING MONAD: " + err.stack);
    }
  };

  Monad = (function() {
    function Monad() {}

    Monad.prototype.andThen = function(func) {
      var _this = this;

      return makeMonad(function(env, cont) {
        return runMonad(_this, env, function(value) {
          return runMonad(codeMonad(func), env, cont);
        });
      });
    };

    Monad.prototype.toString = function() {
      return "Monad: " + (this.cmd.toString());
    };

    return Monad;

  })();

  codeMonad = function(code) {
    return makeMonad(function(env, cont) {
      var result;

      result = code(env);
      if (result instanceof Monad) {
        return runMonad(result, env, cont);
      } else {
        return cont(_false);
      }
    });
  };

  define('define', function() {
    return function(name) {
      return function(arity) {
        return function(src) {
          return function(def) {
            return makeMonad(function(enf, cont) {
              define(name(), def, arity(), src());
              return cont(_false);
            });
          };
        };
      };
    };
  });

  define('print', function() {
    return function(msg) {
      return makeMonad(function(env, cont) {
        var m;

        m = msg();
        env.write("" + (typeof m === 'string' ? m : Parse.print(m)) + "\n");
        return cont(_false);
      });
    };
  });

  define('bind', function() {
    return function(m) {
      return function(binding) {
        return makeMonad(function(env, cont) {
          return runMonad(m(), env, function(value) {
            return runMonad(binding()(function() {
              return value;
            }), env, cont);
          });
        });
      };
    };
  });

  values = {};

  define('hasValue', function() {
    return function(name) {
      return makeMonad(function(env, cont) {
        return cont((values[name()] != null ? _true : _false));
      });
    };
  });

  define('getValueOr', function() {
    return function(name) {
      return function(defaultValue) {
        return makeMonad(function(env, cont) {
          var _ref1;

          return cont((_ref1 = values[name()]) != null ? _ref1 : defaultValue());
        });
      };
    };
  });

  define('getValue', function() {
    return function(name) {
      return makeMonad(function(env, cont) {
        return cont(values[name()]);
      });
    };
  });

  setValue = function(key, value) {
    return values[key] = value;
  };

  getValue = function(key) {
    return values[key];
  };

  define('setValue', function() {
    return function(name) {
      return function(value) {
        return makeMonad(function(env, cont) {
          values[name()] = value();
          return cont(_false);
        });
      };
    };
  });

  define('createS', function() {
    return makeMonad(function(env, cont) {
      return cont({
        value: null
      });
    });
  });

  define('getS', function() {
    return function(state) {
      return makeMonad(function(env, cont) {
        return cont(state().value);
      });
    };
  });

  define('setS', function() {
    return function(state) {
      return function(value) {
        return makeMonad(function(env, cont) {
          state().value = value();
          return cont(_false);
        });
      };
    };
  });

  setValue('macros', Nil);

  define('defMacro', function() {
    return function(name) {
      return function(def) {
        return makeMonad(function(env, cont) {
          values.macros = cons(cons(name(), def()), values.macros);
          return cont(_false);
        });
      };
    };
  });

  define('funcs', function() {
    return makeMonad(function(env, cont) {
      console.log("Leisure functions:\n" + (_(global.leisureFuncNames.toArray()).sort().join('\n')));
      return cont(_false);
    });
  });

  define('ast2Json', function() {
    return function(ast) {
      return JSON.stringify(ast2Json(ast()));
    };
  });

  root.stateValues = values;

  root.runMonad = runMonad;

  root.identity = identity;

  root.defaultEnv = {
    write: function(str) {
      return process.stdout.write(str);
    }
  };

  root.setValue = setValue;

  root.getValue = getValue;

  root.makeMonad = makeMonad;

}).call(this);

/*
//@ sourceMappingURL=runtime.map
*/

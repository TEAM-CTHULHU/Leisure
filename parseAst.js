var parseAst = (function(){
var root;

if ((typeof window !== 'undefined' && window !== null) && (!(typeof global !== 'undefined' && global !== null) || global === window)) {
  parseAst = root = {};
  global = window;
} else {
  root = typeof exports !== 'undefined' && exports !== null ? exports : this;
  Leisure = require('./leisure');
  Leisure.req('./std');
  require('./prim');
  ReplCore = require('./replCore');
  Repl = require('./repl');
}
root.defs = {};
root.tokenDefs = [];
root.macros = {};

var setType = Leisure.setType;
var setDataType = Leisure.setDataType;
var define = Leisure.define;
var defineMacro = Leisure.defineMacro;
var defineToken = Leisure.defineToken;
var processResult = Repl.processResult;

var _make$_subtree, _subtree$_svg, _subtree$_width, _subtree$_height, _subtree$_root$_x, _subtree$_root$_y, _subtree$_set$_svg, _subtree$_set$_width, _subtree$_set$_height, _subtree$_set$_root$_x, _subtree$_set$_root$_y, _make$_box, _box$_svg, _box$_width, _box$_height, _treeFor, _subtreeFor, _redStyle, _greenStyle, _blueStyle, _createLambdaSubtree, _createApplySubtree, _createRefSubtree, _createLitSubtree, _textBox, _typeof;
//make-subtree = AST(\svg width height root-x root-y f . f svg width height root-x root-y)
root.defs._make$_subtree = _make$_subtree = define('make-subtree', setDataType(function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return setType(function(_f){return _f()(_svg)(_width)(_height)(_root$_x)(_root$_y)}, 'make-subtree')}}}}}, 'make-subtree'), 5, "\\svg. \\width. \\height. \\root-x. \\root-y. \\f . f svg width height root-x root-y");
;
//subtree-svg = AST(\st . st \svg width height root-x root-y . svg)
root.defs._subtree$_svg = _subtree$_svg = define('subtree-svg', function(_st){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _svg()}}}}}))}})())}, 1, "\\st. st \\svg width height root-x root-y . svg");
;
//subtree-width = AST(\st . st \svg width height root-x root-y . width)
root.defs._subtree$_width = _subtree$_width = define('subtree-width', function(_st){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _width()}}}}}))}})())}, 1, "\\st. st \\svg width height root-x root-y . width");
;
//subtree-height = AST(\st . st \svg width height root-x root-y . height)
root.defs._subtree$_height = _subtree$_height = define('subtree-height', function(_st){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _height()}}}}}))}})())}, 1, "\\st. st \\svg width height root-x root-y . height");
;
//subtree-root-x = AST(\st . st \svg width height root-x root-y . root-x)
root.defs._subtree$_root$_x = _subtree$_root$_x = define('subtree-root-x', function(_st){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _root$_x()}}}}}))}})())}, 1, "\\st. st \\svg width height root-x root-y . root-x");
;
//subtree-root-y = AST(\st . st \svg width height root-x root-y . root-y)
root.defs._subtree$_root$_y = _subtree$_root$_y = define('subtree-root-y', function(_st){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _root$_y()}}}}}))}})())}, 1, "\\st. st \\svg width height root-x root-y . root-y");
;
//subtree-set-svg = AST(\st value . st \svg width height root-x root-y . make-subtree value width height root-x root-y)
root.defs._subtree$_set$_svg = _subtree$_set$_svg = define('subtree-set-svg', function(_st){return function(_value){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _make$_subtree()(_value)(_width)(_height)(_root$_x)(_root$_y)}}}}}))}})())}}, 2, "\\st. \\value. st \\svg width height root-x root-y . make-subtree value width height root-x root-y");
;
//subtree-set-width = AST(\st value . st \svg width height root-x root-y . make-subtree svg value height root-x root-y)
root.defs._subtree$_set$_width = _subtree$_set$_width = define('subtree-set-width', function(_st){return function(_value){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _make$_subtree()(_svg)(_value)(_height)(_root$_x)(_root$_y)}}}}}))}})())}}, 2, "\\st. \\value. st \\svg width height root-x root-y . make-subtree svg value height root-x root-y");
;
//subtree-set-height = AST(\st value . st \svg width height root-x root-y . make-subtree svg width value root-x root-y)
root.defs._subtree$_set$_height = _subtree$_set$_height = define('subtree-set-height', function(_st){return function(_value){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _make$_subtree()(_svg)(_width)(_value)(_root$_x)(_root$_y)}}}}}))}})())}}, 2, "\\st. \\value. st \\svg width height root-x root-y . make-subtree svg width value root-x root-y");
;
//subtree-set-root-x = AST(\st value . st \svg width height root-x root-y . make-subtree svg width height value root-y)
root.defs._subtree$_set$_root$_x = _subtree$_set$_root$_x = define('subtree-set-root-x', function(_st){return function(_value){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _make$_subtree()(_svg)(_width)(_height)(_value)(_root$_y)}}}}}))}})())}}, 2, "\\st. \\value. st \\svg width height root-x root-y . make-subtree svg width height value root-y");
;
//subtree-set-root-y = AST(\st value . st \svg width height root-x root-y . make-subtree svg width height root-x value)
root.defs._subtree$_set$_root$_y = _subtree$_set$_root$_y = define('subtree-set-root-y', function(_st){return function(_value){return _st()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_root$_x){return function(_root$_y){return _make$_subtree()(_svg)(_width)(_height)(_root$_x)(_value)}}}}}))}})())}}, 2, "\\st. \\value. st \\svg width height root-x root-y . make-subtree svg width height root-x value");
;
//make-box = AST(\svg width height f . f svg width height)
root.defs._make$_box = _make$_box = define('make-box', setDataType(function(_svg){return function(_width){return function(_height){return setType(function(_f){return _f()(_svg)(_width)(_height)}, 'make-box')}}}, 'make-box'), 3, "\\svg. \\width. \\height. \\f . f svg width height");
;
//box-svg = AST(\b . b \svg width height . svg)
root.defs._box$_svg = _box$_svg = define('box-svg', function(_b){return _b()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return _svg()}}}))}})())}, 1, "\\b. b \\svg width height . svg");
;
//box-width = AST(\b . b \svg width height . width)
root.defs._box$_width = _box$_width = define('box-width', function(_b){return _b()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return _width()}}}))}})())}, 1, "\\b. b \\svg width height . width");
;
//box-height = AST(\b . b \svg width height . height)
root.defs._box$_height = _box$_height = define('box-height', function(_b){return _b()((function(){var $m; return function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return _height()}}}))}})())}, 1, "\\b. b \\svg width height . height");
;
//treeFor = AST(\ast . svg (subtree-svg (subtreeFor ast)) ([ ([ width | 200 ]) , ([ height | 200 ]) ]))
root.defs._treeFor = _treeFor = define('treeFor', function(_ast){return _svg()((function(){var $m; return function(){return $m || ($m = (_subtree$_svg()((function(){var $m; return function(){return $m || ($m = (_subtreeFor()(_ast)))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_$r()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "width"}))(_$q)((function(){return 200}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "height"}))(_$q)((function(){return 200}))(_$s)))}})())(_$s)))}})())}, 1, "\\ast. svg (subtree-svg (subtreeFor ast)) [['width'|200],['height'|200]]");
;
//subtreeFor = AST(\ast . (\t . eq t lit (createLitSubtree (pretty (ast id))) (eq t ref (createRefSubtree (pretty (ast id))) (eq t lambda (ast \v b . createLambdaSubtree v b) (eq t apply (ast \f a . createApplySubtree f a) (make-subtree  0 0 0 0))))) (typeof ast))
root.defs._subtreeFor = _subtreeFor = define('subtreeFor', function(_ast){return function(_t){return _eq()(_t)((function(){return "lit"}))((function(){var $m; return function(){return $m || ($m = (_createLitSubtree()((function(){var $m; return function(){return $m || ($m = (_pretty()((function(){var $m; return function(){return $m || ($m = (_ast()(_id)))}})())))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_eq()(_t)((function(){return "ref"}))((function(){var $m; return function(){return $m || ($m = (_createRefSubtree()((function(){var $m; return function(){return $m || ($m = (_pretty()((function(){var $m; return function(){return $m || ($m = (_ast()(_id)))}})())))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_eq()(_t)((function(){return "lambda"}))((function(){var $m; return function(){return $m || ($m = (_ast()((function(){var $m; return function(){return $m || ($m = (function(_v){return function(_b){return _createLambdaSubtree()(_v)(_b)}}))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_eq()(_t)((function(){return "apply"}))((function(){var $m; return function(){return $m || ($m = (_ast()((function(){var $m; return function(){return $m || ($m = (function(_f){return function(_a){return _createApplySubtree()(_f)(_a)}}))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_make$_subtree()((function(){return ""}))((function(){return 0}))((function(){return 0}))((function(){return 0}))((function(){return 0}))))}})())))}})())))}})())))}})())}((function(){var $m; return function(){return $m || ($m = (_typeof()(_ast)))}})())}, 1, "\\ast. do\n  t = typeof ast\n  eq t 'lit'\n    createLitSubtree (pretty (ast id))\n    eq t 'ref'\n      createRefSubtree (pretty (ast id))\n      eq t 'lambda'\n        ast (\\v b . createLambdaSubtree v b)\n        eq t 'apply'\n          ast (\\f a . createApplySubtree f a)\n          make-subtree '' 0 0 0 0");
;
//redStyle = AST([ ([ stroke | black ]) , ([ stroke-width | 2 ]) , ([ fill | red ]) , ([ rx | 8 ]) , ([ ry | 8 ]) ])
root.defs._redStyle = _redStyle = define('redStyle', _$r()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "stroke"}))(_$q)((function(){return "black"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "stroke-width"}))(_$q)((function(){return 2}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "fill"}))(_$q)((function(){return "red"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "rx"}))(_$q)((function(){return 8}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "ry"}))(_$q)((function(){return 8}))(_$s)))}})())(_$s), 0, "[['stroke'|'black'],['stroke-width'|2],['fill'|'red'],['rx'|8],['ry'|8] ]");
;
//greenStyle = AST([ ([ stroke | black ]) , ([ stroke-width | 2 ]) , ([ fill | green ]) , ([ rx | 8 ]) , ([ ry | 8 ]) ])
root.defs._greenStyle = _greenStyle = define('greenStyle', _$r()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "stroke"}))(_$q)((function(){return "black"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "stroke-width"}))(_$q)((function(){return 2}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "fill"}))(_$q)((function(){return "green"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "rx"}))(_$q)((function(){return 8}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "ry"}))(_$q)((function(){return 8}))(_$s)))}})())(_$s), 0, "[['stroke'|'black'],['stroke-width'|2],['fill'|'green'],['rx'|8],['ry'|8] ]");
;
//blueStyle = AST([ ([ stroke | black ]) , ([ stroke-width | 2 ]) , ([ fill | blue ]) , ([ rx | 8 ]) , ([ ry | 8 ]) ])
root.defs._blueStyle = _blueStyle = define('blueStyle', _$r()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "stroke"}))(_$q)((function(){return "black"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "stroke-width"}))(_$q)((function(){return 2}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "fill"}))(_$q)((function(){return "blue"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "rx"}))(_$q)((function(){return 8}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "ry"}))(_$q)((function(){return 8}))(_$s)))}})())(_$s), 0, "[['stroke'|'black'],['stroke-width'|2],['fill'|'blue'],['rx'|8],['ry'|8] ]");
;
//createLambdaSubtree = AST(\v b . (\rootBox . (\rootSvg . (\varBox . (\varSvg . (\bodyTree . (\bodySvg . (\childWidth . (\totalWidth . (\pad . make-subtree (svg-concat ([ (translate varSvg pad (+ (box-height rootBox) 5)) , (translate bodySvg (+ pad (+ (box-width varBox) 5)) (+ (box-height rootBox) 5)) , (translate rootSvg (- (/ totalWidth 2) (/ (box-width rootBox) 2)) 0) ])) totalWidth (+ (+ (box-height rootBox) 5) (max (box-height varBox) (subtree-height bodyTree))) (/ totalWidth 2) (/ (box-height rootBox) 2)) (max 0 (/ (- totalWidth childWidth) 2))) (max childWidth (box-width rootBox))) (+ (+ (box-width varBox) 5) (subtree-width bodyTree))) (subtree-svg bodyTree)) (subtreeFor b)) (box-svg varBox)) (textBox greenStyle v)) (box-svg rootBox)) (textBox greenStyle lambda))
root.defs._createLambdaSubtree = _createLambdaSubtree = define('createLambdaSubtree', function(_v){return function(_b){return function(_rootBox){return function(_rootSvg){return function(_varBox){return function(_varSvg){return function(_bodyTree){return function(_bodySvg){return function(_childWidth){return function(_totalWidth){return function(_pad){return _make$_subtree()((function(){var $m; return function(){return $m || ($m = (_svg$_concat()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){var $m; return function(){return $m || ($m = (_translate()(_varSvg)(_pad)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 5}))))}})())))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_translate()(_bodySvg)((function(){var $m; return function(){return $m || ($m = (_$o()(_pad)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_width()(_varBox)))}})())((function(){return 5}))))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 5}))))}})())))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_translate()(_rootSvg)((function(){var $m; return function(){return $m || ($m = (_$_()((function(){var $m; return function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))}})())((function(){var $m; return function(){return $m || ($m = (_$f()((function(){var $m; return function(){return $m || ($m = (_box$_width()(_rootBox)))}})())((function(){return 2}))))}})())))}})())((function(){return 0}))))}})())(_$s)))}})())))}})())(_totalWidth)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 5}))))}})())((function(){var $m; return function(){return $m || ($m = (_max()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_varBox)))}})())((function(){var $m; return function(){return $m || ($m = (_subtree$_height()(_bodyTree)))}})())))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))}})())((function(){var $m; return function(){return $m || ($m = (_$f()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 2}))))}})())}((function(){var $m; return function(){return $m || ($m = (_max()((function(){return 0}))((function(){var $m; return function(){return $m || ($m = (_$f()((function(){var $m; return function(){return $m || ($m = (_$_()(_totalWidth)(_childWidth)))}})())((function(){return 2}))))}})())))}})())}((function(){var $m; return function(){return $m || ($m = (_max()(_childWidth)((function(){var $m; return function(){return $m || ($m = (_box$_width()(_rootBox)))}})())))}})())}((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_width()(_varBox)))}})())((function(){return 5}))))}})())((function(){var $m; return function(){return $m || ($m = (_subtree$_width()(_bodyTree)))}})())))}})())}((function(){var $m; return function(){return $m || ($m = (_subtree$_svg()(_bodyTree)))}})())}((function(){var $m; return function(){return $m || ($m = (_subtreeFor()(_b)))}})())}((function(){var $m; return function(){return $m || ($m = (_box$_svg()(_varBox)))}})())}((function(){var $m; return function(){return $m || ($m = (_textBox()(_greenStyle)(_v)))}})())}((function(){var $m; return function(){return $m || ($m = (_box$_svg()(_rootBox)))}})())}((function(){var $m; return function(){return $m || ($m = (_textBox()(_greenStyle)((function(){return "lambda"}))))}})())}}, 2, "\\v. \\b. do\n  rootBox = textBox greenStyle 'lambda'\n  rootSvg = box-svg rootBox\n  varBox = textBox greenStyle v\n  varSvg = box-svg varBox\n  bodyTree = subtreeFor b\n  bodySvg = subtree-svg bodyTree\n  childWidth = + (+ (box-width varBox) 5) (subtree-width bodyTree)\n  totalWidth = max childWidth (box-width rootBox)\n  pad = max 0 (/ (- totalWidth childWidth) 2)\n  make-subtree\n    svg-concat [(translate varSvg pad (+ (box-height rootBox) 5)),(translate bodySvg (+ pad (+ (box-width varBox) 5)) (+ (box-height rootBox) 5)),(translate rootSvg (- (/ totalWidth 2) (/ (box-width rootBox) 2)) 0)]\n    totalWidth\n    + (+ (box-height rootBox) 5) (max (box-height varBox) (subtree-height bodyTree))\n    / totalWidth 2\n    / (box-height rootBox) 2");
;
//createApplySubtree = AST(\f a . (\rootBox . (\rootSvg . (\argBox . (\argSvg . (\funcTree . (\funcSvg . (\childWidth . (\totalWidth . (\pad . make-subtree (svg-concat ([ (translate argSvg pad (+ (box-height rootBox) 5)) , (translate funcSvg (+ pad (+ (box-width argBox) 5)) (+ (box-height rootBox) 5)) , (translate rootSvg (- (/ totalWidth 2) (/ (box-width rootBox) 2)) 0) ])) totalWidth (+ (+ (box-height rootBox) 5) (max (box-height argBox) (subtree-height funcTree))) (/ totalWidth 2) (/ (box-height rootBox) 2)) (max 0 (/ (- totalWidth childWidth) 2))) (max childWidth (box-width rootBox))) (+ (+ (box-width argBox) 5) (subtree-width funcTree))) (subtree-svg funcTree)) (subtreeFor f)) (box-svg argBox)) (textBox blueStyle f)) (box-svg rootBox)) (textBox blueStyle apply))
root.defs._createApplySubtree = _createApplySubtree = define('createApplySubtree', function(_f){return function(_a){return function(_rootBox){return function(_rootSvg){return function(_argBox){return function(_argSvg){return function(_funcTree){return function(_funcSvg){return function(_childWidth){return function(_totalWidth){return function(_pad){return _make$_subtree()((function(){var $m; return function(){return $m || ($m = (_svg$_concat()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){var $m; return function(){return $m || ($m = (_translate()(_argSvg)(_pad)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 5}))))}})())))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_translate()(_funcSvg)((function(){var $m; return function(){return $m || ($m = (_$o()(_pad)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_width()(_argBox)))}})())((function(){return 5}))))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 5}))))}})())))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_translate()(_rootSvg)((function(){var $m; return function(){return $m || ($m = (_$_()((function(){var $m; return function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))}})())((function(){var $m; return function(){return $m || ($m = (_$f()((function(){var $m; return function(){return $m || ($m = (_box$_width()(_rootBox)))}})())((function(){return 2}))))}})())))}})())((function(){return 0}))))}})())(_$s)))}})())))}})())(_totalWidth)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 5}))))}})())((function(){var $m; return function(){return $m || ($m = (_max()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_argBox)))}})())((function(){var $m; return function(){return $m || ($m = (_subtree$_height()(_funcTree)))}})())))}})())))}})())((function(){var $m; return function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))}})())((function(){var $m; return function(){return $m || ($m = (_$f()((function(){var $m; return function(){return $m || ($m = (_box$_height()(_rootBox)))}})())((function(){return 2}))))}})())}((function(){var $m; return function(){return $m || ($m = (_max()((function(){return 0}))((function(){var $m; return function(){return $m || ($m = (_$f()((function(){var $m; return function(){return $m || ($m = (_$_()(_totalWidth)(_childWidth)))}})())((function(){return 2}))))}})())))}})())}((function(){var $m; return function(){return $m || ($m = (_max()(_childWidth)((function(){var $m; return function(){return $m || ($m = (_box$_width()(_rootBox)))}})())))}})())}((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_$o()((function(){var $m; return function(){return $m || ($m = (_box$_width()(_argBox)))}})())((function(){return 5}))))}})())((function(){var $m; return function(){return $m || ($m = (_subtree$_width()(_funcTree)))}})())))}})())}((function(){var $m; return function(){return $m || ($m = (_subtree$_svg()(_funcTree)))}})())}((function(){var $m; return function(){return $m || ($m = (_subtreeFor()(_f)))}})())}((function(){var $m; return function(){return $m || ($m = (_box$_svg()(_argBox)))}})())}((function(){var $m; return function(){return $m || ($m = (_textBox()(_blueStyle)(_f)))}})())}((function(){var $m; return function(){return $m || ($m = (_box$_svg()(_rootBox)))}})())}((function(){var $m; return function(){return $m || ($m = (_textBox()(_blueStyle)((function(){return "apply"}))))}})())}}, 2, "\\f. \\a. do\n  rootBox = textBox blueStyle 'apply'\n  rootSvg = box-svg rootBox\n  argBox = textBox blueStyle f\n  argSvg = box-svg argBox\n  funcTree = subtreeFor f\n  funcSvg = subtree-svg funcTree\n  childWidth = + (+ (box-width argBox) 5) (subtree-width funcTree)\n  totalWidth = max childWidth (box-width rootBox)\n  pad = max 0 (/ (- totalWidth childWidth) 2)\n  make-subtree\n    svg-concat [(translate argSvg pad (+ (box-height rootBox) 5)),(translate funcSvg (+ pad (+ (box-width argBox) 5)) (+ (box-height rootBox) 5)),(translate rootSvg (- (/ totalWidth 2) (/ (box-width rootBox) 2)) 0)]\n    totalWidth\n    + (+ (box-height rootBox) 5) (max (box-height argBox) (subtree-height funcTree))\n    / totalWidth 2\n    / (box-height rootBox) 2");
;
//createRefSubtree = AST(\ref . textBox redStyle ref \b w h . make-subtree b w h (/ w 2) (/ h 2))
root.defs._createRefSubtree = _createRefSubtree = define('createRefSubtree', function(_ref){return _textBox()(_redStyle)(_ref)((function(){var $m; return function(){return $m || ($m = (function(_b){return function(_w){return function(_h){return _make$_subtree()(_b)(_w)(_h)((function(){var $m; return function(){return $m || ($m = (_$f()(_w)((function(){return 2}))))}})())((function(){var $m; return function(){return $m || ($m = (_$f()(_h)((function(){return 2}))))}})())}}}))}})())}, 1, "\\ref. (textBox redStyle ref) \\b w h .  make-subtree b w h (/ w 2) (/ h 2)");
;
//createLitSubtree = AST(\lit . textBox greenStyle lit \b w h . make-subtree b w h (/ w 2) (/ h 2))
root.defs._createLitSubtree = _createLitSubtree = define('createLitSubtree', function(_lit){return _textBox()(_greenStyle)(_lit)((function(){var $m; return function(){return $m || ($m = (function(_b){return function(_w){return function(_h){return _make$_subtree()(_b)(_w)(_h)((function(){var $m; return function(){return $m || ($m = (_$f()(_w)((function(){return 2}))))}})())((function(){var $m; return function(){return $m || ($m = (_$f()(_h)((function(){return 2}))))}})())}}}))}})())}, 1, "\\lit. (textBox greenStyle lit) \\b w h .  make-subtree b w h (/ w 2) (/ h 2)");
;
//textBox = AST(\map txt . svg-measure-text txt  \w h . (\box-w . (\box-h . make-box (svg-concat ([ (rect ([ ([ x | 2 ]) , ([ y | 2 ]) , ([ width | box-w ]) , ([ height | box-h ]) | map ])) , (text txt ([ ([ text-anchor | middle ]) , ([ dominant-baseline | mathematical ]) , ([ x | (+ 14 (/ w 2)) ]) , ([ y | (+ 5 (/ h 2)) ]) ])) ])) box-w box-h) (+ h 14)) (+ w 24))
root.defs._textBox = _textBox = define('textBox', function(_map){return function(_txt){return _svg$_measure$_text()(_txt)((function(){return ""}))((function(){var $m; return function(){return $m || ($m = (function(_w){return function(_h){return function(_box$_w){return function(_box$_h){return _make$_box()((function(){var $m; return function(){return $m || ($m = (_svg$_concat()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){var $m; return function(){return $m || ($m = (_rect()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "x"}))(_$q)((function(){return 2}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "y"}))(_$q)((function(){return 2}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "width"}))(_$q)(_box$_w)(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "height"}))(_$q)(_box$_h)(_$s)))}})())(_$q)(_map)(_$s)))}})())))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_text()(_txt)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "text-anchor"}))(_$q)((function(){return "middle"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "dominant-baseline"}))(_$q)((function(){return "mathematical"}))(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "x"}))(_$q)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){return 14}))((function(){var $m; return function(){return $m || ($m = (_$f()(_w)((function(){return 2}))))}})())))}})())(_$s)))}})())(_$b)((function(){var $m; return function(){return $m || ($m = (_$r()((function(){return "y"}))(_$q)((function(){var $m; return function(){return $m || ($m = (_$o()((function(){return 5}))((function(){var $m; return function(){return $m || ($m = (_$f()(_h)((function(){return 2}))))}})())))}})())(_$s)))}})())(_$s)))}})())))}})())(_$s)))}})())))}})())(_box$_w)(_box$_h)}((function(){var $m; return function(){return $m || ($m = (_$o()(_h)((function(){return 14}))))}})())}((function(){var $m; return function(){return $m || ($m = (_$o()(_w)((function(){return 24}))))}})())}}))}})())}}, 2, "\\map. \\txt. (svg-measure-text txt '') \\w h . do\n  box-w = + w 24\n  box-h = + h 14\n  make-box (svg-concat [(rect [['x'|2],['y'|2],['width'|box-w],['height'|box-h] | map]), (text txt [['text-anchor'|\"middle\"],['dominant-baseline'|\"mathematical\"],['x'|(+ 14 (/ w 2))],['y'|(+ 5 (/ h 2))]])]) box-w box-h");
;
//typeof = AST(\x . getType x id false)
root.defs._typeof = _typeof = define('typeof', function(_x){return _getType()(_x)(_id)(_false)}, 1, "\\x. getType x id false");
;

if (typeof window !== 'undefined' && window !== null) {
  Leisure.processTokenDefs(root.tokenDefs);
}
return root;
}).call(this)
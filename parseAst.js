var parseAst = (function(){
var root;

if ((typeof window !== 'undefined' && window !== null) && (!(typeof global !== 'undefined' && global !== null) || global === window)) {
  parseAst = root = {};
  global = window;
} else {
  root = typeof exports !== 'undefined' && exports !== null ? exports : this;
  Parse = require('./parse');
  Leisure = require('./leisure');
  Leisure.req('./std');
  require('./prim');
  ReplCore = require('./replCore');
  Repl = require('./repl');
}
root.defs = {};
root.tokenDefs = [];
root.macros = {};

Nil = Parse.Nil;
var cons = Parse.cons;
var setType = Parse.setType;
var setDataType = Parse.setDataType;
var define = Parse.define;
var processResult = Repl.processResult;
var setContext = Leisure.setContext;
var funcContext = Leisure.funcContext;
var define = Parse.define;
var _makeNode, _nodeSvg, _nodeWidth, _nodeHeight, _nodeRootX, _nodeRootY, _node$_translate, _nodeLine, _astFor, _treeForNotebook, _rangeContainsRange, _shouldHighlight, _highlight, _treeForFunc, _treeFor, _treeForWith, _nodeFor, _redStyle, _greenStyle, _blueStyle, _createLambdaNode, _createApplyNode, _createRefNode, _createLitNode, _textNode, _typeof;
processResult(//AST("forward" "notebookSelection")
(_forward()((function(){return "notebookSelection"}))));
//makeNode = AST(λsvg width height rootX rootY f . "f" "svg" "width" "height" "rootX" "rootY")
root.defs._makeNode = _makeNode = Parse.define('makeNode', (function() {var f = (Parse.setDataType(function(_svg){return function(_width){return function(_height){return function(_rootX){return function(_rootY){return Parse.setType(function(_f){return _f()(_svg)(_width)(_height)(_rootX)(_rootY);}, 'makeNode');};};};};}, 'makeNode')); return function _makeNode(){return f;}})(), 5, "\\svg. \\width. \\height. \\rootX. \\rootY. \\f . f svg width height rootX rootY");
;
//nodeSvg = AST(λst . "st" λsvg width height rootX rootY . "svg")
root.defs._nodeSvg = _nodeSvg = Parse.define('nodeSvg', (function() {var f = (function(_st){return _st()((function(){var $m; return (function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_rootX){return function(_rootY){return _svg();};};};};}))})})());}); return function _nodeSvg(){return f;}})(), 1, "\\st. st \\svg width height rootX rootY . svg");
;
//nodeWidth = AST(λst . "st" λsvg width height rootX rootY . "width")
root.defs._nodeWidth = _nodeWidth = Parse.define('nodeWidth', (function() {var f = (function(_st){return _st()((function(){var $m; return (function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_rootX){return function(_rootY){return _width();};};};};}))})})());}); return function _nodeWidth(){return f;}})(), 1, "\\st. st \\svg width height rootX rootY . width");
;
//nodeHeight = AST(λst . "st" λsvg width height rootX rootY . "height")
root.defs._nodeHeight = _nodeHeight = Parse.define('nodeHeight', (function() {var f = (function(_st){return _st()((function(){var $m; return (function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_rootX){return function(_rootY){return _height();};};};};}))})})());}); return function _nodeHeight(){return f;}})(), 1, "\\st. st \\svg width height rootX rootY . height");
;
//nodeRootX = AST(λst . "st" λsvg width height rootX rootY . "rootX")
root.defs._nodeRootX = _nodeRootX = Parse.define('nodeRootX', (function() {var f = (function(_st){return _st()((function(){var $m; return (function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_rootX){return function(_rootY){return _rootX();};};};};}))})})());}); return function _nodeRootX(){return f;}})(), 1, "\\st. st \\svg width height rootX rootY . rootX");
;
//nodeRootY = AST(λst . "st" λsvg width height rootX rootY . "rootY")
root.defs._nodeRootY = _nodeRootY = Parse.define('nodeRootY', (function() {var f = (function(_st){return _st()((function(){var $m; return (function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_rootX){return function(_rootY){return _rootY();};};};};}))})})());}); return function _nodeRootY(){return f;}})(), 1, "\\st. st \\svg width height rootX rootY . rootY");
;
//node-translate = AST(λst x y . "st" λsvg width height rootX rootY . "makeNode" ("translate" "svg" "x" "y") "width" "height" ("+" "rootX" "x") ("+" "rootY" "y"))
root.defs._node$_translate = _node$_translate = Parse.define('node-translate', (function() {var f = (function(_st){return function(_x){return function(_y){return _st()((function(){var $m; return (function(){return $m || ($m = (function(_svg){return function(_width){return function(_height){return function(_rootX){return function(_rootY){return _makeNode()((function(){var $m; return (function(){return $m || ($m = (_translate()(_svg)(_x)(_y)))})})())(_width)(_height)((function(){var $m; return (function(){return $m || ($m = (_$o()(_rootX)(_x)))})})())((function(){var $m; return (function(){return $m || ($m = (_$o()(_rootY)(_y)))})})());};};};};}))})})());};};}); return function _node$_translate(){return f;}})(), 3, "\\st. \\x. \\y. st \\svg width height rootX rootY . makeNode\n  translate svg x y\n  width\n  height\n  + rootX x\n  + rootY y");
;
//nodeLine = AST(λn1 n2 . "n1" λs1 w1 h1 x1 y1 . "n2" λs2 w2 h2 x2 y2 . "line" ("[" ("[" "x1" "|" "x1" "]") ("[" "y1" "|" "y1" "]") ("[" "x2" "|" "x2" "]") ("[" "y2" "|" "y2" "]") "|" "defaultLineMap" "]"))
root.defs._nodeLine = _nodeLine = Parse.define('nodeLine', (function() {var f = (function(_n1){return function(_n2){return _n1()((function(){var $m; return (function(){return $m || ($m = (function(_s1){return function(_w1){return function(_h1){return function(_x1){return function(_y1){return _n2()((function(){var $m; return (function(){return $m || ($m = (function(_s2){return function(_w2){return function(_h2){return function(_x2){return function(_y2){return _line()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "x1"}))(_$q)(_x1)(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "y1"}))(_$q)(_y1)(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "x2"}))(_$q)(_x2)(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "y2"}))(_$q)(_y2)(_$s)))})})())(_$q)(_defaultLineMap)(_$s)))})})());};};};};}))})})());};};};};}))})})());};}); return function _nodeLine(){return f;}})(), 2, "\\n1. \\n2. n1 \\s1 w1 h1 x1 y1 . n2 \\s2 w2 h2 x2 y2 .\n  line [['x1'|x1] ['y1'|y1] ['x2'|x2] ['y2'|y2] | defaultLineMap]");
;
//astFor = AST(λfunc . "isFunc" "func" ("funcSource" "func" λsrc . "parse" "src" ("right" "no source")) ("left" ("lit" "func")))
root.defs._astFor = _astFor = Parse.define('astFor', (function() {var f = (function(_func){return _isFunc()(_func)((function(){var $m; return (function(){return $m || ($m = (_funcSource()(_func)((function(){var $m; return (function(){return $m || ($m = (function(_src){return _parse()(_src);}))})})())((function(){var $m; return (function(){return $m || ($m = (_right()((function(){return "no source"}))))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_left()((function(){var $m; return (function(){return $m || ($m = (_lit()(_func)))})})())))})})());}); return function _astFor(){return f;}})(), 1, "\\func. isFunc func\n  funcSource func (\\src . parse src) (right 'no source')\n  left (lit func)");
;
//treeForNotebook = AST(λfunc . "bind" ("notebookSelection" "func") λs . "printValue" ("astFor" "func" λast . "treeForWith" "ast" λast map . "s" λstart end . "shouldHighlight" "ast" "start" "end" ("highlight" "map") "map" "map" λignore . "concat" ("[" "no source for " "func" "]")))
root.defs._treeForNotebook = _treeForNotebook = Parse.define('treeForNotebook', (function() {var f = (function(_func){return _bind()((function(){var $m; return (function(){return $m || ($m = (_notebookSelection()(_func)))})})())((function(){var $m; return (function(){return $m || ($m = (function(_s){return _printValue()((function(){var $m; return (function(){return $m || ($m = (_astFor()(_func)((function(){var $m; return (function(){return $m || ($m = (function(_ast){return _treeForWith()(_ast)((function(){var $m; return (function(){return $m || ($m = (function(_ast){return function(_map){return _s()((function(){var $m; return (function(){return $m || ($m = (function(_start){return function(_end){return _shouldHighlight()(_ast)(_start)(_end)((function(){var $m; return (function(){return $m || ($m = (_highlight()(_map)))})})())(_map);};}))})})())(_map);};}))})})());}))})})())((function(){var $m; return (function(){return $m || ($m = (function(_ignore){return _concat()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "no source for "}))(_func)(_$s)))})})());}))})})())))})})());}))})})());}); return function _treeForNotebook(){return f;}})(), 1, "\\func. do\n  s <- notebookSelection func\n  printValue\n    astFor func\n      \\ast . treeForWith ast \\ast map . s (\\start end . (shouldHighlight ast start end) (highlight map) map) map\n      \\ignore . concat ['no source for ' func]");
;
//rangeContainsRange = AST(λstart end innerStart innerEnd . "and" ("lte" "start" "innerStart") ("lte" "innerEnd" "end"))
root.defs._rangeContainsRange = _rangeContainsRange = Parse.define('rangeContainsRange', (function() {var f = (function(_start){return function(_end){return function(_innerStart){return function(_innerEnd){return _and()((function(){var $m; return (function(){return $m || ($m = (_lte()(_start)(_innerStart)))})})())((function(){var $m; return (function(){return $m || ($m = (_lte()(_innerEnd)(_end)))})})());};};};}); return function _rangeContainsRange(){return f;}})(), 4, "\\start. \\end. \\innerStart. \\innerEnd. and (lte start innerStart) (lte innerEnd end)");
;
//shouldHighlight = AST(λast start end . (λastStart . (λastEnd . "or" ("rangeContainsRange" "start" "end" "astStart" "astEnd") ("or" ("and" ("or" ("eq" "lit" ("getType" "ast" "id" "id")) ("eq" "ref" ("getType" "ast" "id" "id"))) ("rangeContainsRange" "astStart" "astEnd" "start" "end")) ("and" ("eq" "lambda" ("getType" "ast" "id" "id")) ("rangeContainsRange" "astStart" ("+" "astStart" ("strlen" ("ast" λv b . "v"))) "start" "end")))) ("ast-end" "ast")) ("ast-start" "ast"))
root.defs._shouldHighlight = _shouldHighlight = Parse.define('shouldHighlight', (function() {var f = (function(_ast){return function(_start){return function(_end){return function(_astStart){return function(_astEnd){return _or()((function(){var $m; return (function(){return $m || ($m = (_rangeContainsRange()(_start)(_end)(_astStart)(_astEnd)))})})())((function(){var $m; return (function(){return $m || ($m = (_or()((function(){var $m; return (function(){return $m || ($m = (_and()((function(){var $m; return (function(){return $m || ($m = (_or()((function(){var $m; return (function(){return $m || ($m = (_eq()((function(){return "lit"}))((function(){var $m; return (function(){return $m || ($m = (_getType()(_ast)(_id)(_id)))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_eq()((function(){return "ref"}))((function(){var $m; return (function(){return $m || ($m = (_getType()(_ast)(_id)(_id)))})})())))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_rangeContainsRange()(_astStart)(_astEnd)(_start)(_end)))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_and()((function(){var $m; return (function(){return $m || ($m = (_eq()((function(){return "lambda"}))((function(){var $m; return (function(){return $m || ($m = (_getType()(_ast)(_id)(_id)))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_rangeContainsRange()(_astStart)((function(){var $m; return (function(){return $m || ($m = (_$o()(_astStart)((function(){var $m; return (function(){return $m || ($m = (_strlen()((function(){var $m; return (function(){return $m || ($m = (_ast()((function(){var $m; return (function(){return $m || ($m = (function(_v){return function(_b){return _v();};}))})})())))})})())))})})())))})})())(_start)(_end)))})})())))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_ast$_end()(_ast)))})})());}((function(){var $m; return (function(){return $m || ($m = (_ast$_start()(_ast)))})})());};};}); return function _shouldHighlight(){return f;}})(), 3, "\\ast. \\start. \\end. do\n  astStart = ast-start ast\n  astEnd = ast-end ast\n  or\n    rangeContainsRange start end astStart astEnd\n    or\n      and\n        or (eq 'lit' (getType ast id id)) (eq 'ref' (getType ast id id))\n        rangeContainsRange astStart astEnd start end\n      and\n        eq 'lambda' (getType ast id id)\n        rangeContainsRange astStart (+ astStart (strlen (ast \\v b . v))) start end");
;
//highlight = AST(λmap . (λc . "eq" "c" "#fcc" ("addHash" "fill" "red" "map") ("eq" "c" "#cfc" ("addHash" "fill" "green" "map") ("eq" "c" "#ccf" ("addHash" "fill" "blue" "map") "map"))) ("getHashValue" "fill" "map"))
root.defs._highlight = _highlight = Parse.define('highlight', (function() {var f = (function(_map){return function(_c){return _eq()(_c)((function(){return "#fcc"}))((function(){var $m; return (function(){return $m || ($m = (_addHash()((function(){return "fill"}))((function(){return "red"}))(_map)))})})())((function(){var $m; return (function(){return $m || ($m = (_eq()(_c)((function(){return "#cfc"}))((function(){var $m; return (function(){return $m || ($m = (_addHash()((function(){return "fill"}))((function(){return "green"}))(_map)))})})())((function(){var $m; return (function(){return $m || ($m = (_eq()(_c)((function(){return "#ccf"}))((function(){var $m; return (function(){return $m || ($m = (_addHash()((function(){return "fill"}))((function(){return "blue"}))(_map)))})})())(_map)))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_getHashValue()((function(){return "fill"}))(_map)))})})());}); return function _highlight(){return f;}})(), 1, "\\map. do\n  c = getHashValue 'fill' map\n  eq c '#fcc'\n    addHash 'fill' 'red' map\n    eq c '#cfc'\n      addHash 'fill' 'green' map\n      eq c '#ccf'\n        addHash 'fill' 'blue' map\n        map");
;
//treeForFunc = AST(λfunc . "treeFor" ("parse" ("funcSource" "func" "id" "false") "id" "false"))
root.defs._treeForFunc = _treeForFunc = Parse.define('treeForFunc', (function() {var f = (function(_func){return _treeFor()((function(){var $m; return (function(){return $m || ($m = (_parse()((function(){var $m; return (function(){return $m || ($m = (_funcSource()(_func)(_id)(_false)))})})())(_id)(_false)))})})());}); return function _treeForFunc(){return f;}})(), 1, "\\func. treeFor (parse (funcSource func id false) id false)");
;
//treeFor = AST(λast . "treeForWith" "ast" λast map . "map")
root.defs._treeFor = _treeFor = Parse.define('treeFor', (function() {var f = (function(_ast){return _treeForWith()(_ast)((function(){var $m; return (function(){return $m || ($m = (function(_ast){return function(_map){return _map();};}))})})());}); return function _treeFor(){return f;}})(), 1, "\\ast. treeForWith ast \\ast map . map");
;
//treeForWith = AST(λast mapFunc . "nodeSvg" ("nodeFor" "ast" "mapFunc"))
root.defs._treeForWith = _treeForWith = Parse.define('treeForWith', (function() {var f = (function(_ast){return function(_mapFunc){return _nodeSvg()((function(){var $m; return (function(){return $m || ($m = (_nodeFor()(_ast)(_mapFunc)))})})());};}); return function _treeForWith(){return f;}})(), 2, "\\ast. \\mapFunc. nodeSvg (nodeFor ast mapFunc)");
;
//nodeFor = AST(λast mapFunc . (λt . "eq" "t" "lit" ("createLitNode" "ast" ("pretty" ("ast" "id")) "mapFunc") ("eq" "t" "ref" ("createRefNode" "ast" ("pretty" ("ast" "id")) "mapFunc") ("eq" "t" "lambda" ("ast" λv b . "createLambdaNode" "ast" "v" "b" "mapFunc") ("eq" "t" "apply" ("ast" λf a . "createApplyNode" "ast" "f" "a" "mapFunc") ("makeNode" ("svgNode" "") 0 0 0 0))))) ("typeof" "ast"))
root.defs._nodeFor = _nodeFor = Parse.define('nodeFor', (function() {var f = (function(_ast){return function(_mapFunc){return function(_t){return _eq()(_t)((function(){return "lit"}))((function(){var $m; return (function(){return $m || ($m = (_createLitNode()(_ast)((function(){var $m; return (function(){return $m || ($m = (_pretty()((function(){var $m; return (function(){return $m || ($m = (_ast()(_id)))})})())))})})())(_mapFunc)))})})())((function(){var $m; return (function(){return $m || ($m = (_eq()(_t)((function(){return "ref"}))((function(){var $m; return (function(){return $m || ($m = (_createRefNode()(_ast)((function(){var $m; return (function(){return $m || ($m = (_pretty()((function(){var $m; return (function(){return $m || ($m = (_ast()(_id)))})})())))})})())(_mapFunc)))})})())((function(){var $m; return (function(){return $m || ($m = (_eq()(_t)((function(){return "lambda"}))((function(){var $m; return (function(){return $m || ($m = (_ast()((function(){var $m; return (function(){return $m || ($m = (function(_v){return function(_b){return _createLambdaNode()(_ast)(_v)(_b)(_mapFunc);};}))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_eq()(_t)((function(){return "apply"}))((function(){var $m; return (function(){return $m || ($m = (_ast()((function(){var $m; return (function(){return $m || ($m = (function(_f){return function(_a){return _createApplyNode()(_ast)(_f)(_a)(_mapFunc);};}))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_makeNode()((function(){var $m; return (function(){return $m || ($m = (_svgNode()((function(){return ""}))))})})())((function(){return 0}))((function(){return 0}))((function(){return 0}))((function(){return 0}))))})})())))})})())))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_typeof()(_ast)))})})());};}); return function _nodeFor(){return f;}})(), 2, "\\ast. \\mapFunc. do\n  t = typeof ast\n  eq t 'lit'\n    createLitNode ast (pretty (ast id)) mapFunc\n    eq t 'ref'\n      createRefNode ast (pretty (ast id)) mapFunc\n      eq t 'lambda'\n        ast (\\v b . createLambdaNode ast v b mapFunc)\n        eq t 'apply'\n          ast (\\f a . createApplyNode ast f a mapFunc)\n          makeNode (svgNode '') 0 0 0 0");
;
//redStyle = AST("[" ("[" "stroke" "|" "black" "]") ("[" "stroke-width" "|" 2 "]") ("[" "fill" "|" "#fcc" "]") ("[" "rx" "|" 8 "]") ("[" "ry" "|" 8 "]") "]")
root.defs._redStyle = _redStyle = Parse.define('redStyle', (function _redStyle() {return ((_$r()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "stroke"}))(_$q)((function(){return "black"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "stroke-width"}))(_$q)((function(){return 2}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "fill"}))(_$q)((function(){return "#fcc"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "rx"}))(_$q)((function(){return 8}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "ry"}))(_$q)((function(){return 8}))(_$s)))})})())(_$s)));}), 0, "[['stroke'|'black'] ['stroke-width'|2] ['fill'|'#fcc'] ['rx'|8] ['ry'|8]]");
;
//greenStyle = AST("[" ("[" "stroke" "|" "black" "]") ("[" "stroke-width" "|" 2 "]") ("[" "fill" "|" "#cfc" "]") ("[" "rx" "|" 8 "]") ("[" "ry" "|" 8 "]") "]")
root.defs._greenStyle = _greenStyle = Parse.define('greenStyle', (function _greenStyle() {return ((_$r()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "stroke"}))(_$q)((function(){return "black"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "stroke-width"}))(_$q)((function(){return 2}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "fill"}))(_$q)((function(){return "#cfc"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "rx"}))(_$q)((function(){return 8}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "ry"}))(_$q)((function(){return 8}))(_$s)))})})())(_$s)));}), 0, "[['stroke'|'black'] ['stroke-width'|2] ['fill'|'#cfc'] ['rx'|8] ['ry'|8]]");
;
//blueStyle = AST("[" ("[" "stroke" "|" "black" "]") ("[" "stroke-width" "|" 2 "]") ("[" "fill" "|" "#ccf" "]") ("[" "rx" "|" 8 "]") ("[" "ry" "|" 8 "]") "]")
root.defs._blueStyle = _blueStyle = Parse.define('blueStyle', (function _blueStyle() {return ((_$r()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "stroke"}))(_$q)((function(){return "black"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "stroke-width"}))(_$q)((function(){return 2}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "fill"}))(_$q)((function(){return "#ccf"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "rx"}))(_$q)((function(){return 8}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "ry"}))(_$q)((function(){return 8}))(_$s)))})})())(_$s)));}), 0, "[['stroke'|'black'] ['stroke-width'|2] ['fill'|'#ccf'] ['rx'|8] ['ry'|8]]");
;
//createLambdaNode = AST(λast v b mapFunc . (λrootBox . (λvarBox . (λbodyTree . (λchildWidth . (λtotalWidth . (λpad . (λrootBox . (λvarBox . (λbodyTree . "makeNode" ("svgConcat" ("[" ("nodeLine" "rootBox" "varBox") ("nodeLine" "rootBox" "bodyTree") ("nodeSvg" "varBox") ("nodeSvg" "bodyTree") ("nodeSvg" "rootBox") "]")) "totalWidth" ("+" ("+" ("nodeHeight" "rootBox") 5) ("max" ("nodeHeight" "varBox") ("nodeHeight" "bodyTree"))) ("/" "totalWidth" 2) ("/" ("nodeHeight" "rootBox") 2)) ("node-translate" "bodyTree" ("+" "pad" ("+" ("nodeWidth" "varBox") 5)) ("+" ("nodeHeight" "rootBox") 5))) ("node-translate" "varBox" "pad" ("+" ("nodeHeight" "rootBox") 5))) ("node-translate" "rootBox" ("-" ("/" "totalWidth" 2) ("/" ("nodeWidth" "rootBox") 2)) 0)) ("max" 0 ("/" ("-" "totalWidth" "childWidth") 2))) ("max" "childWidth" ("nodeWidth" "rootBox"))) ("+" ("+" ("nodeWidth" "varBox") 5) ("nodeWidth" "bodyTree"))) ("nodeFor" "b" "mapFunc")) ("textNode" ("mapFunc" "ast" "greenStyle") "v")) ("textNode" ("mapFunc" "ast" "greenStyle") "lambda"))
root.defs._createLambdaNode = _createLambdaNode = Parse.define('createLambdaNode', (function() {var f = (function(_ast){return function(_v){return function(_b){return function(_mapFunc){return function(_rootBox){return function(_varBox){return function(_bodyTree){return function(_childWidth){return function(_totalWidth){return function(_pad){return function(_rootBox){return function(_varBox){return function(_bodyTree){return _makeNode()((function(){var $m; return (function(){return $m || ($m = (_svgConcat()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){var $m; return (function(){return $m || ($m = (_nodeLine()(_rootBox)(_varBox)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeLine()(_rootBox)(_bodyTree)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeSvg()(_varBox)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeSvg()(_bodyTree)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeSvg()(_rootBox)))})})())(_$s)))})})())))})})())(_totalWidth)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 5}))))})})())((function(){var $m; return (function(){return $m || ($m = (_max()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_varBox)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_bodyTree)))})})())))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))})})())((function(){var $m; return (function(){return $m || ($m = (_$f()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 2}))))})})());}((function(){var $m; return (function(){return $m || ($m = (_node$_translate()(_bodyTree)((function(){var $m; return (function(){return $m || ($m = (_$o()(_pad)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_varBox)))})})())((function(){return 5}))))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 5}))))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_node$_translate()(_varBox)(_pad)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 5}))))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_node$_translate()(_rootBox)((function(){var $m; return (function(){return $m || ($m = (_$_()((function(){var $m; return (function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))})})())((function(){var $m; return (function(){return $m || ($m = (_$f()((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_rootBox)))})})())((function(){return 2}))))})})())))})})())((function(){return 0}))))})})());}((function(){var $m; return (function(){return $m || ($m = (_max()((function(){return 0}))((function(){var $m; return (function(){return $m || ($m = (_$f()((function(){var $m; return (function(){return $m || ($m = (_$_()(_totalWidth)(_childWidth)))})})())((function(){return 2}))))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_max()(_childWidth)((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_rootBox)))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_varBox)))})})())((function(){return 5}))))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_bodyTree)))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_nodeFor()(_b)(_mapFunc)))})})());}((function(){var $m; return (function(){return $m || ($m = (_textNode()((function(){var $m; return (function(){return $m || ($m = (_mapFunc()(_ast)(_greenStyle)))})})())(_v)))})})());}((function(){var $m; return (function(){return $m || ($m = (_textNode()((function(){var $m; return (function(){return $m || ($m = (_mapFunc()(_ast)(_greenStyle)))})})())((function(){return "lambda"}))))})})());};};};}); return function _createLambdaNode(){return f;}})(), 4, "\\ast. \\v. \\b. \\mapFunc. do\n  rootBox = textNode (mapFunc ast greenStyle) 'lambda'\n  varBox = textNode (mapFunc ast greenStyle) v\n  bodyTree = nodeFor b mapFunc\n  childWidth = + (+ (nodeWidth varBox) 5) (nodeWidth bodyTree)\n  totalWidth = max childWidth (nodeWidth rootBox)\n  pad = max 0 (/ (- totalWidth childWidth) 2)\n  rootBox = node-translate rootBox (- (/ totalWidth 2) (/ (nodeWidth rootBox) 2)) 0\n  varBox = node-translate varBox pad (+ (nodeHeight rootBox) 5)\n  bodyTree = node-translate bodyTree (+ pad (+ (nodeWidth varBox) 5)) (+ (nodeHeight rootBox) 5)\n  makeNode\n    svgConcat [(nodeLine rootBox varBox) (nodeLine rootBox bodyTree) (nodeSvg varBox) (nodeSvg bodyTree) (nodeSvg rootBox)]\n    totalWidth\n    + (+ (nodeHeight rootBox) 5) (max (nodeHeight varBox) (nodeHeight bodyTree))\n    / totalWidth 2\n    / (nodeHeight rootBox) 2");
;
//createApplyNode = AST(λast f a mapFunc . (λrootBox . (λfuncTree . (λargTree . (λchildWidth . (λtotalWidth . (λpad . (λrootBox . (λfuncTree . (λargTree . "makeNode" ("svgConcat" ("[" ("nodeLine" "rootBox" "funcTree") ("nodeLine" "rootBox" "argTree") ("nodeSvg" "rootBox") ("nodeSvg" "funcTree") ("nodeSvg" "argTree") "]")) "totalWidth" ("+" ("+" ("nodeHeight" "rootBox") 5) ("max" ("nodeHeight" "argTree") ("nodeHeight" "funcTree"))) ("/" "totalWidth" 2) ("/" ("nodeHeight" "rootBox") 2)) ("node-translate" "argTree" ("+" "pad" ("+" ("nodeWidth" "funcTree") 5)) ("+" ("nodeHeight" "rootBox") 5))) ("node-translate" "funcTree" "pad" ("+" ("nodeHeight" "rootBox") 5))) ("node-translate" "rootBox" ("-" ("/" "totalWidth" 2) ("/" ("nodeWidth" "rootBox") 2)) 0)) ("max" 0 ("/" ("-" "totalWidth" "childWidth") 2))) ("max" "childWidth" ("nodeWidth" "rootBox"))) ("+" ("+" ("nodeWidth" "argTree") 5) ("nodeWidth" "funcTree"))) ("nodeFor" "a" "mapFunc")) ("nodeFor" "f" "mapFunc")) ("textNode" ("mapFunc" "ast" "blueStyle") "apply"))
root.defs._createApplyNode = _createApplyNode = Parse.define('createApplyNode', (function() {var f = (function(_ast){return function(_f){return function(_a){return function(_mapFunc){return function(_rootBox){return function(_funcTree){return function(_argTree){return function(_childWidth){return function(_totalWidth){return function(_pad){return function(_rootBox){return function(_funcTree){return function(_argTree){return _makeNode()((function(){var $m; return (function(){return $m || ($m = (_svgConcat()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){var $m; return (function(){return $m || ($m = (_nodeLine()(_rootBox)(_funcTree)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeLine()(_rootBox)(_argTree)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeSvg()(_rootBox)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeSvg()(_funcTree)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeSvg()(_argTree)))})})())(_$s)))})})())))})})())(_totalWidth)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 5}))))})})())((function(){var $m; return (function(){return $m || ($m = (_max()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_argTree)))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_funcTree)))})})())))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))})})())((function(){var $m; return (function(){return $m || ($m = (_$f()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 2}))))})})());}((function(){var $m; return (function(){return $m || ($m = (_node$_translate()(_argTree)((function(){var $m; return (function(){return $m || ($m = (_$o()(_pad)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_funcTree)))})})())((function(){return 5}))))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 5}))))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_node$_translate()(_funcTree)(_pad)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeHeight()(_rootBox)))})})())((function(){return 5}))))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_node$_translate()(_rootBox)((function(){var $m; return (function(){return $m || ($m = (_$_()((function(){var $m; return (function(){return $m || ($m = (_$f()(_totalWidth)((function(){return 2}))))})})())((function(){var $m; return (function(){return $m || ($m = (_$f()((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_rootBox)))})})())((function(){return 2}))))})})())))})})())((function(){return 0}))))})})());}((function(){var $m; return (function(){return $m || ($m = (_max()((function(){return 0}))((function(){var $m; return (function(){return $m || ($m = (_$f()((function(){var $m; return (function(){return $m || ($m = (_$_()(_totalWidth)(_childWidth)))})})())((function(){return 2}))))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_max()(_childWidth)((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_rootBox)))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_argTree)))})})())((function(){return 5}))))})})())((function(){var $m; return (function(){return $m || ($m = (_nodeWidth()(_funcTree)))})})())))})})());}((function(){var $m; return (function(){return $m || ($m = (_nodeFor()(_a)(_mapFunc)))})})());}((function(){var $m; return (function(){return $m || ($m = (_nodeFor()(_f)(_mapFunc)))})})());}((function(){var $m; return (function(){return $m || ($m = (_textNode()((function(){var $m; return (function(){return $m || ($m = (_mapFunc()(_ast)(_blueStyle)))})})())((function(){return "apply"}))))})})());};};};}); return function _createApplyNode(){return f;}})(), 4, "\\ast. \\f. \\a. \\mapFunc. do\n  rootBox = textNode (mapFunc ast blueStyle) 'apply'\n  funcTree = nodeFor f mapFunc\n  argTree = nodeFor a mapFunc\n  childWidth = + (+ (nodeWidth argTree) 5) (nodeWidth funcTree)\n  totalWidth = max childWidth (nodeWidth rootBox)\n  pad = max 0 (/ (- totalWidth childWidth) 2)\n  rootBox = node-translate rootBox (- (/ totalWidth 2) (/ (nodeWidth rootBox) 2)) 0\n  funcTree = node-translate funcTree pad (+ (nodeHeight rootBox) 5)\n  argTree = node-translate argTree (+ pad (+ (nodeWidth funcTree) 5)) (+ (nodeHeight rootBox) 5)\n  makeNode\n    svgConcat [(nodeLine rootBox funcTree) (nodeLine rootBox argTree) (nodeSvg rootBox) (nodeSvg funcTree) (nodeSvg argTree)]\n    totalWidth\n    + (+ (nodeHeight rootBox) 5) (max (nodeHeight argTree) (nodeHeight funcTree))\n    / totalWidth 2\n    / (nodeHeight rootBox) 2");
;
//createRefNode = AST(λast ref mapFunc . "textNode" ("mapFunc" "ast" "redStyle") "ref")
root.defs._createRefNode = _createRefNode = Parse.define('createRefNode', (function() {var f = (function(_ast){return function(_ref){return function(_mapFunc){return _textNode()((function(){var $m; return (function(){return $m || ($m = (_mapFunc()(_ast)(_redStyle)))})})())(_ref);};};}); return function _createRefNode(){return f;}})(), 3, "\\ast. \\ref. \\mapFunc. textNode (mapFunc ast redStyle) ref");
;
//createLitNode = AST(λast lit mapFunc . "textNode" ("mapFunc" "ast" "greenStyle") "lit")
root.defs._createLitNode = _createLitNode = Parse.define('createLitNode', (function() {var f = (function(_ast){return function(_lit){return function(_mapFunc){return _textNode()((function(){var $m; return (function(){return $m || ($m = (_mapFunc()(_ast)(_greenStyle)))})})())(_lit);};};}); return function _createLitNode(){return f;}})(), 3, "\\ast. \\lit. \\mapFunc. textNode (mapFunc ast greenStyle) lit");
;
//textNode = AST(λmap txt . "svgMeasureText" "txt" "" λw h . (λnodeW . (λnodeH . "makeNode" ("svgConcat" ("[" ("rect" ("[" ("[" "x" "|" 2 "]") ("[" "y" "|" 2 "]") ("[" "width" "|" "nodeW" "]") ("[" "height" "|" "nodeH" "]") "|" "map" "]")) ("text" "txt" ("[" ("[" "text-anchor" "|" "middle" "]") ("[" "dominant-baseline" "|" "mathematical" "]") ("[" "x" "|" ("+" 14 ("/" "w" 2)) "]") ("[" "y" "|" ("+" 5 ("/" "h" 2)) "]") ("[" "font-weight" "|" "bold" "]") "]")) "]")) "nodeW" "nodeH" ("/" "nodeW" 2) ("/" "nodeH" 2)) ("+" "h" 14)) ("+" "w" 24))
root.defs._textNode = _textNode = Parse.define('textNode', (function() {var f = (function(_map){return function(_txt){return _svgMeasureText()(_txt)((function(){return ""}))((function(){var $m; return (function(){return $m || ($m = (function(_w){return function(_h){return function(_nodeW){return function(_nodeH){return _makeNode()((function(){var $m; return (function(){return $m || ($m = (_svgConcat()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){var $m; return (function(){return $m || ($m = (_rect()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "x"}))(_$q)((function(){return 2}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "y"}))(_$q)((function(){return 2}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "width"}))(_$q)(_nodeW)(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "height"}))(_$q)(_nodeH)(_$s)))})})())(_$q)(_map)(_$s)))})})())))})})())((function(){var $m; return (function(){return $m || ($m = (_text()(_txt)((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "text-anchor"}))(_$q)((function(){return "middle"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "dominant-baseline"}))(_$q)((function(){return "mathematical"}))(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "x"}))(_$q)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){return 14}))((function(){var $m; return (function(){return $m || ($m = (_$f()(_w)((function(){return 2}))))})})())))})})())(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "y"}))(_$q)((function(){var $m; return (function(){return $m || ($m = (_$o()((function(){return 5}))((function(){var $m; return (function(){return $m || ($m = (_$f()(_h)((function(){return 2}))))})})())))})})())(_$s)))})})())((function(){var $m; return (function(){return $m || ($m = (_$r()((function(){return "font-weight"}))(_$q)((function(){return "bold"}))(_$s)))})})())(_$s)))})})())))})})())(_$s)))})})())))})})())(_nodeW)(_nodeH)((function(){var $m; return (function(){return $m || ($m = (_$f()(_nodeW)((function(){return 2}))))})})())((function(){var $m; return (function(){return $m || ($m = (_$f()(_nodeH)((function(){return 2}))))})})());}((function(){var $m; return (function(){return $m || ($m = (_$o()(_h)((function(){return 14}))))})})());}((function(){var $m; return (function(){return $m || ($m = (_$o()(_w)((function(){return 24}))))})})());};}))})})());};}); return function _textNode(){return f;}})(), 2, "\\map. \\txt. (svgMeasureText txt '') \\w h . do\n  nodeW = + w 24\n  nodeH = + h 14\n  makeNode\n    (svgConcat [(rect [['x'|2] ['y'|2] ['width'|nodeW] ['height'|nodeH] | map]) (text txt [['text-anchor'|\"middle\"] ['dominant-baseline'|\"mathematical\"] ['x'|(+ 14 (/ w 2))] ['y'|(+ 5 (/ h 2))] ['font-weight'|'bold']])])\n    nodeW\n    nodeH\n    / nodeW 2\n    / nodeH 2");
;
//typeof = AST(λx . "getType" "x" "id" "false")
root.defs._typeof = _typeof = Parse.define('typeof', (function() {var f = (function(_x){return _getType()(_x)(_id)(_false);}); return function _typeof(){return f;}})(), 1, "\\x. getType x id false");
;

//if (typeof window !== 'undefined' && window !== null) {
//  Leisure.processTokenDefs(root.tokenDefs);
//}
return root;
}).call(this)